<?php

class CompanySlugsTask extends sfBaseTask
{
  protected function configure()
  {
    // // add your own arguments here
    // $this->addArguments(array(
    //   new sfCommandArgument('my_arg', sfCommandArgument::REQUIRED, 'My argument'),
    // ));

    $this->addOptions(array(
      new sfCommandOption('application', null, sfCommandOption::PARAMETER_REQUIRED, 'The application name'),
      new sfCommandOption('env', null, sfCommandOption::PARAMETER_REQUIRED, 'The environment', 'dev'),
      new sfCommandOption('connection', null, sfCommandOption::PARAMETER_REQUIRED, 'The connection name', 'doctrine'),
      // add your own options here
    ));

    $this->namespace        = 'fix';
    $this->name             = 'CompanySlugs';
    $this->briefDescription = 'Fixes Company Slugs';
    $this->detailedDescription = <<<EOF
Fixes Company Slugs where there is difference in database vs the one generated by slugify
EOF;
  }

  protected function execute($arguments = array(), $options = array())
  {

 	// initialize the database connection
    $databaseManager = new sfDatabaseManager($this->configuration);
    $databaseManager->getDatabase($options['connection'])->getConnection();
    $con = Doctrine::getConnectionByTableName("company");


    
    $q = Doctrine_Query::create()
    	->select("c.id as company_id,c.created_at,c.title,c.slug,ct.title as title_en")
    	->from("company c")
     	->leftJoin("c.Translation ct")
    	->where("c.slug REGEXP  '.*-[^-]{4}$'")
    	->andWhere("ct.lang = 'en'")
    	->andWhere("DATE(c.created_at) > DATE('2014-01-01') ")
    	->andWhere("DATE(c.created_at) < DATE('2014-05-14')")
//     	->orderBy("c.created_at","ASC")
//     	->buildSqlQuery();
    	->fetchArray();
    $i = 0;
    $counters = array("eq"=>0,"neq"=>0);
    foreach($q as $arr){
    	
    	$generated_slug = CityTable::slugify($arr['title_en']);
    	$exclude_arr = array(
    		"gfdhhsgdf","fdgdfhf","dgdgf","dgdgf","dfgdgf","dfgdgfg","sdfsdfsdf","dfdggffdfg","gfgf","gfdghsdhd","gdfgdfg",
    	);
    	if(substr($arr['slug'],-4) != substr($generated_slug,-4)
    			&& substr($arr['slug'],-4) != "buek"
    			&& substr($arr['slug'],-4) != "toek"  
    			&& substr($arr['slug'],-4) != "eood" // sus smeneni imena sa teq a sluga si e ostanal
    			&& substr($arr['slug'],-4) != "auto"
    			&& substr($arr['slug'],-4) != "cafe"
    			&& substr($arr['slug'],-4) != "club"
    			&& substr($arr['slug'],-4) != "klub"
    			&& substr($arr['slug'],-4) != "port"
    			&& substr($arr['slug'],-4) != "shop"
    			&& substr($arr['slug'],-4) != "stil"
    			&& substr($arr['slug'],-4) != "utca"
    			&& substr($arr['slug'],-4) != "utja"
    			&& substr($arr['slug'],-4) != "park"
    			&& substr($arr['slug'],-4) != "piak"
    			&& substr($arr['slug'],-4) != "bolt"
    			&& substr($arr['slug'],-4) != "tank"
    			&& substr($arr['slug'],-4) != "tala"
    			&& substr($arr['slug'],-4) != "imre" // add new excludes
    			&& strpos($arr['slug'],"asd") === false 
    			&& strpos($arr['slug'],"test") === false 
    			&& strpos($arr['slug'],"getlokal") === false 
    			&& !in_array($generated_slug,$exclude_arr)){
    		
    		
    		echo "============================================================".PHP_EOL;
    		echo str_pad("In database: ",15).$arr['slug'].PHP_EOL;
    		echo str_pad("Generated: ",15).$generated_slug.PHP_EOL;
    		echo str_pad("Company ID: ",15).$arr['company_id'].PHP_EOL;
    		//echo str_pad("Created at: ",15).$arr['created_at'].PHP_EOL;
    		
    		
    		//prompting user to make a decision
    		$decision = "";
    		while(!($decision == "i" || $decision == "rs")){
    			echo PHP_EOL."What to do ?(i/rs - ignore/reslug(this will reindex the company page))".PHP_EOL;
    			$decision = stream_get_line(STDIN, 1024, PHP_EOL);
    		}
    		
    		if($decision == "rs"){
    			$similar_companies = Doctrine_Query::create()
    				->select("id,slug")
    				->from("company")
    				->where("slug REGEXP '^$generated_slug-[0-9]' OR slug = '$generated_slug'")
    				->setHydrationMode(Doctrine::HYDRATE_SCALAR)
    				->fetchArray();
    			
    			$new_slug = $generated_slug;
    			
    			$similar_companies_slugs = array();
    			
    			if($similar_companies){	
	    			foreach($similar_companies as $sc){
	    				$similar_companies_slugs[] = $sc['slug'];
	    			}
    			}
	    			
	    		for($i=0;;$i++){
	    			//echo "Comparing ".$generated_slug."-".$i." to ".implode(",",$similar_companies_slugs)."-".$i.PHP_EOL;
	    			$sufix = $i === 0 ? "" : "-$i";
	    			if(!in_array($generated_slug.$sufix,$similar_companies_slugs)){
	    				$new_slug = $new_slug.$sufix;
	    				if($arr['company_id']){
	    					$query = "UPDATE company SET slug = '$new_slug' WHERE id = '{$arr['company_id']}'";
// 	    					echo $query.PHP_EOL;
	    					$con->execute($query);	    					
	    				}else{
	    					echo " No Company ID".PHP_EOL;	    					
	    				}
	    				echo "new slug is ".$new_slug.PHP_EOL;
	    				break;	    				
	    			}
	    		}
    		}
    		
    		$counters['neq']++;
    		
    	}else{
    		$counters['eq']++;
    	}
    	
    }
    echo "Equal :".$counters['eq']." and Not Equal: ".$counters['neq'];
  }
  
  
}
