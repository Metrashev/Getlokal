<?php

/**
 * CompanyOffer
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CompanyOffer extends BaseCompanyOffer {

    const OFFERS_PER_PAGE = 20;

    public function postSave($event)
    {
        parent::postSave($event);
        $company = $this->getCompany();
        $company->save();
    }

    public function IsActive() {
        $today = date('Y-m-d');

        $isActive = $this->getIsStarted() &&
            strtotime($this->getActiveTo()) >= strtotime($today);
        if ($this->getMaxVouchers()) {
            $isActive = $isActive && $this->getMaxVouchers() > $this->getCountVoucherCodes();
        }
        return $isActive;
    }

    public function ActiveSevenDays() {
        $today = date('Y-m-d');

        $activeSevenDays = $this->getIsStarted() &&
            strtotime($this->getActiveTo()) >= date('Y-m-d', strtotime('-7 days', strtotime($today)));
        if ($this->getMaxVouchers()) {
            $activeSevenDays = $activeSevenDays && $this->getMaxVouchers() > $this->getCountVoucherCodes();
        }
        return $activeSevenDays;
    }

    public function getThumb($size = 0)
    {
        if ($this->getImage()) {
            return $this->getImage()->getThumb($size);
        }

        $image = new Image();
        $sizes = $image->getFile()->getOption('sizes');

        return 'gui/default_place_' . $sizes[$size] . '.jpg';
    }

    public function canEdit()
    {
        return $this->getCountVoucherCodes() == 0;
    }

    /**
     * Returns true if the offer doesn't have any vouchers and is not started already
     *
     * @return boolean
     */
    public function canDelete()
    {
        return $this->getCountVoucherCodes() == 0 && (
            $this->getActiveFrom() &&
            strtotime($this->getActiveFrom()) > strtotime(date('Y-m-d'))
        );
    }

    public function getVouchersPerOfferQuery($user = false, $limit = false) {
        $query = Doctrine_Core::getTable( 'Voucher' )->createQuery ( 'a' )->innerJoin ( 'a.CompanyOffer co' )->where ( 'co.id = ?', $this->getId () )->addOrderBy ( 'a.created_at', 'DESC' );
        if ($user) {
            $query->andWhere ( 'a.user_id = ?', $user->getId () );
        }
        if ($limit) {
            $query->limit ( $limit );
        }

        return $query;
    }
    public function getVouchersPerOffer($user = false, $count = false, $limit = false) {
        $query = $this->getVouchersPerOfferQuery ( $user, $limit );
        $all_vouchers = $query->execute ();
        if ($count) {
            return count ( $all_vouchers );
        } else {
            return $all_vouchers;
        }
    }

    public function getIsAvailableToOrder($user = false) {
        $count = $this->getVouchersPerOffer($user, true);

        if ($count < $this->getMaxPerUser() && $this->getAvailableVouchers()) {
            return true;
        }

        return false;
    }

    public function getAvailableVouchers()
    {
        if (!$this->getMaxVouchers()) {
            return true;
        }
        return $this->getCountVoucherCodes() < $this->getMaxVouchers();
    }

    public function updateNumberOfVouchers() {
        $vouchers_taken = $this->getVouchersPerOffer ( false, true );
        $this->setCountVoucherCodes ( $vouchers_taken );
        $this->save ();
    }

    public function getIsOkToEdit() {
        $query = Doctrine_Core::getTable ( 'CompanyOffer' )->createQuery ( 'a' )->where ( 'a.count_voucher_codes = ?', 0 );

        $ad_company = $query->fetchOne ();
        if ($ad_company instanceof CompanyOffer) {
            return $ad_company;
        } else {
            return false;
        }
    }
    public function getActiveAdService() {
        $query = doctrine::getTable ( 'AdServiceCompany' )
        ->createQuery ( 'adc' )
        ->innerJoin ( 'adc.CompanyOffer co' )
        ->addWhere ( 'co.id = ? ', $this->getId () )
        ->andWhere ( 'adc.status = "paid" or adc.status = "active"' )
        ->andWhere ( '((adc.crm_id is not null) OR (adc.active_from <= '.ProjectConfiguration::nowAlt().' AND adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ' );

        $active_deal_service = $query->fetchOne ();

        return $active_deal_service;

    }

    public function getAdServiceStatus() {
    	$query = doctrine::getTable ( 'AdServiceCompany' )
    	->createQuery ( 'adc' )
    	->innerJoin ( 'adc.CompanyOffer co' )
    	->addWhere ( 'co.id = ? ', $this->getId () )
    	->andWhere ( '((adc.crm_id is not null) OR (adc.active_from <= '.ProjectConfiguration::nowAlt().' AND adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ' );

    	$status_deal_service = $query->fetchOne ();

        if($status_deal_service){
            return $status_deal_service->getStatus();
        }

    	return ;
    }

    public function getRegisteredAdService() {
        $query = doctrine::getTable ( 'AdServiceCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.CompanyOffer co' )->addWhere ( 'co.id = ? ', $this->getId () )->andWhere ( 'adc.status = "registered"' );
        $active_deal_service = $query->fetchOne ();

        return $active_deal_service;

    }

    public function canActivate() {
        $result = false;
        if ($this->getIsActive () == false && $this->getActiveFrom () && $this->getActiveTo () && $this->getValidFrom () && $this->getValidTo ()) {
            $result = true;
        }
        return $result;
    }

    public function getDisplayTitle() {
        if ($this->_get ('title')) {
            return $this->_get ( 'title' );
        }

        foreach (getLokalPartner::getEmbeddedLanguages() as $culture) {
            if ($this->Translation[$culture]->_get('title', $culture)) {
                return $this->Translation[$culture]->_get('title', $culture);
            }
        }
        // fallback if the offer is in another language
        foreach(sfConfig::get('app_culture_slugs') as $culture) {
            if ($this->Translation[$culture]->_get('title', $culture)) {
                return $this->Translation[$culture]->_get('title', $culture);
            }
        }
    }

    public function getTitle() {
        foreach (getLokalPartner::getEmbeddedLanguages() as $culture) {
            if ($this->Translation[$culture]->_get('title', $culture)) {
                return $this->Translation[$culture]->_get('title', $culture);
            }
        }
    }

    public function getDisplayDescription() {
        if ($this->_get('content')) {
            return $this->_get('content');
        }

        foreach (getLokalPartner::getEmbeddedLanguages() as $culture) {
            if ($this->Translation[$culture]->_get('content', $culture)) {
                return $this->Translation[$culture]->_get('content', $culture);
            }
        }
        // fallback if the offer is in another language
        foreach(sfConfig::get('app_culture_slugs') as $culture) {
            if ($this->Translation[$culture]->_get('content', $culture)) {
                return $this->Translation[$culture]->_get('content', $culture);
            }
        }
    }

    public function save(Doctrine_Connection $conn = null) {
        $modified = $this->getModified(true);
        if (!empty($modified)) {
            if (array_key_exists('active_from', $modified)) {
                $product_available = $this->getAdServiceCompany();
                if ($product_available) {
                    if (
                        $product_available->getStatus() == 'paid' &&
                        $this->getActiveFrom() &&
                        !$this->getIsDraft()
                    ) {
                        $product_available->setStatus('active');
                    }
                    $product_available->setDealStartDate($this->getActiveFrom());
                    $product_available->save();
                }
            }
        }

        parent::save($conn);
    }

    /**
     * Returns true if the offer bound to the form is not a new object and the
     * deal period already started
     *
     * @param boolean $checkNew If `true` the company must be already in database
     * @param boolean $checkActive If `true` the company must also be active
     * @return boolean
     */
    public function getIsStarted($checkNew = true, $checkActive = true)
    {
        $isNotNew = $checkNew ? !$this->isNew() : true;
        $isActive = $checkActive ? $this->getIsActive() : true;
        return $isNotNew && $isActive && !$this->getIsDraft() && (
            $this->getActiveFrom() &&
            strtotime($this->getActiveFrom()) <= strtotime(date('Y-m-d'))
        );
    }

    public function getDisplayVouchersRemaining($integer = false) {
        if ($integer) {
            return $this->getMaxVouchers() - $this->getCountVoucherCodes();
        }
        if (!$this->getMaxVouchers()) {
            return '99+';
        }
        $vouchers = $this->getMaxVouchers() - $this->getCountVoucherCodes();
        if ($vouchers > 99 || !$vouchers) {
            $vouchers = '99+';
        }
        return $vouchers;
    }

}
