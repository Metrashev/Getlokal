<?php

/**
 * BaseUserProfile
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property date $birthdate
 * @property string $gender
 * @property string $phone_number
 * @property integer $karma
 * @property string $hash
 * @property string $facebook_uid
 * @property string $access_token
 * @property string $summary
 * @property integer $city_id
 * @property integer $image_id
 * @property string $blog_url
 * @property string $facebook_url
 * @property string $twitter_url
 * @property string $website
 * @property string $google_url
 * @property integer $country_id
 * @property integer $partner
 * @property string $referer
 * @property integer $points
 * @property City $City
 * @property sfGuardUser $sfGuardUser
 * @property Image $Image
 * @property Country $Country
 * @property UserSetting $UserSetting
 * @property UserPage $UserPage
 * @property Doctrine_Collection $PageAdmin
 * @property Doctrine_Collection $Company
 * @property Doctrine_Collection $CoverImage
 * @property Doctrine_Collection $CompanyLocation
 * @property Doctrine_Collection $CompanyDetail
 * @property Doctrine_Collection $Report
 * @property Doctrine_Collection $Comment
 * @property Doctrine_Collection $Review
 * @property Doctrine_Collection $Like
 * @property Doctrine_Collection $Activity
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $EventInvite
 * @property Doctrine_Collection $EventUser
 * @property Doctrine_Collection $PlaceFeatureVote
 * @property Doctrine_Collection $Follow
 * @property Doctrine_Collection $CompanyOffer
 * @property Doctrine_Collection $Voucher
 * @property Doctrine_Collection $NewsletterUser
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $ArticleImage
 * @property Doctrine_Collection $Lists
 * @property Doctrine_Collection $ListPage
 * @property Doctrine_Collection $UserBadge
 * @property Doctrine_Collection $UserStat
 * @property Doctrine_Collection $FacebookGame
 * @property Doctrine_Collection $FacebookReviewGame
 * @property Doctrine_Collection $FacebookReviewGameUser
 * @property Doctrine_Collection $ReviewVoucher
 * @property Doctrine_Collection $invitedUser
 * @property Doctrine_Collection $friendList
 * @property Doctrine_Collection $FollowPage
 * @property Doctrine_Collection $CompanyStatus
 * @property Doctrine_Collection $MobileLog
 * 
 * @method date                getBirthdate()              Returns the current record's "birthdate" value
 * @method string              getGender()                 Returns the current record's "gender" value
 * @method string              getPhoneNumber()            Returns the current record's "phone_number" value
 * @method integer             getKarma()                  Returns the current record's "karma" value
 * @method string              getHash()                   Returns the current record's "hash" value
 * @method string              getFacebookUid()            Returns the current record's "facebook_uid" value
 * @method string              getAccessToken()            Returns the current record's "access_token" value
 * @method string              getSummary()                Returns the current record's "summary" value
 * @method integer             getCityId()                 Returns the current record's "city_id" value
 * @method integer             getImageId()                Returns the current record's "image_id" value
 * @method string              getBlogUrl()                Returns the current record's "blog_url" value
 * @method string              getFacebookUrl()            Returns the current record's "facebook_url" value
 * @method string              getTwitterUrl()             Returns the current record's "twitter_url" value
 * @method string              getWebsite()                Returns the current record's "website" value
 * @method string              getGoogleUrl()              Returns the current record's "google_url" value
 * @method integer             getCountryId()              Returns the current record's "country_id" value
 * @method integer             getPartner()                Returns the current record's "partner" value
 * @method string              getReferer()                Returns the current record's "referer" value
 * @method integer             getPoints()                 Returns the current record's "points" value
 * @method City                getCity()                   Returns the current record's "City" value
 * @method sfGuardUser         getSfGuardUser()            Returns the current record's "sfGuardUser" value
 * @method Image               getImage()                  Returns the current record's "Image" value
 * @method Country             getCountry()                Returns the current record's "Country" value
 * @method UserSetting         getUserSetting()            Returns the current record's "UserSetting" value
 * @method UserPage            getUserPage()               Returns the current record's "UserPage" value
 * @method Doctrine_Collection getPageAdmin()              Returns the current record's "PageAdmin" collection
 * @method Doctrine_Collection getCompany()                Returns the current record's "Company" collection
 * @method Doctrine_Collection getCoverImage()             Returns the current record's "CoverImage" collection
 * @method Doctrine_Collection getCompanyLocation()        Returns the current record's "CompanyLocation" collection
 * @method Doctrine_Collection getCompanyDetail()          Returns the current record's "CompanyDetail" collection
 * @method Doctrine_Collection getReport()                 Returns the current record's "Report" collection
 * @method Doctrine_Collection getComment()                Returns the current record's "Comment" collection
 * @method Doctrine_Collection getReview()                 Returns the current record's "Review" collection
 * @method Doctrine_Collection getLike()                   Returns the current record's "Like" collection
 * @method Doctrine_Collection getActivity()               Returns the current record's "Activity" collection
 * @method Doctrine_Collection getEvent()                  Returns the current record's "Event" collection
 * @method Doctrine_Collection getEventInvite()            Returns the current record's "EventInvite" collection
 * @method Doctrine_Collection getEventUser()              Returns the current record's "EventUser" collection
 * @method Doctrine_Collection getPlaceFeatureVote()       Returns the current record's "PlaceFeatureVote" collection
 * @method Doctrine_Collection getFollow()                 Returns the current record's "Follow" collection
 * @method Doctrine_Collection getCompanyOffer()           Returns the current record's "CompanyOffer" collection
 * @method Doctrine_Collection getVoucher()                Returns the current record's "Voucher" collection
 * @method Doctrine_Collection getNewsletterUser()         Returns the current record's "NewsletterUser" collection
 * @method Doctrine_Collection getArticle()                Returns the current record's "Article" collection
 * @method Doctrine_Collection getArticleImage()           Returns the current record's "ArticleImage" collection
 * @method Doctrine_Collection getLists()                  Returns the current record's "Lists" collection
 * @method Doctrine_Collection getListPage()               Returns the current record's "ListPage" collection
 * @method Doctrine_Collection getUserBadge()              Returns the current record's "UserBadge" collection
 * @method Doctrine_Collection getUserStat()               Returns the current record's "UserStat" collection
 * @method Doctrine_Collection getFacebookGame()           Returns the current record's "FacebookGame" collection
 * @method Doctrine_Collection getFacebookReviewGame()     Returns the current record's "FacebookReviewGame" collection
 * @method Doctrine_Collection getFacebookReviewGameUser() Returns the current record's "FacebookReviewGameUser" collection
 * @method Doctrine_Collection getReviewVoucher()          Returns the current record's "ReviewVoucher" collection
 * @method Doctrine_Collection getInvitedUser()            Returns the current record's "invitedUser" collection
 * @method Doctrine_Collection getFriendList()             Returns the current record's "friendList" collection
 * @method Doctrine_Collection getFollowPage()             Returns the current record's "FollowPage" collection
 * @method Doctrine_Collection getCompanyStatus()          Returns the current record's "CompanyStatus" collection
 * @method Doctrine_Collection getMobileLog()              Returns the current record's "MobileLog" collection
 * @method UserProfile         setBirthdate()              Sets the current record's "birthdate" value
 * @method UserProfile         setGender()                 Sets the current record's "gender" value
 * @method UserProfile         setPhoneNumber()            Sets the current record's "phone_number" value
 * @method UserProfile         setKarma()                  Sets the current record's "karma" value
 * @method UserProfile         setHash()                   Sets the current record's "hash" value
 * @method UserProfile         setFacebookUid()            Sets the current record's "facebook_uid" value
 * @method UserProfile         setAccessToken()            Sets the current record's "access_token" value
 * @method UserProfile         setSummary()                Sets the current record's "summary" value
 * @method UserProfile         setCityId()                 Sets the current record's "city_id" value
 * @method UserProfile         setImageId()                Sets the current record's "image_id" value
 * @method UserProfile         setBlogUrl()                Sets the current record's "blog_url" value
 * @method UserProfile         setFacebookUrl()            Sets the current record's "facebook_url" value
 * @method UserProfile         setTwitterUrl()             Sets the current record's "twitter_url" value
 * @method UserProfile         setWebsite()                Sets the current record's "website" value
 * @method UserProfile         setGoogleUrl()              Sets the current record's "google_url" value
 * @method UserProfile         setCountryId()              Sets the current record's "country_id" value
 * @method UserProfile         setPartner()                Sets the current record's "partner" value
 * @method UserProfile         setReferer()                Sets the current record's "referer" value
 * @method UserProfile         setPoints()                 Sets the current record's "points" value
 * @method UserProfile         setCity()                   Sets the current record's "City" value
 * @method UserProfile         setSfGuardUser()            Sets the current record's "sfGuardUser" value
 * @method UserProfile         setImage()                  Sets the current record's "Image" value
 * @method UserProfile         setCountry()                Sets the current record's "Country" value
 * @method UserProfile         setUserSetting()            Sets the current record's "UserSetting" value
 * @method UserProfile         setUserPage()               Sets the current record's "UserPage" value
 * @method UserProfile         setPageAdmin()              Sets the current record's "PageAdmin" collection
 * @method UserProfile         setCompany()                Sets the current record's "Company" collection
 * @method UserProfile         setCoverImage()             Sets the current record's "CoverImage" collection
 * @method UserProfile         setCompanyLocation()        Sets the current record's "CompanyLocation" collection
 * @method UserProfile         setCompanyDetail()          Sets the current record's "CompanyDetail" collection
 * @method UserProfile         setReport()                 Sets the current record's "Report" collection
 * @method UserProfile         setComment()                Sets the current record's "Comment" collection
 * @method UserProfile         setReview()                 Sets the current record's "Review" collection
 * @method UserProfile         setLike()                   Sets the current record's "Like" collection
 * @method UserProfile         setActivity()               Sets the current record's "Activity" collection
 * @method UserProfile         setEvent()                  Sets the current record's "Event" collection
 * @method UserProfile         setEventInvite()            Sets the current record's "EventInvite" collection
 * @method UserProfile         setEventUser()              Sets the current record's "EventUser" collection
 * @method UserProfile         setPlaceFeatureVote()       Sets the current record's "PlaceFeatureVote" collection
 * @method UserProfile         setFollow()                 Sets the current record's "Follow" collection
 * @method UserProfile         setCompanyOffer()           Sets the current record's "CompanyOffer" collection
 * @method UserProfile         setVoucher()                Sets the current record's "Voucher" collection
 * @method UserProfile         setNewsletterUser()         Sets the current record's "NewsletterUser" collection
 * @method UserProfile         setArticle()                Sets the current record's "Article" collection
 * @method UserProfile         setArticleImage()           Sets the current record's "ArticleImage" collection
 * @method UserProfile         setLists()                  Sets the current record's "Lists" collection
 * @method UserProfile         setListPage()               Sets the current record's "ListPage" collection
 * @method UserProfile         setUserBadge()              Sets the current record's "UserBadge" collection
 * @method UserProfile         setUserStat()               Sets the current record's "UserStat" collection
 * @method UserProfile         setFacebookGame()           Sets the current record's "FacebookGame" collection
 * @method UserProfile         setFacebookReviewGame()     Sets the current record's "FacebookReviewGame" collection
 * @method UserProfile         setFacebookReviewGameUser() Sets the current record's "FacebookReviewGameUser" collection
 * @method UserProfile         setReviewVoucher()          Sets the current record's "ReviewVoucher" collection
 * @method UserProfile         setInvitedUser()            Sets the current record's "invitedUser" collection
 * @method UserProfile         setFriendList()             Sets the current record's "friendList" collection
 * @method UserProfile         setFollowPage()             Sets the current record's "FollowPage" collection
 * @method UserProfile         setCompanyStatus()          Sets the current record's "CompanyStatus" collection
 * @method UserProfile         setMobileLog()              Sets the current record's "MobileLog" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUserProfile extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('user_profile');
        $this->hasColumn('birthdate', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('gender', 'string', 1, array(
             'type' => 'string',
             'length' => 1,
             ));
        $this->hasColumn('phone_number', 'string', 255, array(
             'type' => 'string',
             'default' => '',
             'length' => 255,
             ));
        $this->hasColumn('karma', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('hash', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('facebook_uid', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('access_token', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('summary', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('city_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('image_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('blog_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('facebook_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('twitter_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('google_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('partner', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('referer', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('points', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));


        $this->index('karma', array(
             'fields' => 
             array(
              0 => 'karma',
             ),
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('City', array(
             'local' => 'city_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser', array(
             'local' => 'id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UserSetting', array(
             'local' => 'id',
             'foreign' => 'id'));

        $this->hasOne('UserPage', array(
             'local' => 'id',
             'foreign' => 'foreign_id'));

        $this->hasMany('PageAdmin', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Company', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('CoverImage', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('CompanyLocation', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('CompanyDetail', array(
             'local' => 'id',
             'foreign' => 'last_modified_by'));

        $this->hasMany('Report', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Comment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Review', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Like', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Activity', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('EventInvite', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('EventUser', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('PlaceFeatureVote', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Follow', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('CompanyOffer', array(
             'local' => 'id',
             'foreign' => 'created_by'));

        $this->hasMany('Voucher', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('NewsletterUser', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ArticleImage', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Lists', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ListPage', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserBadge', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('UserStat', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('FacebookGame', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('FacebookReviewGame', array(
             'local' => 'id',
             'foreign' => 'winner'));

        $this->hasMany('FacebookReviewGameUser', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('ReviewVoucher', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('invitedUser', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('friendList', array(
             'local' => 'id',
             'foreign' => 'user_id2'));

        $this->hasMany('FollowPage', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('CompanyStatus', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('MobileLog', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}