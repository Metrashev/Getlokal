<?php

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property string $description
 * @property timestamp $start_at
 * @property timestamp $end_at
 * @property time $start_h
 * @property time $end_h
 * @property integer $category_id
 * @property integer $image_id
 * @property string $facebook_id
 * @property string $info_url
 * @property string $buy_url
 * @property integer $price
 * @property integer $location_id
 * @property integer $country_id
 * @property integer $user_id
 * @property boolean $is_active
 * @property integer $recommend
 * @property timestamp $recommended_at
 * @property Category $Category
 * @property Country $Country
 * @property UserProfile $UserProfile
 * @property City $City
 * @property Image $Image
 * @property ActivityEvent $ActivityEvent
 * @property Doctrine_Collection $EventInvite
 * @property Doctrine_Collection $EventUser
 * @property Doctrine_Collection $EventPage
 * @property Doctrine_Collection $EventImage
 * @property Doctrine_Collection $ArticleEvent
 * @property EventSearch $EventSearch
 * @property Doctrine_Collection $getWeekend
 * @property Doctrine_Collection $getWeekendEvent
 * 
 * @method string              getTitle()           Returns the current record's "title" value
 * @method string              getDescription()     Returns the current record's "description" value
 * @method timestamp           getStartAt()         Returns the current record's "start_at" value
 * @method timestamp           getEndAt()           Returns the current record's "end_at" value
 * @method time                getStartH()          Returns the current record's "start_h" value
 * @method time                getEndH()            Returns the current record's "end_h" value
 * @method integer             getCategoryId()      Returns the current record's "category_id" value
 * @method integer             getImageId()         Returns the current record's "image_id" value
 * @method string              getFacebookId()      Returns the current record's "facebook_id" value
 * @method string              getInfoUrl()         Returns the current record's "info_url" value
 * @method string              getBuyUrl()          Returns the current record's "buy_url" value
 * @method integer             getPrice()           Returns the current record's "price" value
 * @method integer             getLocationId()      Returns the current record's "location_id" value
 * @method integer             getCountryId()       Returns the current record's "country_id" value
 * @method integer             getUserId()          Returns the current record's "user_id" value
 * @method boolean             getIsActive()        Returns the current record's "is_active" value
 * @method integer             getRecommend()       Returns the current record's "recommend" value
 * @method timestamp           getRecommendedAt()   Returns the current record's "recommended_at" value
 * @method Category            getCategory()        Returns the current record's "Category" value
 * @method Country             getCountry()         Returns the current record's "Country" value
 * @method UserProfile         getUserProfile()     Returns the current record's "UserProfile" value
 * @method City                getCity()            Returns the current record's "City" value
 * @method Image               getImage()           Returns the current record's "Image" value
 * @method ActivityEvent       getActivityEvent()   Returns the current record's "ActivityEvent" value
 * @method Doctrine_Collection getEventInvite()     Returns the current record's "EventInvite" collection
 * @method Doctrine_Collection getEventUser()       Returns the current record's "EventUser" collection
 * @method Doctrine_Collection getEventPage()       Returns the current record's "EventPage" collection
 * @method Doctrine_Collection getEventImage()      Returns the current record's "EventImage" collection
 * @method Doctrine_Collection getArticleEvent()    Returns the current record's "ArticleEvent" collection
 * @method EventSearch         getEventSearch()     Returns the current record's "EventSearch" value
 * @method Doctrine_Collection getGetWeekend()      Returns the current record's "getWeekend" collection
 * @method Doctrine_Collection getGetWeekendEvent() Returns the current record's "getWeekendEvent" collection
 * @method Event               setTitle()           Sets the current record's "title" value
 * @method Event               setDescription()     Sets the current record's "description" value
 * @method Event               setStartAt()         Sets the current record's "start_at" value
 * @method Event               setEndAt()           Sets the current record's "end_at" value
 * @method Event               setStartH()          Sets the current record's "start_h" value
 * @method Event               setEndH()            Sets the current record's "end_h" value
 * @method Event               setCategoryId()      Sets the current record's "category_id" value
 * @method Event               setImageId()         Sets the current record's "image_id" value
 * @method Event               setFacebookId()      Sets the current record's "facebook_id" value
 * @method Event               setInfoUrl()         Sets the current record's "info_url" value
 * @method Event               setBuyUrl()          Sets the current record's "buy_url" value
 * @method Event               setPrice()           Sets the current record's "price" value
 * @method Event               setLocationId()      Sets the current record's "location_id" value
 * @method Event               setCountryId()       Sets the current record's "country_id" value
 * @method Event               setUserId()          Sets the current record's "user_id" value
 * @method Event               setIsActive()        Sets the current record's "is_active" value
 * @method Event               setRecommend()       Sets the current record's "recommend" value
 * @method Event               setRecommendedAt()   Sets the current record's "recommended_at" value
 * @method Event               setCategory()        Sets the current record's "Category" value
 * @method Event               setCountry()         Sets the current record's "Country" value
 * @method Event               setUserProfile()     Sets the current record's "UserProfile" value
 * @method Event               setCity()            Sets the current record's "City" value
 * @method Event               setImage()           Sets the current record's "Image" value
 * @method Event               setActivityEvent()   Sets the current record's "ActivityEvent" value
 * @method Event               setEventInvite()     Sets the current record's "EventInvite" collection
 * @method Event               setEventUser()       Sets the current record's "EventUser" collection
 * @method Event               setEventPage()       Sets the current record's "EventPage" collection
 * @method Event               setEventImage()      Sets the current record's "EventImage" collection
 * @method Event               setArticleEvent()    Sets the current record's "ArticleEvent" collection
 * @method Event               setEventSearch()     Sets the current record's "EventSearch" value
 * @method Event               setGetWeekend()      Sets the current record's "getWeekend" collection
 * @method Event               setGetWeekendEvent() Sets the current record's "getWeekendEvent" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 6000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 6000,
             ));
        $this->hasColumn('start_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('end_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('start_h', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('end_h', 'time', null, array(
             'type' => 'time',
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('image_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('facebook_id', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('info_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('buy_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('price', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('location_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('recommend', 'integer', 1, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('recommended_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => false,
             ));


        $this->index('recommended', array(
             'fields' => 
             array(
              0 => 'recommended_at',
             ),
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('UserProfile', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('City', array(
             'local' => 'location_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('ActivityEvent', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('EventInvite', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventUser', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventPage', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('EventImage', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasMany('ArticleEvent', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $this->hasOne('EventSearch', array(
             'local' => 'id',
             'foreign' => 'object_id'));

        $this->hasMany('getWeekend', array(
             'refClass' => 'getWeekendEvent',
             'local' => 'event_id',
             'foreign' => 'parent_id'));

        $this->hasMany('getWeekendEvent', array(
             'local' => 'id',
             'foreign' => 'event_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'description',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}