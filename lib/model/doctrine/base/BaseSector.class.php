<?php

/**
 * BaseSector
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property boolean $is_active
 * @property integer $rank
 * @property string $title
 * @property string $slug
 * @property clob $description
 * @property string $page_title
 * @property clob $meta_description
 * @property Doctrine_Collection $Classification
 * @property Doctrine_Collection $SectorSlugLog
 * @property Doctrine_Collection $ClassificationSector
 * @property Doctrine_Collection $CategorySector
 * @property Doctrine_Collection $Company
 * @property Doctrine_Collection $SectorFeature
 * @property Doctrine_Collection $Slider
 * @property Doctrine_Collection $SliderSector
 * 
 * @method boolean             getIsActive()             Returns the current record's "is_active" value
 * @method integer             getRank()                 Returns the current record's "rank" value
 * @method string              getTitle()                Returns the current record's "title" value
 * @method string              getSlug()                 Returns the current record's "slug" value
 * @method clob                getDescription()          Returns the current record's "description" value
 * @method string              getPageTitle()            Returns the current record's "page_title" value
 * @method clob                getMetaDescription()      Returns the current record's "meta_description" value
 * @method Doctrine_Collection getClassification()       Returns the current record's "Classification" collection
 * @method Doctrine_Collection getSectorSlugLog()        Returns the current record's "SectorSlugLog" collection
 * @method Doctrine_Collection getClassificationSector() Returns the current record's "ClassificationSector" collection
 * @method Doctrine_Collection getCategorySector()       Returns the current record's "CategorySector" collection
 * @method Doctrine_Collection getCompany()              Returns the current record's "Company" collection
 * @method Doctrine_Collection getSectorFeature()        Returns the current record's "SectorFeature" collection
 * @method Doctrine_Collection getSlider()               Returns the current record's "Slider" collection
 * @method Doctrine_Collection getSliderSector()         Returns the current record's "SliderSector" collection
 * @method Sector              setIsActive()             Sets the current record's "is_active" value
 * @method Sector              setRank()                 Sets the current record's "rank" value
 * @method Sector              setTitle()                Sets the current record's "title" value
 * @method Sector              setSlug()                 Sets the current record's "slug" value
 * @method Sector              setDescription()          Sets the current record's "description" value
 * @method Sector              setPageTitle()            Sets the current record's "page_title" value
 * @method Sector              setMetaDescription()      Sets the current record's "meta_description" value
 * @method Sector              setClassification()       Sets the current record's "Classification" collection
 * @method Sector              setSectorSlugLog()        Sets the current record's "SectorSlugLog" collection
 * @method Sector              setClassificationSector() Sets the current record's "ClassificationSector" collection
 * @method Sector              setCategorySector()       Sets the current record's "CategorySector" collection
 * @method Sector              setCompany()              Sets the current record's "Company" collection
 * @method Sector              setSectorFeature()        Sets the current record's "SectorFeature" collection
 * @method Sector              setSlider()               Sets the current record's "Slider" collection
 * @method Sector              setSliderSector()         Sets the current record's "SliderSector" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSector extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('sector');
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             ));
        $this->hasColumn('page_title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('meta_description', 'clob', null, array(
             'type' => 'clob',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Classification', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('SectorSlugLog', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('ClassificationSector', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('CategorySector', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('Company', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('SectorFeature', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $this->hasMany('Slider', array(
             'refClass' => 'SliderSector',
             'local' => 'sector_id',
             'foreign' => 'slider_id'));

        $this->hasMany('SliderSector', array(
             'local' => 'id',
             'foreign' => 'sector_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'slug',
              2 => 'description',
              3 => 'page_title',
              4 => 'meta_description',
              5 => 'rank',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}