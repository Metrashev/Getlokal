<?php

/**
 * BaseCategory
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property boolean $is_active
 * @property varchar $slug
 * @property enum $status
 * @property string $model_name
 * @property Doctrine_Collection $Classification
 * @property Doctrine_Collection $CategoryClassification
 * @property Doctrine_Collection $CategorySector
 * @property Doctrine_Collection $Event
 * 
 * @method string              getTitle()                  Returns the current record's "title" value
 * @method boolean             getIsActive()               Returns the current record's "is_active" value
 * @method varchar             getSlug()                   Returns the current record's "slug" value
 * @method enum                getStatus()                 Returns the current record's "status" value
 * @method string              getModelName()              Returns the current record's "model_name" value
 * @method Doctrine_Collection getClassification()         Returns the current record's "Classification" collection
 * @method Doctrine_Collection getCategoryClassification() Returns the current record's "CategoryClassification" collection
 * @method Doctrine_Collection getCategorySector()         Returns the current record's "CategorySector" collection
 * @method Doctrine_Collection getEvent()                  Returns the current record's "Event" collection
 * @method Category            setTitle()                  Sets the current record's "title" value
 * @method Category            setIsActive()               Sets the current record's "is_active" value
 * @method Category            setSlug()                   Sets the current record's "slug" value
 * @method Category            setStatus()                 Sets the current record's "status" value
 * @method Category            setModelName()              Sets the current record's "model_name" value
 * @method Category            setClassification()         Sets the current record's "Classification" collection
 * @method Category            setCategoryClassification() Sets the current record's "CategoryClassification" collection
 * @method Category            setCategorySector()         Sets the current record's "CategorySector" collection
 * @method Category            setEvent()                  Sets the current record's "Event" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCategory extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('category');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('slug', 'varchar', 255, array(
             'type' => 'varchar',
             'length' => 255,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'approved',
              1 => 'pending',
              2 => 'rejected',
             ),
             'default' => 'approved',
             ));
        $this->hasColumn('model_name', 'string', 60, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 60,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Classification', array(
             'refClass' => 'CategoryClassification',
             'local' => 'category_id',
             'foreign' => 'classification_id',
             'onDelete' => 'CASCADE,'));

        $this->hasMany('CategoryClassification', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('CategorySector', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'slug',
              2 => 'is_active',
             ),
             ));
        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
        $this->actAs($nestedset0);
    }
}