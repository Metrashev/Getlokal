<?php

/**
 * BasePage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property boolean $is_public
 * @property string $url_alias
 * @property integer $foreign_id
 * @property integer $country_id
 * @property string $type
 * @property Country $Country
 * @property Activity $Activity
 * @property ActivityPage $ActivityPage
 * @property Doctrine_Collection $PlaceFeature
 * @property Doctrine_Collection $Follow
 * @property Doctrine_Collection $Conversation
 * @property Doctrine_Collection $Message
 * @property Doctrine_Collection $FollowPage
 * @property Doctrine_Collection $Notification
 * 
 * @method boolean             getIsPublic()     Returns the current record's "is_public" value
 * @method string              getUrlAlias()     Returns the current record's "url_alias" value
 * @method integer             getForeignId()    Returns the current record's "foreign_id" value
 * @method integer             getCountryId()    Returns the current record's "country_id" value
 * @method string              getType()         Returns the current record's "type" value
 * @method Country             getCountry()      Returns the current record's "Country" value
 * @method Activity            getActivity()     Returns the current record's "Activity" value
 * @method ActivityPage        getActivityPage() Returns the current record's "ActivityPage" value
 * @method Doctrine_Collection getPlaceFeature() Returns the current record's "PlaceFeature" collection
 * @method Doctrine_Collection getFollow()       Returns the current record's "Follow" collection
 * @method Doctrine_Collection getConversation() Returns the current record's "Conversation" collection
 * @method Doctrine_Collection getMessage()      Returns the current record's "Message" collection
 * @method Doctrine_Collection getFollowPage()   Returns the current record's "FollowPage" collection
 * @method Doctrine_Collection getNotification() Returns the current record's "Notification" collection
 * @method Page                setIsPublic()     Sets the current record's "is_public" value
 * @method Page                setUrlAlias()     Sets the current record's "url_alias" value
 * @method Page                setForeignId()    Sets the current record's "foreign_id" value
 * @method Page                setCountryId()    Sets the current record's "country_id" value
 * @method Page                setType()         Sets the current record's "type" value
 * @method Page                setCountry()      Sets the current record's "Country" value
 * @method Page                setActivity()     Sets the current record's "Activity" value
 * @method Page                setActivityPage() Sets the current record's "ActivityPage" value
 * @method Page                setPlaceFeature() Sets the current record's "PlaceFeature" collection
 * @method Page                setFollow()       Sets the current record's "Follow" collection
 * @method Page                setConversation() Sets the current record's "Conversation" collection
 * @method Page                setMessage()      Sets the current record's "Message" collection
 * @method Page                setFollowPage()   Sets the current record's "FollowPage" collection
 * @method Page                setNotification() Sets the current record's "Notification" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('page');
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('url_alias', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('foreign_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));


        $this->index('alias', array(
             'fields' => 
             array(
              0 => 'url_alias',
             ),
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));

        $this->setSubClasses(array(
             'UserPage' => 
             array(
              'type' => 1,
             ),
             'CompanyPage' => 
             array(
              'type' => 2,
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Activity', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasOne('ActivityPage', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('PlaceFeature', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Follow', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Conversation', array(
             'local' => 'id',
             'foreign' => 'page_from'));

        $this->hasMany('Message', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('FollowPage', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $this->hasMany('Notification', array(
             'local' => 'id',
             'foreign' => 'page_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}