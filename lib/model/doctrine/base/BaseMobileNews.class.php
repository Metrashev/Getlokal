<?php

/**
 * BaseMobileNews
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property string $line1
 * @property string $line2
 * @property string $link
 * @property integer $rank
 * @property integer $country_id
 * @property boolean $is_active
 * @property Doctrine_Collection $Cities
 * @property Doctrine_Collection $MobileNewsCity
 * 
 * @method string              getTitle()          Returns the current record's "title" value
 * @method string              getLine1()          Returns the current record's "line1" value
 * @method string              getLine2()          Returns the current record's "line2" value
 * @method string              getLink()           Returns the current record's "link" value
 * @method integer             getRank()           Returns the current record's "rank" value
 * @method integer             getCountryId()      Returns the current record's "country_id" value
 * @method boolean             getIsActive()       Returns the current record's "is_active" value
 * @method Doctrine_Collection getCities()         Returns the current record's "Cities" collection
 * @method Doctrine_Collection getMobileNewsCity() Returns the current record's "MobileNewsCity" collection
 * @method MobileNews          setTitle()          Sets the current record's "title" value
 * @method MobileNews          setLine1()          Sets the current record's "line1" value
 * @method MobileNews          setLine2()          Sets the current record's "line2" value
 * @method MobileNews          setLink()           Sets the current record's "link" value
 * @method MobileNews          setRank()           Sets the current record's "rank" value
 * @method MobileNews          setCountryId()      Sets the current record's "country_id" value
 * @method MobileNews          setIsActive()       Sets the current record's "is_active" value
 * @method MobileNews          setCities()         Sets the current record's "Cities" collection
 * @method MobileNews          setMobileNewsCity() Sets the current record's "MobileNewsCity" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseMobileNews extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('mobile_news');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('line1', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('line2', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('link', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('City as Cities', array(
             'refClass' => 'MobileNewsCity',
             'local' => 'news_id',
             'foreign' => 'city_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('MobileNewsCity', array(
             'local' => 'id',
             'foreign' => 'news_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $doctrineclusterstorage0 = new DoctrineClusterStorage(array(
             'filename' => 
             array(
              'is_image' => true,
              'sizes' => 
              array(
              0 => '600x220',
              1 => '63x63',
              ),
              'prefix' => 'slider',
              'sizefield_name' => false,
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($doctrineclusterstorage0);
    }
}