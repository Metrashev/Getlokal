<?php

/**
 * BaseLists
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property enum $list_type
 * @property string $title
 * @property string $description
 * @property boolean $is_active
 * @property boolean $is_open
 * @property enum $status
 * @property integer $country_id
 * @property integer $image_id
 * @property UserProfile $UserProfile
 * @property Country $Country
 * @property Image $Image
 * @property ActivityList $ActivityList
 * @property Doctrine_Collection $ArticleList
 * @property Doctrine_Collection $ListImage
 * @property Doctrine_Collection $ListPage
 * 
 * @method integer             getUserId()       Returns the current record's "user_id" value
 * @method enum                getListType()     Returns the current record's "list_type" value
 * @method string              getTitle()        Returns the current record's "title" value
 * @method string              getDescription()  Returns the current record's "description" value
 * @method boolean             getIsActive()     Returns the current record's "is_active" value
 * @method boolean             getIsOpen()       Returns the current record's "is_open" value
 * @method enum                getStatus()       Returns the current record's "status" value
 * @method integer             getCountryId()    Returns the current record's "country_id" value
 * @method integer             getImageId()      Returns the current record's "image_id" value
 * @method UserProfile         getUserProfile()  Returns the current record's "UserProfile" value
 * @method Country             getCountry()      Returns the current record's "Country" value
 * @method Image               getImage()        Returns the current record's "Image" value
 * @method ActivityList        getActivityList() Returns the current record's "ActivityList" value
 * @method Doctrine_Collection getArticleList()  Returns the current record's "ArticleList" collection
 * @method Doctrine_Collection getListImage()    Returns the current record's "ListImage" collection
 * @method Doctrine_Collection getListPage()     Returns the current record's "ListPage" collection
 * @method Lists               setUserId()       Sets the current record's "user_id" value
 * @method Lists               setListType()     Sets the current record's "list_type" value
 * @method Lists               setTitle()        Sets the current record's "title" value
 * @method Lists               setDescription()  Sets the current record's "description" value
 * @method Lists               setIsActive()     Sets the current record's "is_active" value
 * @method Lists               setIsOpen()       Sets the current record's "is_open" value
 * @method Lists               setStatus()       Sets the current record's "status" value
 * @method Lists               setCountryId()    Sets the current record's "country_id" value
 * @method Lists               setImageId()      Sets the current record's "image_id" value
 * @method Lists               setUserProfile()  Sets the current record's "UserProfile" value
 * @method Lists               setCountry()      Sets the current record's "Country" value
 * @method Lists               setImage()        Sets the current record's "Image" value
 * @method Lists               setActivityList() Sets the current record's "ActivityList" value
 * @method Lists               setArticleList()  Sets the current record's "ArticleList" collection
 * @method Lists               setListImage()    Sets the current record's "ListImage" collection
 * @method Lists               setListPage()     Sets the current record's "ListPage" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLists extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('lists');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('list_type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'opened',
              1 => 'closed',
             ),
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 1000, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 1000,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('is_open', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'approved',
              1 => 'pending',
              2 => 'rejected',
             ),
             'default' => 'approved',
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('image_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserProfile', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Image', array(
             'local' => 'image_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('ActivityList', array(
             'local' => 'id',
             'foreign' => 'action_id'));

        $this->hasMany('ArticleList', array(
             'local' => 'id',
             'foreign' => 'list_id'));

        $this->hasMany('ListImage', array(
             'local' => 'id',
             'foreign' => 'list_id'));

        $this->hasMany('ListPage', array(
             'local' => 'id',
             'foreign' => 'list_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'description',
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($i18n0);
        $this->actAs($timestampable0);
    }
}