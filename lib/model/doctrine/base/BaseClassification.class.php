<?php

/**
 * BaseClassification
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $external_id
 * @property integer $category_id
 * @property integer $sector_id
 * @property enum $status
 * @property integer $crm_id
 * @property string $title
 * @property string $slug
 * @property string $short_title
 * @property boolean $is_active
 * @property integer $number_of_places
 * @property string $keywords
 * @property string $description
 * @property string $old_slug
 * @property varchar $page_title
 * @property clob $meta_description
 * @property Category $Category
 * @property Sector $PrimarySector
 * @property Doctrine_Collection $ClassificationSlugLog
 * @property Doctrine_Collection $CompanyClassification
 * @property Doctrine_Collection $CategoryClassification
 * @property Doctrine_Collection $ClassificationSector
 * @property Doctrine_Collection $Company
 * @property Doctrine_Collection $CategoryArticle
 * 
 * @method string              getExternalId()             Returns the current record's "external_id" value
 * @method integer             getCategoryId()             Returns the current record's "category_id" value
 * @method integer             getSectorId()               Returns the current record's "sector_id" value
 * @method enum                getStatus()                 Returns the current record's "status" value
 * @method integer             getCrmId()                  Returns the current record's "crm_id" value
 * @method string              getTitle()                  Returns the current record's "title" value
 * @method string              getSlug()                   Returns the current record's "slug" value
 * @method string              getShortTitle()             Returns the current record's "short_title" value
 * @method boolean             getIsActive()               Returns the current record's "is_active" value
 * @method integer             getNumberOfPlaces()         Returns the current record's "number_of_places" value
 * @method string              getKeywords()               Returns the current record's "keywords" value
 * @method string              getDescription()            Returns the current record's "description" value
 * @method string              getOldSlug()                Returns the current record's "old_slug" value
 * @method varchar             getPageTitle()              Returns the current record's "page_title" value
 * @method clob                getMetaDescription()        Returns the current record's "meta_description" value
 * @method Category            getCategory()               Returns the current record's "Category" value
 * @method Sector              getPrimarySector()          Returns the current record's "PrimarySector" value
 * @method Doctrine_Collection getClassificationSlugLog()  Returns the current record's "ClassificationSlugLog" collection
 * @method Doctrine_Collection getCompanyClassification()  Returns the current record's "CompanyClassification" collection
 * @method Doctrine_Collection getCategoryClassification() Returns the current record's "CategoryClassification" collection
 * @method Doctrine_Collection getClassificationSector()   Returns the current record's "ClassificationSector" collection
 * @method Doctrine_Collection getCompany()                Returns the current record's "Company" collection
 * @method Doctrine_Collection getCategoryArticle()        Returns the current record's "CategoryArticle" collection
 * @method Classification      setExternalId()             Sets the current record's "external_id" value
 * @method Classification      setCategoryId()             Sets the current record's "category_id" value
 * @method Classification      setSectorId()               Sets the current record's "sector_id" value
 * @method Classification      setStatus()                 Sets the current record's "status" value
 * @method Classification      setCrmId()                  Sets the current record's "crm_id" value
 * @method Classification      setTitle()                  Sets the current record's "title" value
 * @method Classification      setSlug()                   Sets the current record's "slug" value
 * @method Classification      setShortTitle()             Sets the current record's "short_title" value
 * @method Classification      setIsActive()               Sets the current record's "is_active" value
 * @method Classification      setNumberOfPlaces()         Sets the current record's "number_of_places" value
 * @method Classification      setKeywords()               Sets the current record's "keywords" value
 * @method Classification      setDescription()            Sets the current record's "description" value
 * @method Classification      setOldSlug()                Sets the current record's "old_slug" value
 * @method Classification      setPageTitle()              Sets the current record's "page_title" value
 * @method Classification      setMetaDescription()        Sets the current record's "meta_description" value
 * @method Classification      setCategory()               Sets the current record's "Category" value
 * @method Classification      setPrimarySector()          Sets the current record's "PrimarySector" value
 * @method Classification      setClassificationSlugLog()  Sets the current record's "ClassificationSlugLog" collection
 * @method Classification      setCompanyClassification()  Sets the current record's "CompanyClassification" collection
 * @method Classification      setCategoryClassification() Sets the current record's "CategoryClassification" collection
 * @method Classification      setClassificationSector()   Sets the current record's "ClassificationSector" collection
 * @method Classification      setCompany()                Sets the current record's "Company" collection
 * @method Classification      setCategoryArticle()        Sets the current record's "CategoryArticle" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseClassification extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('classification');
        $this->hasColumn('external_id', 'string', 36, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 36,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('sector_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'pending',
              1 => 'approved',
              2 => 'rejected',
             ),
             'default' => 'approved',
             ));
        $this->hasColumn('crm_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('short_title', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('number_of_places', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'length' => 4,
             ));
        $this->hasColumn('keywords', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('old_slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('page_title', 'varchar', 255, array(
             'type' => 'varchar',
             'length' => 255,
             ));
        $this->hasColumn('meta_description', 'clob', null, array(
             'type' => 'clob',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Sector as PrimarySector', array(
             'local' => 'sector_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ClassificationSlugLog', array(
             'local' => 'id',
             'foreign' => 'classification_id'));

        $this->hasMany('CompanyClassification', array(
             'local' => 'id',
             'foreign' => 'classification_id'));

        $this->hasMany('CategoryClassification', array(
             'local' => 'id',
             'foreign' => 'classification_id'));

        $this->hasMany('ClassificationSector', array(
             'local' => 'id',
             'foreign' => 'classification_id'));

        $this->hasMany('Company', array(
             'local' => 'id',
             'foreign' => 'classification_id'));

        $this->hasMany('CategoryArticle', array(
             'refClass' => 'CategoryArticleClassification',
             'local' => 'classification_id',
             'foreign' => 'category_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'title',
              1 => 'slug',
              2 => 'short_title',
              3 => 'is_active',
              4 => 'number_of_places',
              5 => 'keywords',
              6 => 'description',
              7 => 'old_slug',
              8 => 'page_title',
              9 => 'meta_description',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($i18n0);
    }
}