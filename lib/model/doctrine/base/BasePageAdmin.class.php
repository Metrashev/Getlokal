<?php

/**
 * BasePageAdmin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $page_id
 * @property enum $status
 * @property integer $position
 * @property boolean $is_primary
 * @property string $username
 * @property string $algorithm
 * @property string $salt
 * @property string $password
 * @property timestamp $last_login
 * @property UserProfile $UserProfile
 * @property CompanyPage $CompanyPage
 * @property AdminRememberKey $RememberKeys
 * 
 * @method integer          getUserId()       Returns the current record's "user_id" value
 * @method integer          getPageId()       Returns the current record's "page_id" value
 * @method enum             getStatus()       Returns the current record's "status" value
 * @method integer          getPosition()     Returns the current record's "position" value
 * @method boolean          getIsPrimary()    Returns the current record's "is_primary" value
 * @method string           getUsername()     Returns the current record's "username" value
 * @method string           getAlgorithm()    Returns the current record's "algorithm" value
 * @method string           getSalt()         Returns the current record's "salt" value
 * @method string           getPassword()     Returns the current record's "password" value
 * @method timestamp        getLastLogin()    Returns the current record's "last_login" value
 * @method UserProfile      getUserProfile()  Returns the current record's "UserProfile" value
 * @method CompanyPage      getCompanyPage()  Returns the current record's "CompanyPage" value
 * @method AdminRememberKey getRememberKeys() Returns the current record's "RememberKeys" value
 * @method PageAdmin        setUserId()       Sets the current record's "user_id" value
 * @method PageAdmin        setPageId()       Sets the current record's "page_id" value
 * @method PageAdmin        setStatus()       Sets the current record's "status" value
 * @method PageAdmin        setPosition()     Sets the current record's "position" value
 * @method PageAdmin        setIsPrimary()    Sets the current record's "is_primary" value
 * @method PageAdmin        setUsername()     Sets the current record's "username" value
 * @method PageAdmin        setAlgorithm()    Sets the current record's "algorithm" value
 * @method PageAdmin        setSalt()         Sets the current record's "salt" value
 * @method PageAdmin        setPassword()     Sets the current record's "password" value
 * @method PageAdmin        setLastLogin()    Sets the current record's "last_login" value
 * @method PageAdmin        setUserProfile()  Sets the current record's "UserProfile" value
 * @method PageAdmin        setCompanyPage()  Sets the current record's "CompanyPage" value
 * @method PageAdmin        setRememberKeys() Sets the current record's "RememberKeys" value
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePageAdmin extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('page_admin');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('page_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'approved',
              1 => 'pending',
              2 => 'rejected',
             ),
             'default' => 'pending',
             ));
        $this->hasColumn('position', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('is_primary', 'boolean', null, array(
             'type' => 'boolean',
             'default' => true,
             ));
        $this->hasColumn('username', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'length' => 128,
             ));
        $this->hasColumn('algorithm', 'string', 128, array(
             'type' => 'string',
             'default' => 'sha1',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('salt', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('password', 'string', 128, array(
             'type' => 'string',
             'length' => 128,
             ));
        $this->hasColumn('last_login', 'timestamp', null, array(
             'type' => 'timestamp',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserProfile', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('CompanyPage', array(
             'local' => 'page_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('AdminRememberKey as RememberKeys', array(
             'local' => 'id',
             'foreign' => 'page_admin_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}