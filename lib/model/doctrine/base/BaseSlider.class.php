<?php

/**
 * BaseSlider
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property string $title_en
 * @property string $title_ru
 * @property string $body
 * @property string $body_en
 * @property string $body_ru
 * @property string $link
 * @property string $link_en
 * @property string $link_ru
 * @property integer $rank
 * @property integer $country_id
 * @property boolean $whole_country
 * @property boolean $is_active
 * @property Doctrine_Collection $Sectors
 * @property Doctrine_Collection $Cities
 * @property Doctrine_Collection $SliderSector
 * @property Doctrine_Collection $SliderCity
 * 
 * @method string              getTitle()         Returns the current record's "title" value
 * @method string              getTitleEn()       Returns the current record's "title_en" value
 * @method string              getTitleRu()       Returns the current record's "title_ru" value
 * @method string              getBody()          Returns the current record's "body" value
 * @method string              getBodyEn()        Returns the current record's "body_en" value
 * @method string              getBodyRu()        Returns the current record's "body_ru" value
 * @method string              getLink()          Returns the current record's "link" value
 * @method string              getLinkEn()        Returns the current record's "link_en" value
 * @method string              getLinkRu()        Returns the current record's "link_ru" value
 * @method integer             getRank()          Returns the current record's "rank" value
 * @method integer             getCountryId()     Returns the current record's "country_id" value
 * @method boolean             getWholeCountry()  Returns the current record's "whole_country" value
 * @method boolean             getIsActive()      Returns the current record's "is_active" value
 * @method Doctrine_Collection getSectors()       Returns the current record's "Sectors" collection
 * @method Doctrine_Collection getCities()        Returns the current record's "Cities" collection
 * @method Doctrine_Collection getSliderSector()  Returns the current record's "SliderSector" collection
 * @method Doctrine_Collection getSliderCity()    Returns the current record's "SliderCity" collection
 * @method Slider              setTitle()         Sets the current record's "title" value
 * @method Slider              setTitleEn()       Sets the current record's "title_en" value
 * @method Slider              setTitleRu()       Sets the current record's "title_ru" value
 * @method Slider              setBody()          Sets the current record's "body" value
 * @method Slider              setBodyEn()        Sets the current record's "body_en" value
 * @method Slider              setBodyRu()        Sets the current record's "body_ru" value
 * @method Slider              setLink()          Sets the current record's "link" value
 * @method Slider              setLinkEn()        Sets the current record's "link_en" value
 * @method Slider              setLinkRu()        Sets the current record's "link_ru" value
 * @method Slider              setRank()          Sets the current record's "rank" value
 * @method Slider              setCountryId()     Sets the current record's "country_id" value
 * @method Slider              setWholeCountry()  Sets the current record's "whole_country" value
 * @method Slider              setIsActive()      Sets the current record's "is_active" value
 * @method Slider              setSectors()       Sets the current record's "Sectors" collection
 * @method Slider              setCities()        Sets the current record's "Cities" collection
 * @method Slider              setSliderSector()  Sets the current record's "SliderSector" collection
 * @method Slider              setSliderCity()    Sets the current record's "SliderCity" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSlider extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('slider');
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('title_en', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('title_ru', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('body', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('body_en', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('body_ru', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('link', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('link_en', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('link_ru', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('rank', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             ));
        $this->hasColumn('country_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('whole_country', 'boolean', null, array(
             'type' => 'boolean',
             ));
        $this->hasColumn('is_active', 'boolean', null, array(
             'type' => 'boolean',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Sector as Sectors', array(
             'refClass' => 'SliderSector',
             'local' => 'slider_id',
             'foreign' => 'sector_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('City as Cities', array(
             'refClass' => 'SliderCity',
             'local' => 'slider_id',
             'foreign' => 'city_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('SliderSector', array(
             'local' => 'id',
             'foreign' => 'slider_id'));

        $this->hasMany('SliderCity', array(
             'local' => 'id',
             'foreign' => 'slider_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $doctrineclusterstorage0 = new DoctrineClusterStorage(array(
             'filename' => 
             array(
              'is_image' => true,
              'sizes' => 
              array(
              0 => '600x290',
              1 => '63x63',
              ),
              'prefix' => 'slider',
              'sizefield_name' => false,
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($doctrineclusterstorage0);
    }
}