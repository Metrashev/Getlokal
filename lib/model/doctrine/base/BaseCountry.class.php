<?php

/**
 * BaseCountry
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $name_en
 * @property string $slug
 * @property string $currency
 * @property Doctrine_Collection $County
 * @property Doctrine_Collection $UserProfile
 * @property Doctrine_Collection $Page
 * @property Doctrine_Collection $Company
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $CompanyOffer
 * @property Doctrine_Collection $Newsletter
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $CategoryArticle
 * @property Doctrine_Collection $Lists
 * @property Doctrine_Collection $StaticPage
 * @property Doctrine_Collection $ReviewTopPrize
 * @property Doctrine_Collection $ReviewTop
 * @property Doctrine_Collection $UnregisteredNewsletterUser
 * 
 * @method string              getName()                       Returns the current record's "name" value
 * @method string              getNameEn()                     Returns the current record's "name_en" value
 * @method string              getSlug()                       Returns the current record's "slug" value
 * @method string              getCurrency()                   Returns the current record's "currency" value
 * @method Doctrine_Collection getCounty()                     Returns the current record's "County" collection
 * @method Doctrine_Collection getUserProfile()                Returns the current record's "UserProfile" collection
 * @method Doctrine_Collection getPage()                       Returns the current record's "Page" collection
 * @method Doctrine_Collection getCompany()                    Returns the current record's "Company" collection
 * @method Doctrine_Collection getEvent()                      Returns the current record's "Event" collection
 * @method Doctrine_Collection getCompanyOffer()               Returns the current record's "CompanyOffer" collection
 * @method Doctrine_Collection getNewsletter()                 Returns the current record's "Newsletter" collection
 * @method Doctrine_Collection getArticle()                    Returns the current record's "Article" collection
 * @method Doctrine_Collection getCategoryArticle()            Returns the current record's "CategoryArticle" collection
 * @method Doctrine_Collection getLists()                      Returns the current record's "Lists" collection
 * @method Doctrine_Collection getStaticPage()                 Returns the current record's "StaticPage" collection
 * @method Doctrine_Collection getReviewTopPrize()             Returns the current record's "ReviewTopPrize" collection
 * @method Doctrine_Collection getReviewTop()                  Returns the current record's "ReviewTop" collection
 * @method Doctrine_Collection getUnregisteredNewsletterUser() Returns the current record's "UnregisteredNewsletterUser" collection
 * @method Country             setName()                       Sets the current record's "name" value
 * @method Country             setNameEn()                     Sets the current record's "name_en" value
 * @method Country             setSlug()                       Sets the current record's "slug" value
 * @method Country             setCurrency()                   Sets the current record's "currency" value
 * @method Country             setCounty()                     Sets the current record's "County" collection
 * @method Country             setUserProfile()                Sets the current record's "UserProfile" collection
 * @method Country             setPage()                       Sets the current record's "Page" collection
 * @method Country             setCompany()                    Sets the current record's "Company" collection
 * @method Country             setEvent()                      Sets the current record's "Event" collection
 * @method Country             setCompanyOffer()               Sets the current record's "CompanyOffer" collection
 * @method Country             setNewsletter()                 Sets the current record's "Newsletter" collection
 * @method Country             setArticle()                    Sets the current record's "Article" collection
 * @method Country             setCategoryArticle()            Sets the current record's "CategoryArticle" collection
 * @method Country             setLists()                      Sets the current record's "Lists" collection
 * @method Country             setStaticPage()                 Sets the current record's "StaticPage" collection
 * @method Country             setReviewTopPrize()             Sets the current record's "ReviewTopPrize" collection
 * @method Country             setReviewTop()                  Sets the current record's "ReviewTop" collection
 * @method Country             setUnregisteredNewsletterUser() Sets the current record's "UnregisteredNewsletterUser" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCountry extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('country');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('name_en', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('currency', 'string', 3, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 3,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('County', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('UserProfile', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('Page', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('Company', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('CompanyOffer', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('Newsletter', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('CategoryArticle', array(
             'refClass' => 'CategoryArticleCountry',
             'local' => 'country_id',
             'foreign' => 'category_id'));

        $this->hasMany('Lists', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('StaticPage', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('ReviewTopPrize', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('ReviewTop', array(
             'local' => 'id',
             'foreign' => 'country_id'));

        $this->hasMany('UnregisteredNewsletterUser', array(
             'local' => 'id',
             'foreign' => 'country_id'));
    }
}