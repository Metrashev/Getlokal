<?php

/**
 * BaseReport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property string $email
 * @property string $name
 * @property string $body
 * @property string $offence
 * @property enum $status
 * @property integer $object_id
 * @property string $type
 * @property UserProfile $UserProfile
 * 
 * @method integer     getUserId()      Returns the current record's "user_id" value
 * @method string      getEmail()       Returns the current record's "email" value
 * @method string      getName()        Returns the current record's "name" value
 * @method string      getBody()        Returns the current record's "body" value
 * @method string      getOffence()     Returns the current record's "offence" value
 * @method enum        getStatus()      Returns the current record's "status" value
 * @method integer     getObjectId()    Returns the current record's "object_id" value
 * @method string      getType()        Returns the current record's "type" value
 * @method UserProfile getUserProfile() Returns the current record's "UserProfile" value
 * @method Report      setUserId()      Sets the current record's "user_id" value
 * @method Report      setEmail()       Sets the current record's "email" value
 * @method Report      setName()        Sets the current record's "name" value
 * @method Report      setBody()        Sets the current record's "body" value
 * @method Report      setOffence()     Sets the current record's "offence" value
 * @method Report      setStatus()      Sets the current record's "status" value
 * @method Report      setObjectId()    Sets the current record's "object_id" value
 * @method Report      setType()        Sets the current record's "type" value
 * @method Report      setUserProfile() Sets the current record's "UserProfile" value
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseReport extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('report');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('body', 'string', 1000, array(
             'type' => 'string',
             'length' => 1000,
             ));
        $this->hasColumn('offence', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'approved',
              1 => 'pending',
              2 => 'rejected',
             ),
             'default' => 'pending',
             ));
        $this->hasColumn('object_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');

        $this->setSubClasses(array(
             'ReportImage' => 
             array(
              'type' => 'image',
             ),
             'ReportReview' => 
             array(
              'type' => 'review',
             ),
             'ReportCompany' => 
             array(
              'type' => 'company',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('UserProfile', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}