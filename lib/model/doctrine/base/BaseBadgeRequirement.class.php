<?php

/**
 * BaseBadgeRequirement
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $value
 * @property integer $badge_id
 * @property integer $group_no
 * @property Badge $Badge
 * @property Doctrine_Collection $BadgeRequirementField
 * 
 * @method integer             getValue()                 Returns the current record's "value" value
 * @method integer             getBadgeId()               Returns the current record's "badge_id" value
 * @method integer             getGroupNo()               Returns the current record's "group_no" value
 * @method Badge               getBadge()                 Returns the current record's "Badge" value
 * @method Doctrine_Collection getBadgeRequirementField() Returns the current record's "BadgeRequirementField" collection
 * @method BadgeRequirement    setValue()                 Sets the current record's "value" value
 * @method BadgeRequirement    setBadgeId()               Sets the current record's "badge_id" value
 * @method BadgeRequirement    setGroupNo()               Sets the current record's "group_no" value
 * @method BadgeRequirement    setBadge()                 Sets the current record's "Badge" value
 * @method BadgeRequirement    setBadgeRequirementField() Sets the current record's "BadgeRequirementField" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBadgeRequirement extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('badge_requirement');
        $this->hasColumn('keyValue as value', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('badge_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('group_no', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Badge', array(
             'local' => 'badge_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('BadgeRequirementField', array(
             'local' => 'id',
             'foreign' => 'requirement_id'));
    }
}