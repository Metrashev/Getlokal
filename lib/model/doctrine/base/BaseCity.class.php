<?php

/**
 * BaseCity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $slug
 * @property integer $county_id
 * @property boolean $is_default
 * @property string $lat
 * @property string $lng
 * @property County $County
 * @property Doctrine_Collection $SerbianCities
 * @property Doctrine_Collection $UserProfile
 * @property Doctrine_Collection $Company
 * @property Doctrine_Collection $Event
 * @property Doctrine_Collection $Article
 * @property Doctrine_Collection $Slider
 * @property Doctrine_Collection $SliderCity
 * @property Doctrine_Collection $MobileNews
 * @property Doctrine_Collection $MobileNewsCity
 * @property Doctrine_Collection $mailBgCampaign
 * 
 * @method string              getName()           Returns the current record's "name" value
 * @method string              getSlug()           Returns the current record's "slug" value
 * @method integer             getCountyId()       Returns the current record's "county_id" value
 * @method boolean             getIsDefault()      Returns the current record's "is_default" value
 * @method string              getLat()            Returns the current record's "lat" value
 * @method string              getLng()            Returns the current record's "lng" value
 * @method County              getCounty()         Returns the current record's "County" value
 * @method Doctrine_Collection getSerbianCities()  Returns the current record's "SerbianCities" collection
 * @method Doctrine_Collection getUserProfile()    Returns the current record's "UserProfile" collection
 * @method Doctrine_Collection getCompany()        Returns the current record's "Company" collection
 * @method Doctrine_Collection getEvent()          Returns the current record's "Event" collection
 * @method Doctrine_Collection getArticle()        Returns the current record's "Article" collection
 * @method Doctrine_Collection getSlider()         Returns the current record's "Slider" collection
 * @method Doctrine_Collection getSliderCity()     Returns the current record's "SliderCity" collection
 * @method Doctrine_Collection getMobileNews()     Returns the current record's "MobileNews" collection
 * @method Doctrine_Collection getMobileNewsCity() Returns the current record's "MobileNewsCity" collection
 * @method Doctrine_Collection getMailBgCampaign() Returns the current record's "mailBgCampaign" collection
 * @method City                setName()           Sets the current record's "name" value
 * @method City                setSlug()           Sets the current record's "slug" value
 * @method City                setCountyId()       Sets the current record's "county_id" value
 * @method City                setIsDefault()      Sets the current record's "is_default" value
 * @method City                setLat()            Sets the current record's "lat" value
 * @method City                setLng()            Sets the current record's "lng" value
 * @method City                setCounty()         Sets the current record's "County" value
 * @method City                setSerbianCities()  Sets the current record's "SerbianCities" collection
 * @method City                setUserProfile()    Sets the current record's "UserProfile" collection
 * @method City                setCompany()        Sets the current record's "Company" collection
 * @method City                setEvent()          Sets the current record's "Event" collection
 * @method City                setArticle()        Sets the current record's "Article" collection
 * @method City                setSlider()         Sets the current record's "Slider" collection
 * @method City                setSliderCity()     Sets the current record's "SliderCity" collection
 * @method City                setMobileNews()     Sets the current record's "MobileNews" collection
 * @method City                setMobileNewsCity() Sets the current record's "MobileNewsCity" collection
 * @method City                setMailBgCampaign() Sets the current record's "mailBgCampaign" collection
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('city');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('slug', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('county_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('is_default', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('lat', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('lng', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('County', array(
             'local' => 'county_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('SerbianCities', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('UserProfile', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('Company', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('Event', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('Article', array(
             'local' => 'id',
             'foreign' => 'location_id'));

        $this->hasMany('Slider', array(
             'refClass' => 'SliderCity',
             'local' => 'city_id',
             'foreign' => 'slider_id'));

        $this->hasMany('SliderCity', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('MobileNews', array(
             'refClass' => 'MobileNewsCity',
             'local' => 'city_id',
             'foreign' => 'news_id'));

        $this->hasMany('MobileNewsCity', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $this->hasMany('mailBgCampaign', array(
             'local' => 'id',
             'foreign' => 'city_id'));

        $i18n0 = new Doctrine_Template_I18n(array(
             'fields' => 
             array(
              0 => 'name',
             ),
             ));
        $this->actAs($i18n0);
    }
}