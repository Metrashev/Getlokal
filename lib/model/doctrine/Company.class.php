<?php
/**
 * Company
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Company extends BaseCompany
{

    protected $user = null;

    public function __toString()
    {
        return $this->getCompanyTitle ();
    }

    public function setUser(sfUser $user = null)
    {
        $this->user = $user;
    }
    public function getCounty()
    {
        return $this->getCity ()->getCounty ();
    }

    public function getCountry()
    {
        return $this->getCity ()->getCounty ()->getCountry ();
    }

    public function getThumb($size = 0, $absolute = false,$debug = false)
    {
        if (!($this->getImage() && get_class($this->getImage()) == "Image" && $this->getImage()->getThumb($size, $absolute))) {
            $image = new Image();
            $sizes = $image->getFile()->getOption('sizes');
            if($size == 15){
            	return 'gui/default-place-image-list_150x100.jpg';
            }
            if($size == 16){
            	return 'gui/default-place-image_150x150.jpg';
            }
            return 'gui/default_place_' . $sizes [$size] . '.jpg';
        }
        $size = ($size == 15 ? 2 : $size);
        $size = ($size == 16 ? 0 : $size);
        return $this->getImage()->getThumb($size, $absolute);
    }
    
    public function getIcon(){
    	return 'marker_' . $this->getSectorId();
    }
    
    public function getSmallIcon(){
    	$icon = "small_marker_".$this->getSectorId(); 
    	if(!$this->getActivePPPService(true)){
    		$icon = "gray_".$icon;
    	}
    	return $icon;
    }

    public function getCanonicalUrl()
    {
        if(sfContext::getInstance()->getUser()->getCulture() != sfConfig::get('app_domain_to_culture_'.strtoupper($this->getCountry()->getSlug()))
                && sfContext::getInstance()->getUser()->getCulture() !='en'){
            $culture = sfConfig::get('app_domain_to_culture_'.strtoupper($this->getCountry()->getSlug()));
        }
        else{
            $culture = sfContext::getInstance()->getUser()->getCulture();
        }
        
        return $this->getPermalink($this->getCountry()->getSlug(), $culture);
    }

    public function getPermalink($country, $culture)
    {
        $domains = array(
            'bg' => 'www.getlokal.com',
            'ro' => 'www.getlokal.ro',
            'mk' => 'www.getlokal.mk',
            'rs' => 'www.getlokal.rs',
            'sr' => 'www.getlokal.rs',
            'fi' => 'www.getlokal.fi',
            'cz' => 'www.getlokal.cz',
            'cs' => 'www.getlokal.cz',
            'sk' => 'www.getlokal.sk',
            'hu' => 'www.getlokal.hu',
            'pt' => 'www.getlokal.pt',
        	'me' => 'www.getlokal.me',
        	'ru' => 'www.getlokal.ru'
        );

        if (array_key_exists($country, $domains)){
            return 'http://'. $domains[$country]. url_for($this->getUri(). '&sf_culture='. $culture);
        }
        
        return 'http://www.getlokal.com'. url_for($this->getUri(). '&sf_culture=en');
    }

    public function getUri()
    {
        return '@company?slug=' . $this->getSlug () . '&city=' . $this->getCity ()->getSlug ();
    }

    public function getClassificationUri()
    {

        return '@classification?slug=' . $this->getClassification ()->getSlug () . '&sector=' . $this->getSector ()->getSlug () . '&city=' . $this->getCity ()->getSlug ();
    }

    public function getCategoryUri()
    {

        return '@sector?slug=' . $this->getSector ()->getSlug () . '&sector=' . $this->getSector ()->getSlug () . '&city=' . $this->getCity ()->getSlug ();
    }

    public function getPhoneFormated($pnone = null, $culture = null)
    {
        $partner_class = $this->getCountry()->getSlug();
        if (!$culture){
            $culture = sfContext::getInstance()->getUser()->getCulture();
        }

        $method = "getPhoneFormated{$partner_class}";
        if (method_exists($this, $method) && $method != "getPhoneFormated"){
            return $this->$method($pnone);
        }
        
        $purephone = (($pnone) ? $pnone : $this->getPhone());
        $purephone = preg_replace('/[^0-9]/', '', $purephone);
        
        return $purephone;
    }

    public function getIsClaimed()
    {
        $q = Doctrine::getTable ( 'PageAdmin' )
                ->createQuery ( 'p' )
                ->innerjoin ( 'p.CompanyPage cp' )
                ->innerjoin ( 'cp.Company c' )
                ->where ( 'c.id = ?', $this->getId () )
                ->andWhere ( 'p.status = ?', 'approved' );

        if ($q->count ()) {
            return true;

        }

        return false;
    }

    public function getDisplayAddress($culture = null)
    {
        if (! $culture) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $partner_class = ucfirst($this->getCountry ()->getSlug ());
        $method = "getDisplayAddress{$partner_class}";
        if (method_exists ( $this, $method )) {
            return $this->$method ( $culture );
        }
        else {
            $address = array ();
            
            $company_location = $this->getLocation ();
            
            $address [] .= $this->getCity ()->getCityNameByCulture ( 'en' );
            
            $street = $company_location->getStreet ();
            $number = $company_location->getStreetNumber ();
                if ($number) {
                    $street .= ' ' . $number;
                }
            
                $address [] = $street;
                        
            return implode ( ', ', $address );
        }
    }

    public function getPhoneFormatedBg($pnone = null)
    {
        $purephone = (($pnone) ? $pnone : $this->getPhone());
        $purephone = preg_replace('/[^0-9]/', '', $purephone);

        if (preg_match ( '/^02/', $purephone )) {

            $purephone = substr ( $purephone, 2 );
            $purephone = '02 ' . $purephone;
        }
        $purephone =  substr($purephone, 1);
        $purephone = '+359 ' .substr ( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2, 3 ) . ' ' . substr ( $purephone, 5 );

        //$phone = $purephone;
        return $purephone;

    }


    public function getPhoneFormatedRo($pnone = null)
    {
        $purephone = (($pnone) ? $pnone : $this->getPhone ());
        $purephone = preg_replace ( '/[^0-9]/', '', $purephone );
        $purephone =  substr($purephone, 1);
        if (preg_match ( '/^7/', $purephone )) {
            $purephone = '+40 ' . substr ( $purephone, 0, 3 ) . ' ' . substr ( $purephone, 3, 3 ) . ' ' . substr ( $purephone, 6 );
        } else {
            $purephone = '+40 ' . substr ( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2, 3 ) . ' ' . substr ( $purephone, 5 );
        }
        //$phone = $purephone;
        return $purephone;

    }

    public function getPhoneFormatedMk($pnone = null)
    {
        $purephone = (($pnone) ? $pnone : $this->getPhone ());

        $purephone = preg_replace ( '/[^0-9]/', '', $purephone );
        if (! preg_match ( '/^0/', $purephone )) {
            $purephone = '0' . $purephone;
        }

        if (preg_match ( '/^02/', $purephone )) {

            $purephone = substr ( $purephone, 2 );
            $purephone = '02 ' . $purephone;
        }

        $purephone =  substr($purephone, 1);
        $purephone = '+389 ' .substr ( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2, 3 ) . ' ' . substr ( $purephone, 5 );

        return $purephone;

    }

    public function getPhoneFormatedFi($pnone = null)
    {
    	$purephone = (($pnone) ? $pnone : $this->getPhone ());
    	$purephone = preg_replace ( '/[^0-9]/', '', $purephone );

    	$purephone =  substr($purephone, 1);
    	$purephone =  substr( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2 );
    	$purephone = '+358 ' .substr ( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2, 3 ) . ' ' . substr ( $purephone, 5 );
    	//$phone = $purephone;
    	return $purephone;
    }

    public function getType($culture = null)
    {

        $partner_class = getlokalPartner::getLanguageClass ( $this->getCountryId () );

        $method = "LookupCompanyType{$partner_class}";
        if (method_exists ( $this, $method )) {
            return $this->$method ( $culture );
        }
        return false;
    }

    public function getDisplayAddressBg($culture = null)
    {

        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeBg::getInstance ( $culture );
        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateBg::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateBg::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        else {
            $fullAdress = $company_location->getFullAddress ( $culture );
            if ($fullAdress) {
                $address [] = $fullAdress;
            }
        }

        return implode ( ', ', $address );
    }

    public function getDisplayAddressMk($culture = null)
    {
        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        if (! $company_location->getStreet () && ($company_location->getFullAddress () || $company_location->getFullAddressEn ())) {
            return $culture == 'en' ? $company_location->getFullAddressEn () : $company_location->getFullAddress ();
        }

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeDispl = '';
        $strTypeDispl = '';
        $locTypeList = AddressTypeMk::getInstance ( $culture );
        if ($strType) {
            $strTypeDispl = ((isset ( $locTypeList [$strType] ) && $strType) ? $locTypeList [$strType] : '');
        }
        if ($locType) {
            $locTypeDispl = ((isset ( $locTypeList [$locType] ) && $locType) ? $locTypeList [$locType] : '');
        }

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateMk::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateMk::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        else {
            $fullAdress = $company_location->getFullAddress ( $culture );
            if ($fullAdress) {
                $address [] = $fullAdress;
            }
        }

        return implode ( ', ', $address );
    }

    public function getDisplayAddressRo($culture = null)
    {
        $add = '';
        $address = array ();
        $i18n = sfContext::getInstance()->getI18N();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeRo::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = $i18n->__(' - Neighbourhood ', null, 'company') . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }
        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'en' != $culture) {
                $add .= ' ';
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        else {
            $fullAdress = $company_location->getFullAddress ( $culture );
            if ($fullAdress) {
              $address [] = $fullAdress;
            }
        }

        return implode ( ', ', $address );

    }
      public function getDisplayAddressFi($culture = null)
      {
        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeFi::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';


        if($culture == 'ru'){
            $street = TransliterateFi::toRu($company_location->getStreet ());
        }
        elseif($culture == 'en'){
            $street = TransliterateFi::toLatin($company_location->getStreet ());
        }
        else{
            $street = $company_location->getStreet ();
        }

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }
        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
                $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }


        if($culture == 'ru'){
            $fullAdress = TransliterateFi::toRu($company_location->getFullAddress());
        }
        elseif($culture == 'en'){
            if($company_location->getFullAddressEn() !=''){
                $fullAdress = $company_location->getFullAddressEn();
            }
            else{
                $fullAdress = TransliterateFi::toLatin($company_location->getFullAddress());
            }
        }
        else{
            $fullAdress = $company_location->getFullAddress();
        }

        //$fullAdress = $company_location->getFullAddress ($culture);
        if (!$street and $fullAdress) {
            $address [] = $fullAdress;
        }

        return implode ( ', ', $address );

    }
    public function getDisplayAddressCs($culture = null)
      {
        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeCs::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';


        if($culture == 'ru'){
            $street = TransliterateCs::toRu($company_location->getStreet ());
        }
        elseif($culture == 'en'){
            $street = TransliterateCs::toLatin($company_location->getStreet ());
        }
        else{
            $street = $company_location->getStreet ();
        }

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }
        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
                $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        else {
            $fullAdress = $company_location->getFullAddress ( $culture );
            if ($fullAdress) {
                $address [] = $fullAdress;
            }
        }

        return implode ( ', ', $address );

    }

    public function getDisplayAddressSk($culture = null)
      {
        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeSk::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';


        if($culture == 'ru'){
            $street = TransliterateSk::toRu($company_location->getStreet ());
        }
        elseif($culture == 'en'){
            $street = TransliterateSk::toLatin($company_location->getStreet ());
        }
        else{
            $street = $company_location->getStreet ();
        }

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }
        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
                $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        else {
            $fullAdress = $company_location->getFullAddress ( $culture );
            if ($fullAdress) {
                $address [] = $fullAdress;
            }
        }

        return implode ( ', ', $address );

    }
    public function getDisplayAddressHu($culture = null)
    {

        
        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        /*
         * The Following is not needed for this Partner
         * 
        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeHu::getInstance ( $culture );
        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';
        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateHu::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateHu::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        */

        $fullAddress = $company_location->getFullAddress ( $culture );
        if ($fullAddress) {
            $address [] = $fullAddress;
        }

        return implode ( ', ', $address );
    }


    public function getFullAddress($culture = null)
    {
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $result = array ();
        $company_location = $this->getLocation ();
        $i18n = sfContext::getInstance ()->getI18N ();
        $building_no = ucwords ( $company_location->getBuildingNo () );
        $entrance = ucwords ( $company_location->getEntrance () );
        $floor = ucwords ( $company_location->getFloor () );
        $appartment = ucwords ( $company_location->getAppartment () );
        /*if ('en' == $culture)
          {
          $bl=TransliterateNew::toLatin($bl);
          $ent=TransliterateNew::toLatin($ent);
          $fl=TransliterateNew::toLatin($fl);
          $appartment=TransliterateNew::toLatin($appartment);
          }*/
        if ($company_location->getBuildingNo () && $company_location->getBuildingNo () !== '') {
            $result [] = $i18n->__ ( 'bl. ', null, 'company' ) . ucwords ( $building_no );
        }
        if ($company_location->getEntrance () && $company_location->getEntrance () !== '') {
            $result [] = $i18n->__ ( 'ent. ', null, 'company' ) . ucwords ( $entrance );
        }
        if ($company_location->getFloor () && $company_location->getFloor () !== '') {
            $result [] = $i18n->__ ( 'fl. ', null, 'company' ) . ucwords ( $floor );
        }
        if ($company_location->getAppartment () && $company_location->getAppartment () !== '') {
            $result [] = $i18n->__ ( 'ap. ', null, 'company' ) . ucwords ( $appartment );
        }

        return implode ( ' ', $result );
    }
    
    public function getCompanyTitle($culture = null, $country = null, $ignoreCountry = false)
    {
        
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
       $title = false;
       if(!empty($this->Translation)){
       	if(!empty($this->Translation[$culture]['title'])){
       		$title = $this->Translation[$culture]['title'];
       	}
       }
       
       if(!$title){
        	$title = $this->getTitle();
       }

        /* 
        * New - transliterate company title if transliteration method exists
        */
        
        $local_lang = sfContext::getInstance ()->getUser ()->getCountry ()->getSlug ();


//return $title;
        if( $culture != $local_lang && $culture !='en' && !$title){
            $title = $this->getCompanyTitleByCulture('en');
            

        }
        else{
            
            if ($ignoreCountry) {
                if($culture != 'en'){
                    $title = $this->getCompanyTitleByCulture('en');
 
                }
               //$title = ($culture == 'en') ? : $this->getCompanyTitleByCulture('en');
            }
            else {
                
                if (is_null ( $country )) {
                    $country = sfContext::getInstance ()->getUser ()->getCountry ()->getId ();
                }
                if($country && $this->getCountryId () != $country && $culture != 'en'){
                     $title  = $this->getCompanyTitleByCulture('en');
                }
                else{
                     //$title = $this->getTitle ();
                }

               // $title = ($culture == 'en' || ($country && $this->getCountryId () != $country)) ? $this->getCompanyTitleByCulture('en') : $this->getTitle ();
            }

        } 
        //End New


        /* Original
            if ($ignoreCountry) {
                $title = ($culture == 'en') ? $this->getTitle () : $this->getTitle ();
            }
            else {
                if (is_null ( $country )) {
                  $country = sfContext::getInstance ()->getUser ()->getCountry ()->getId ();
                }

                $title = ($culture == 'en' || ($country && $this->getCountryId () != $country)) ? $this->getTitle () : $this->getTitle ();
            }
        */
        if (($brackPos = strpos ( $title, '(' )) === false) {
            /*if ($companyType = $this->getDisplayCompanyType($culture)){
                $title .= ' ' . $companyType;
            }*/

            return $title;
        }
        else {
            return trim ( substr ( $title, 0, $brackPos ) );
        }

    }

    public function getI18nDescription ($culture = null) {

        $desc = $this->getDescription();
        $desc_en = $this->getDescriptionEn();
        $country_slug = $this->getCity()->getCounty()->getCountry()->getSlug();
        if (!$culture) {
            $culture = sfContext::getInstance()->getUser()->getCulture();
        }
        if ($culture == 'en') {
            return $desc_en;
        }
        if ($culture == $country_slug && !empty($desc)) {
            return $desc;
        }
        return $desc_en;
    }

    public function getI18nTitle ($culture = null) {

        $title = $this->getTitle();
        $title_en = $this->getCompanyTitleByCulture('en');
        $country_slug = $this->getCity()->getCounty()->getCountry()->getSlug();
        if (!$culture) {
            $culture = sfContext::getInstance()->getUser()->getCulture();
        }

        if ($culture == 'en' && !empty($title_en)) {
            return $title_en;
        }
        else{
            $title = $this->getCompanyTitleByCulture();
            return $title;
        }

        if ($culture == $country_slug && !empty($title)) {
            return $title;
        }
        return $title_en;
    }

    // this is some fucked up logic, ain't gonna touch it
    //true p.s. Kristiyan
    public function getCompanyDescription($culture = null)
    {
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }

        $country = sfContext::getInstance ()->getUser ()->getCountry ()->getId ();

        if($country && $this->getCountryId () != $country && $culture != 'en'){
             $company_info = $this->getCompanyTitleByCulture('en');
             $description = $this->getCompanyDescriptionByCulture('en');
        }
        else{
             $description = $this->getDescription ();
        }

           // $title = ($culture == 'en' || ($country && $this->getCountryId () != $country)) ? $this->getCompanyTitleByCulture('en') : $this->getTitle ();
        
        return $description;

    }
    
    public function getCompanyContent($culture = null) 
    {
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        
        $country = sfContext::getInstance ()->getUser ()->getCountry ()->getId ();

        if($country && $this->getCountryId () != $country && $culture != 'en'){
             $company_info = $this->getCompanyTitleByCulture('en');
             $content = $this->getCompanyContentByCulture('en');
        }
        else{
             $content = $this->getContent ();
        }

           // $title = ($culture == 'en' || ($country && $this->getCountryId () != $country)) ? $this->getCompanyTitleByCulture('en') : $this->getTitle ();
        
        return $content;
    }
    

    public function getRating() {
      return round(($this->getAverageRating() / 5) * 100, 0);
    }

    public function preSave($event)
    {

        if ($this->user instanceof sfUser && in_array ( $this->getId (), $this->user->getAdminCompanies () )) {
            $this->setLastModifiedBy ( $this->user->getId () );
            $this->setDateLastModifiedBy ( date ( 'Y-m-d H:i:s' ) );
            parent::preSave ( $event );
        }
    }

    public function postSave($event)
    {
        // this is cancelled because sphinx search is used instead
        // $this->updateSearchIndex ();

    }

    public function updateSearchIndex()
    {
        $culture = $this->getCountry ()->getSlug ();
        $this->updateIndex ( array ('title' => $this->getTitle () . ', ' . $this->getTitle (), 'description' => $this->getDescription () . ', ' . $this->getDescription () ), $culture );

        /*$this->updateIndex ( array(
                'title'       => $this->getTitle()? $this->getTitle(): $this->getTitle(),
                'description' => $this->getDescription()? $this->getDescription(): $this->getDescription(),
                'keywords'    => $this->getClassification()->Translation['en']->get ('title'). ', '. $this->getSector()->Translation['en']->get ('title')
              ), 'en' );*/
    }

    public function updateIndex($text, $culture)
    {
        /*$keywords = myTools::stemPhrase ( $text, $culture );
          $words = array_count_values ( $keywords );*/
        $query = Doctrine::getTable ( 'Search' )
                ->createQuery ( 's' )->delete ()
                ->where ( 's.model_name = ?', 'Company' )
                ->andWhere ( 's.object_id = ?', $this->getId () )
                ->andWhere ( 's.culture = ?', $culture )
                ->execute ();

        $index = new Search ();
        $index->fromArray ( $text );
        $index->setCulture ( $culture );
        $index->setObjectId ( $this->getId () );
        $index->setModelName ( 'Company' );
        $index->save ();

        $con = Doctrine::getConnectionByTableName ( 'search' );

        $con->execute ( "UPDATE search s SET keywords = (
            SELECT CONCAT(GROUP_CONCAT(st.title SEPARATOR ', '), ', ', GROUP_CONCAT(cat.title SEPARATOR ', '), ', ', GROUP_CONCAT(cat.keywords SEPARATOR ', ')) FROM company c
            INNER JOIN classification ca ON ca.id = c.classification_id
            INNER JOIN classification_translation cat ON cat.id = ca.id
            INNER JOIN sector s ON s.id = c.sector_id
            INNER JOIN sector_translation st ON st.id = s.id
            WHERE c.id = s.object_id) WHERE s.id = ?;", array ($index->getId () ) );

            $con->execute ( "UPDATE search s INNER JOIN company c ON c.id = s.object_id SET s.keywords = CONCAT(s.keywords,',', (SELECT GROUP_CONCAT(r.text SEPARATOR ', ') FROM review r WHERE r.company_id = c.id)) WHERE s.id = ?", array ($index->getId () ) );
    }

    public function getNextOfferProduct($is_active = false, $is_valid = true)
    {

        $query = $this->getAvailableOfferQuery ( $is_active, $is_valid );
        $ad_company = $query->fetchOne ();

        return $ad_company;

    }

    public function getAvailableOffer($is_active = false, $is_valid = true)
    {
        $query = $this->getAvailableOfferQuery ( $is_active, $is_valid );

        $ad_companies = $query->count ();
        if ($ad_companies > 0) {
            return true;
        }
        return false;
    }
        /*
        public function getAvailableOfferQuery($is_active = false, $is_valid = true) {
          $today = '\'' . date ( 'Y-m-d' ) . '\'';

          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->leftJoin ( 'adc.CompanyProduct cp', 'CompanyOffer' )->where ( 'c.id = ' . $this->getId () )->andWhere ( 'adc.ad_product_id = ' . AdProductTable::OFFER );
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ' . $today )->andWhere ( 'adc.active_to >= ' . $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ' . $today )->andWhere ( 'adc.valid_to >= ' . $today );
          }
          $q3 = $query->createSubquery ()->select ( 'ct.ad_company_id' )->from ( 'CompanyProductOffer ct' )->innerJoin ( 'ct.CompanyOffer co' )->andWhere ( 'co.company_id = ' . $this->getId () );

          $query->andwhere ( 'adc.id NOT IN (' . $q3->getDql () . ')' );

          $query->addOrderBy ( 'adc.id' );

          return $query;
        }

        public function getOffersQuery($is_active = false, $is_valid = true) {
          $today = date ( 'Y-m-d' );
          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->innerJoin ( 'adc.CompanyProduct cp' )->where ( 'c.id = ? ', $this->getId () )->andWhere ( 'adc.ad_product_id= ?', AdProductTable::OFFER );
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ?', $today )->andWhere ( 'adc.valid_to >= ?', $today );
          }
          $query->addOrderBy ( 'adc.id' );
          return $query;
        }
        public function getOffers($is_active = false, $is_valid = true, $count = false) {
          $query = $this->getOffersQuery ( $is_active, $is_valid, $count );
          $offers = $query->execute ();
          if ($count) {
            return count ( $offers );
          }
          if (count ( $offers ) > 0) {
            return $offers;
          }
          return false;
        }



        public function getAdProduct($product_id, $is_active = false, $is_valid = true) {

          $query = $this->getAdProductQuery ( $product_id, $is_active, $is_valid );

          $result = $query->fetchOne ();
          if ($result instanceof adCompany) {

            return $result;
          }

          return false;
        }
        public function getVipAdProduct($is_active = true) {
          $today = date ( 'Y-m-d' );
          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->where ( 'c.id =? ', $this->getId () )->addWhere ( 'adc.ad_product_id = ?', AdProductTable::VIP )->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          if ($is_active) {
            $query->andWhere ( 'adc.start_date != ?', NULL )->andWhere ( 'adc.start_date <= ?', $today )->andWhere ( 'adc.start_date >= ?', date ( 'Y-m-d', strtotime ( "-30 days" ) ) );
          }
          $query->addOrderBy ( 'adc.id' );
          $vip_ads = $query->execute ();
          return $vip_ads;
        }

        public function getAdProductQuery($product_id, $is_active = false, $is_valid = true) {

          $today = date ( 'Y-m-d' );
          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->where ( 'c.id =? ', $this->getId () )->addWhere ( 'adc.ad_product_id =? ', $product_id );
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ?', $today )->andWhere ( 'adc.valid_to >= ?', $today );
          }
          $query->addOrderBy ( 'adc.id' );

          return $query;
        }
        public function getAdClassificationCount($is_active = false, $is_valid = true) {

          $query = $this->getAdProductQuery ( AdProductTable::CLASSIFICATIONS, $is_active, $is_valid );
          $classifications = $query->execute ();

          return count ( $classifications );
        }

        public function getAdClassifications($ad_company_id = false, $is_active = false, $is_valid = true) {

          $today = date ( 'Y-m-d' );
          $query = Doctrine::getTable ( 'CompanyProducts' )->createQuery ( 'cp' )->innerJoin ( 'cp.AdCompany adc' )->innerJoin ( 'adc.Company c' )->where ( 'c.id =? ', $this->getId () );
          if ($ad_company_id) {
            $query->addWhere ( 'adc.ad_id =? ', $ad_company_id );
          } else {
            $query->addWhere ( 'adc.ad_product_id =? ', AdProductTable::CLASSIFICATIONS );
          }
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ?', $today )->andWhere ( 'adc.valid_to >= ?', $today );
          }
          $query->addOrderBy ( 'adc.id' );
          $result = $query->execute ();
          return $result;
        }

        public function getAvailableAdClassificationQuery($is_active = false, $is_valid = true) {

          $today = date ( 'Y-m-d' );

          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->leftJoin ( 'adc.CompanyProduct cp' )->where ( 'c.id = ? ', $this->getId () );

          $q3 = $query->createSubquery ()->select ( 'ct.ad_company_id' )->from ( 'CompanyProductClassification ct' )->innerJoin ( 'ct.CompanyClassification cc' )->andWhere ( 'cc.company_id = ' . $this->getId () )->addHaving ( 'COUNT(ct.ad_company_id) >=  ' . AdProductTable::CLASSIFICATIONS_COUNT )->addGroupBy ( 'ct.ad_company_id' );

          $query->andWhere ( 'adc.id NOT IN (' . $q3->getDql () . ')' )->andWhere ( 'adc.ad_product_id= ?', AdProductTable::CLASSIFICATIONS );
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ?', $today )->andWhere ( 'adc.valid_to >= ?', $today );
          }

          $query->addOrderBy ( 'adc.id' );

          return $query;
        }

        public function getAvailableAdClassification($is_active = false, $is_valid = true, $limit = false) {

          $query = $this->getAvailableAdClassificationQuery ( $is_active, $is_valid );

          $ad_companies = $query->execute ();
          if (count ( $ad_companies ) > 0) {
            return true;
          }
          return false;
        }
        public function getNextAdClassificationProduct($is_active = false, $is_valid = true) {
          $query = $this->getAvailableAdClassificationQuery ( $is_active, $is_valid );

          $ad_company = $query->fetchOne ();
          if (count ( $ad_company ) > 0) {
            return $ad_company;
          }
          return false;
        }

        //video
        public function getAvailableAdVideo($is_active = false, $is_valid = true, $limit = false) {

          $query = $this->getAvailableAdVideoQuery ( $is_active, $is_valid );

          $ad_companies_count = $query->count ();
          if ($ad_companies_count > 0) {
            return true;
          }
          return false;
        }

        public function getAvailableAdVideoQuery($is_active = false, $is_valid = true) {

          $today = date ( 'Y-m-d' );

          $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->leftJoin ( 'adc.CompanyProduct cp' )->where ( 'c.id = ? ', $this->getId () );

          $q3 = $query->createSubquery ()->select ( 'ct.ad_company_id' )->from ( 'CompanyProductVideo ct' )->innerJoin ( 'ct.Video i' )->innerJoin ( 'i.CompanyImage ci' )->andWhere ( 'ci.company_id = ' . $this->getId () )->addHaving ( 'COUNT(ct.ad_company_id) >=  ' . AdProductTable::VIDEO_COUNT )->addGroupBy ( 'ct.ad_company_id' );

          $query->andWhere ( 'adc.id NOT IN (' . $q3->getDql () . ')' )->andWhere ( 'adc.ad_product_id= ?', AdProductTable::VIDEO );
          if ($is_active == true) {
            $query->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
          }
          if ($is_valid == true) {
            $query->andWhere ( 'adc.valid_from <= ?', $today )->andWhere ( 'adc.valid_to >= ?', $today );
          }

          $query->addOrderBy ( 'adc.id' );

          return $query;
        }

        public function getNextAdVideoProduct($is_active = false, $is_valid = true) {
          $query = $this->getAvailableAdVideoQuery ( $is_active, $is_valid );

          $ad_company = $query->fetchOne ();
          if (count ( $ad_company ) > 0) {
            return $ad_company;
          }
          return false;
        }

        public function getNextVideoProductId($is_active = false, $is_valid = true) {

          $query = $this->getAvailableAdVideoQuery ( $is_active, $is_valid );
          $ad_company = $query->fetchOne ();
          return $ad_company;
        }*/

    public function getVideos($approved = true)
    {
        $query = Doctrine::getTable ( 'Video' )->createQuery ( 'v' )->innerJoin ( 'v.CompanyImage ci' )->innerJoin ( 'ci.Company c' )->where ( 'c.id = ? ', $this->getId () );

        if ($approved) {
            $query->andWhere ( 'v.status = ?', 'approved' );
        }
        $videos = $query->execute ();
        if (count ( $videos ) > 0) {
            return $videos;
        }
        return false;
    }

    public function getAdditionalClassifications()
    {
        $hide = false;

        $query = Doctrine::getTable ( 'Classification' )->createQuery ( 'ct' )->innerJoin ( 'ct.CompanyClassification cc' )->where ( 'cc.classification_id != ? ', $this->getClassificationId () )->andWhere ( 'cc.company_id = ? ', $this->getId () );
        if ($this->getActivePPPService ( true )) {
            $limit = (AdServiceTable::CLASSIFICATIONS_COUNT) + CompanyTable::MAX_CLASSIFICATION_COUNT - 1;
            if ($limit > 0) {
                $query->limit ( $limit );
            }
            else {
                $hide = true;
            }

        }
        else {
            $limit = CompanyTable::MAX_CLASSIFICATION_COUNT - 1;
            if ($limit > 0) {
                $query->limit ( $limit );
            }
            else {
                $hide = true;
            }
        }
        $company_classifications = $query->execute ();
        if (count ( $company_classifications ) > 0 && $hide == false) {
            return $company_classifications;
        }
        return false;
    }
    /*
    public function getIsVip() {
      $today = date ( 'Y-m-d' );
      $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->where ( 'c.id = ? ', $this->getId () )->andWhere ( 'adc.ad_product_id= ?', AdProductTable::TOP_IN_SEARCH )->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
      $company = $query->execute ();

      if (count ( $company ) > 0) {
        return $company;
      }
      return false;
    }
    */
    public function getApprovedAdmins()
    {
        $q = Doctrine::getTable ( 'PageAdmin' )->createQuery ( 'p' )->innerjoin ( 'p.CompanyPage cp' )->innerjoin ( 'cp.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'p.status = ?', 'approved' );
        $admins = $q->execute ();
        if (count ( $admins ) > 0) {
            return $admins;
        }
        return false;
    }
    public function getIsPageAdmin($admin_id)
    {
        $q = Doctrine::getTable ( 'PageAdmin' )->createQuery ( 'p' )->innerjoin ( 'p.CompanyPage cp' )->innerjoin ( 'cp.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'p.id = ?', $admin_id )->andWhere ( 'p.status = ?', 'approved' );
        $admins = $q->fetchOne ();

        return $admins;
    }
    public function getPrimaryAdmin()
    {
        $q = Doctrine::getTable ( 'PageAdmin' )->createQuery ( 'p' )->innerjoin ( 'p.CompanyPage cp' )->innerjoin ( 'cp.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'p.status = ?', 'approved' )->andWhere ( 'p.is_primary = ?', true );
        $admin = $q->fetchOne ();
        return $admin;

    }
    public function getPageAdminbyUserId($user_id)
    {
        $q = Doctrine::getTable ( 'PageAdmin' )->createQuery ( 'p' )->innerjoin ( 'p.CompanyPage cp' )->innerjoin ( 'cp.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'p.user_id = ?', $user_id )->andWhere ( 'p.status = ?', 'approved' );
        $admins = $q->fetchOne ();

        return $admins;
    }
    public function getStatsPerAction($action_id, $current_month = true)
    {
        $query = Doctrine::getTable ( 'CompanyStats' )->createQuery ( 'cs' )->innerJoin ( 'cs.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'cs.action_id = ?', $action_id );
        if ($current_month) {
            $month = date ( 'Y-m' ) . '-01';
            $query->andWhere ( 'cs.month = ?', $month );
            $stats_log = $query->fetchOne ();
        }
        else {
            $query->addOrderBy ( 'cs.month DESC' );
            $stats_log = $query->execute ();
        }

        if (count ( $stats_log ) > 0) {
            return $stats_log;
        }
        return false;
    }
    public function getStatsPerMonth($month = null)
    {
        if (! $month) {
            $month = date ( 'Y-m' ) . '-01';
        }
        $query = Doctrine::getTable ( 'CompanyStats' )->createQuery ( 'cs' )->innerJoin ( 'cs.Company c' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'cs.month = ?', $month )->addOrderBy ( 'cs.action_id' );
        $stats_log = $query->execute ();

        if (count ( $stats_log ) > 0) {
            $log = array ();
            foreach ( $stats_log as $stat ) {
                $log [$stat->getActionId ()] = $stat->getViews ();
            }
            return $log;
        }
        return false;
    }
    /*
    public function getActiveProduct() {
      $today = date ( 'Y-m-d' );
      $query = Doctrine::getTable ( 'AdCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c' )->where ( 'c.id = ? ', $this->getId () )->andWhere ( 'adc.active_from <= ?', $today )->andWhere ( 'adc.active_to >= ?', $today );
      $ads = $query->execute ();
      if (count ( $ads ) > 0) {
        return true;
      }
      return false;
    }
    */
    public function getPrevMonths($with_current = false)
    {
        $month = date ( 'Y-m' ) . '-01';
        $query = Doctrine_Query::create ()->select ( 'cs.month' )->from ( 'CompanyStats cs' )->innerJoin ( 'cs.Company c' )->addWhere ( 'c.id = ? ', $this->getId () );
        if (! $with_current) {
            $query->addWhere ( 'cs.month < ?', $month );
        }
        $query->addGroupBy ( 'cs.month' )->addOrderBy ( 'cs.month desc' );

        $stats_log = $query->execute ();

        if (count ( $stats_log ) > 0) {
            $log = array ();
            foreach ( $stats_log as $stat ) {
                $log [$stat->getMonth ()] = $stat->getMonth ();
            }

            return $log;
        }
        return false;
    }

    public function getAddressInfo($culture = null)
    {
        $partner_class = sfContext::getInstance()->getUser()->getCountry()->getSlug();
        $more_info = NULL;
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }

       // $more_info = ($culture == 'en') ? $this->getLocation ()->getAddressInfoEn () : $this->getLocation ()->getAddressInfo ();

        if ($this->getLocation ()) {
            if($culture == 'en'){
                $more_info = $this->getLocation ()->getAddressInfoEn ();
            }
            elseif($culture != 'en' && $culture != $partner_class && method_exists('Transliterate'.$partner_class, 'to'.$culture)){
                $more_info = mb_convert_case ( call_user_func ( array ('Transliterate' . $partner_class, 'to'.$culture ), $this->getLocation ()->getAddressInfo () ), MB_CASE_LOWER, 'UTF-8' );
            }
            else{
                $more_info = $this->getLocation ()->getAddressInfo ();
            }

        }
        return $more_info;
    }

    public function preInsert($event)
    {
        parent::preInsert($event);
        if (!$this->getReferer()) {
              $this->setReferer(sfContext::getInstance()->getRequest()->getCookie('from'));
        }
    }

    public function getDisplayAddressMap($culture)
    {

        $partner_class = $this->getCountry ()->getSlug ();

        $method = "getDisplayAddressMap{$partner_class}";
        if (method_exists ( $this, $method )) {
            return $this->$method ( mb_convert_case ( $partner_class, MB_CASE_LOWER ) );
        }
        return false;
    }

    public function getDisplayAddressMapBg($culture = null)
    {
        if (! $culture) {
            $culture = 'bg';

        }
        $add = '';
        $address = array ();

        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeBg::getInstance ( $culture );
        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateBg::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateBg::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        if ($company_location->getBuildingNo () && $company_location->getBuildingNo () !== '') {
            $address [] = 'bl. ' . ucwords ( $company_location->getBuildingNo () );
        }

        return implode ( ', ', $address );
    }

    public function getDisplayAddressMapMk($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'mk';

        }
        $company_location = $this->getLocation ();

        if (! $company_location->getStreet () && ($company_location->getFullAddress () || $company_location->getFullAddressEn ())) {
            return $culture == 'en' ? $company_location->getFullAddressEn () : $company_location->getFullAddress ();
        }

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeDispl = '';
        $strTypeDispl = '';
        $locTypeList = AddressTypeMk::getInstance ( $culture );
        if ($strType) {
            $strTypeDispl = ((isset ( $locTypeList [$strType] ) && $strType) ? $locTypeList [$strType] : '');
        }
        if ($locType) {
            $locTypeDispl = ((isset ( $locTypeList [$locType] ) && $locType) ? $locTypeList [$locType] : '');
        }

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateMk::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateMk::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }

        return implode ( ', ', $address );
    }

    public function getDisplayAddressMapRo($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'ro';

        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeRo::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'en' != $culture) {
                $add .= ' ';
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }

        return implode ( ', ', $address );

    }

    public function getDisplayAddressMapFi($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'fi';

        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeFi::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
              $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
          }

        return implode ( ', ', $address );

    }
    public function getDisplayAddressMapCs($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'cs';

        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeCs::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
              $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
          }

        return implode ( ', ', $address );

    }
    public function getDisplayAddressMapSk($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'sk';

        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeSk::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
              $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
          }

        return implode ( ', ', $address );

    }
    public function getDisplayAddressMapHu($culture = null)
    {
        $add = '';
        $address = array ();
        if (! $culture) {
            $culture = 'hu';

        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = AddressTypeHu::getInstance ( $culture );

        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $street = $company_location->getStreet ();

        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            $add = ' - Sector ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

        }
        $address [] = $this->getCity ()->getCityNameByCulture ( $culture ) . $add;
        $add = '';

        if ($street) {
            $add = '';
            if ('ru' == $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }
            if (empty ( $neighbourhood ) && 'ru' == $culture) {
              $add .= ' ';
            }
            $add .= $street;
            if ('ru' != $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
          }

        return implode ( ', ', $address );

    }

    public function getReviews($count = 3)
    {
        return Doctrine::getTable ( 'Review' )->createQuery ( 'r' )->where ( 'r.company_id = ?', $this->getId () )->andWhere ( 'r.parent_id IS NULL' )->andWhere ( 'r.is_published = ?', Review::FRONTEND_REVIEWS_IS_PUBLISHED )->orderBy ( 'r.created_at DESC' )->limit ( $count )->execute ();
    }

    public function updateAvg_NumberOf_Reviews()
    {
        $counts = Doctrine::getTable ( 'Review' )->createQuery ( 'r' )->select ( 'COUNT(r.id) count, AVG(r.rating) avg' )->where ( 'r.company_id = ?', $this->getId () )->andWhere ( 'r.parent_id IS NULL' )->andWhere ( 'r.is_published = ?', Review::FRONTEND_REVIEWS_IS_PUBLISHED )->fetchArray ();

        $this->setNumberOfReviews ( $counts [0] ['count'] );
        $this->setAverageRating ( $counts [0] ['avg'] );

        $this->save ();
    }
    public function getApprovedImages($count = false)
    {
        $query =Doctrine_Query::create()
                ->select('i.*')
                ->from('Image i, i.CompanyImage ci')
                ->where ( 'ci.company_id = ?', $this->getId () )
                ->andWhere ( 'i.status = "approved"' );


         $images = (($count) ? $query->count () : $query->execute ());

        return $images;
    }

    public function getActivePPPService($count = false)
    {
    	if(!is_null($this->AdServiceCompany)){
    		$active_ppp = $count ? $this->AdServiceCompany->count() : $this->AdServiceCompany->getFirst(); 	
    	}else{
    		$query = Doctrine::getTable('AdServiceCompany')->createQuery('adc')->innerJoin('adc.Company c WITH adc.ad_service_id = ? ', 11 )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'adc.status = "active"' )->andWhere ( 'adc.active_from <= '.ProjectConfiguration::nowAlt().'' )->andWhere ( '((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ' );
    		
    		$active_ppp = (($count) ? $query->count () : $query->fetchOne ());
    	}
		
        return $active_ppp;
    }

    public function getActiveDealServiceAvailable($count = false)
    {
        $query = Doctrine::getTable ( 'AdServiceCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c WITH adc.ad_service_id = ? ', 13 )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'adc.status = "paid"' );

        $q3 = $query->createSubquery ()->select ( 'ads.id' )->from ( 'AdServiceCompany ads' )->innerJoin ( 'ads.CompanyOffer co' )->andWhere ( 'co.company_id = ' . $this->getId () );

        $query->andwhere ( 'adc.id NOT IN (' . $q3->getDql () . ')' )->addOrderBy ( 'adc.id' );

        $active_deal = (($count) ? $query->count () : $query->fetchOne ());

        return $active_deal;
    }

          // Return a last active offer
    public function getLastOffer($is_active = true)
    {
              $today = date ( 'Y-m-d' );

              $query = Doctrine::getTable ( 'CompanyOffer' )->createQuery ( 'co' )->innerJoin ( 'co.Company c' )->innerJoin ( 'c.AdServiceCompany adc WITH adc.ad_service_id = 13' )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'adc.status = "active"' )->andWhere ( 'adc.active_from <= '.ProjectConfiguration::nowAlt().'' )->andWhere ( '((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ');

              if ($is_active) {
                  $query->andWhere ( 'co.is_active = ?', true )->andWhere ( 'co.active_from <= '.ProjectConfiguration::nowAlt().'' )->andWhere ( 'co.active_to >= '.ProjectConfiguration::nowAlt().'' );
              }

              $offers = $query->fetchOne();

              if ($offers) {
                  return $offers;
              }

              return false;
    }

    public function getAllOffers($is_active = true, $returnQuery = false, $returnCountOnly = false)
    {
        $today = date ( 'Y-m-d' );
        $query = Doctrine::getTable ( 'CompanyOffer' )->createQuery ( 'co' )
                // ->innerJoin('co.Translation cot WITH cot.lang=?', sfContext::getInstance()->getUser()->getCulture())
                ->innerJoin ( 'co.Company c' )
                ->innerJoin('c.Translation ct WITH ct.lang=?', sfContext::getInstance()->getUser()->getCulture())
                ->innerJoin ( 'c.AdServiceCompany adc WITH adc.ad_service_id = 13' )
                ->where ( 'c.id = ?', $this->getId () )
                ->andWhere ( 'adc.status = "active" AND co.is_draft=0' )
                ->andWhere ( 'adc.active_from <= '.ProjectConfiguration::nowAlt().'' )
                ->andWhere ( '((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ' )
                ->andWhere('IFNULL(co.max_vouchers, 10000) > co.count_voucher_codes ');

        if ($is_active) {
            $query->andWhere ( 'co.is_active = ?', true )->andWhere ( 'co.active_from <= '.ProjectConfiguration::nowAlt().'' )->andWhere ( 'co.active_to >= '.ProjectConfiguration::nowAlt().'' );
        }

        if ($returnQuery) {
            return $query;
        }
        elseif (!$returnCountOnly) {
            $offers = $query->execute();

            if (count($offers) > 0) {
                return $offers;
            }
        }
        else {
            return $query->count();
        }

        return false;
    }

    public function getRegisteredPPPService($count = false)
    {
        $query = Doctrine::getTable ( 'AdServiceCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c WITH adc.ad_service_id = ? ', 11 )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'adc.status = "registered" OR adc.status = "paid"' );

        $registered_ppp = (($count) ? $query->count () : $query->fetchOne ());

        return $registered_ppp;
    }

    public function getRegisteredDealService($count = false)
    {
        $query = Doctrine::getTable ( 'AdServiceCompany' )->createQuery ( 'adc' )->innerJoin ( 'adc.Company c WITH adc.ad_service_id = ? ', 13 )->where ( 'c.id = ?', $this->getId () )->andWhere ( 'adc.status = "registered"' );

        $q3 = $query->createSubquery ()->select ( 'ads.id' )->from ( 'AdServiceCompany ads' )->innerJoin ( 'ads.CompanyOffer co' )->andWhere ( 'co.company_id = ' . $this->getId () );

        $query->andwhere ( 'adc.id NOT IN (' . $q3->getDql () . ')' )->addOrderBy ( 'adc.id' );

        $registered_deal = (($count) ? $query->count () : $query->fetchOne ());

        return $registered_deal;
    }

    public function save(Doctrine_Connection $conn = null)
    {
        
        if ($this->getFollowers ( true ) && $this->user) {
            
            if (! $this->isNew ()) {
                $modified = $this->getModified ( true );
                if (! empty ( $modified )) {

                    if (isset ( $modified ['title'] ) or isset ( $modified ['phone'] ) or isset ( $modified ['phone1'] ) or isset ( $modified ['phone2'] ) or isset ( $modified ['email'] ) or isset ( $modified ['website_url'] ) or isset ( $modified ['city_id'] ) or isset ( $modified ['description'] ) or isset ( $modified ['content'] ) or isset ( $modified ['googleplus_url'] ) or isset ( $modified ['facebook_url'] ) or isset ( $modified ['twitter_url'] ) ) {
                        $modification = '';
                        foreach ( $modified as $key => $val ) {

                            $modification .= $key . ',';

                        }

                        $modification = rtrim ( $modification, ',' );

                        {
                            $activity = new ActivityPage ();
                            $activity->setText ( $this->getCompanyTitle () );
                            $activity->setModifiedField ( $modification );
                            $activity->setPageId ( $this->getCompanyPage()->getId () );
                            $activity->setUserId ( $this->user->getId () );
                            $activity->setActionId ( $this->getId () );
                            if ($this->getImage ()) {
                              $activity->setMediaId ( $this->getImageId () );
                            }
                            $activity->save ();
                        }
                        
                        
                        
                    }
                }
            }
        }

        
        parent::save($conn);

    }

    public function getDetailDescription($culture = null)
    {

        if ($this->getCompanyDetail () && $this->getCompanyDetail ()->getDetailDescription ( $culture )) {
            return $this->getCompanyDetail ()->getDetailDescription ( $culture );
        }

        return false;
    }
    public function getFollowers($count = false)
    {

        $query = Doctrine::getTable ( 'FollowPage' )->createQuery ( 'fp' )->where ( 'fp.page_id = ?', $this->getCompanyPage ()->getId () );
        if ($count == true) {
            return $query->count ();
        }
        else {
            return $query->execute ();
        }

    }
    public function getDisplayAddressSr($culture = null)
    {

        $add = '';
        $address = array ();
        if (is_null ( $culture )) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
        }
        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = array();
        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        //$address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
                $neighbourhood = TransliterateSr::toLatin ( $neighbourhood );
            }
          $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
          $number = $company_location->getStreetNumber ();
          if ($number && empty ( $street )) {
                $add .= ' ' . $number;
          }

          $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

             if ('en' == $culture) {
                $street = TransliterateSr::toLatin ( $street );
             }
             $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $fullAdress = $this->getFullAddress ( $culture );
        if ($fullAdress) {
            $address [] = $fullAdress;
        }

        return implode ( ', ', $address );
    }

    public function getPhoneFormatedSr($pnone = null)
    {
        $purephone = (($pnone) ? $pnone : $this->getPhone ());
        $purephone = preg_replace ( '/[^0-9]/', '', $purephone );

        $purephone =  substr($purephone, 1);
        $purephone = '+381 ' . substr ( $purephone, 0, 2 ) . ' ' . substr ( $purephone, 2 );

        //$phone = $purephone;
        return $purephone;
    }

    public function getDisplayAddressMapSr($culture = null)
    {
        if (! $culture) {
            $culture = 'sr';
        }
        $add = '';
        $address = array ();

        $company_location = $this->getLocation ();

        $locType = $company_location->getLocationType ();
        $strType = $company_location->getStreetTypeId ();
        $locTypeList = array();
        $locTypeDispl = ($locType && isset ( $locTypeList [$locType] )) ? $locTypeList [$locType] : '';
        $strTypeDispl = ($strType && isset ( $locTypeList [$strType] )) ? $locTypeList [$strType] : '';

        $address [] .= $this->getCity ()->getCityNameByCulture ( $culture );

        $street = $company_location->getStreet ();
        if ($neighbourhood = $company_location->getNeighbourhood ()) {
            if ('en' == $culture) {
              $neighbourhood = TransliterateSr::toLatin ( $neighbourhood );
            }
            $add = $locTypeDispl . ' ' . ucwords ( $neighbourhood );
            $number = $company_location->getStreetNumber ();
            if ($number && empty ( $street )) {
                $add .= ' ' . $number;
            }

            $address [] = $add;
        }

        if ($street) {
            $add = '';
            if ('en' != $culture) {
                $add .= ' ' . $strTypeDispl . ' ';
            }

            if (empty ( $neighbourhood ) && 'en' != $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }

            if ('en' == $culture) {
                $street = TransliterateSr::toLatin ( $street );
            }
            $add .= $street;
            if ('en' == $culture) {
                $add .= ' ' . $strTypeDispl;
            }
            if (empty ( $neighbourhood ) && 'en' == $culture && $locTypeDispl != '' && $strTypeDispl == '') {
                $add .= ' ' . $locTypeDispl;
            }
            $number = $company_location->getStreetNumber ();
            if ($number) {
                $add .= ' ' . $number;
            }
            $address [] = $add;
        }
        if ($company_location->getBuildingNo () && $company_location->getBuildingNo () !== '') {
          $address [] = 'bl. ' . ucwords ( $company_location->getBuildingNo () );
        }

        return implode ( ', ', $address );
    }

    public function postInsert($event)
    {
        parent::postInsert ( $event );
        $companypage = $this->getCompanyPage();
        $companypage->setForeignId($this->getId ());
        $companypage->setIsPublic(0);
        $companypage->setCountryId($this->getCountryId ());
        $companypage->save();

    }
    public function getEventCount()
    {
        $date=date('Y-m-d').' 00:00:00';
        $query = Doctrine::getTable ( 'Event' )
                ->createQuery ( 'e' )
                ->innerJoin ( 'e.UserProfile p' )
                ->innerJoin ( 'p.sfGuardUser sf' )
                ->innerJoin ( 'e.EventPage ep' )
                ->where ( 'ep.page_id = ?', $this->getCompanyPage ()->getId () )->orderBy ( 'e.created_at DESC' )
                ->addWhere('e.start_at >=  ? ', $date)
                ->andWhere('e.is_active = 1');

        return $query->count ();
    }
    public function getSimilarPlaces()
    {
    	$company_query = Doctrine::getTable('Company')->createQuery('c')
          ->innerJoin('c.Translation ct WITH ct.lang = ?',sfContext::getInstance ()->getUser ()->getCulture ())
          ->innerJoin('c.Location l')
          ->innerJoin('c.City ci')
          ->leftJoin('c.Classification cf')
          ->innerJoin('c.CompanyClassification cc')
    	  ->innerJoin('c.Image i');
    	
    	
      if (getlokalPartner::getInstanceDomain() == 78) {
          $result=array();
          $query = clone $company_query;
          
          $query
	          ->innerJoin('c.AdServiceCompany adc WITH adc.ad_service_id = 11 AND adc.active_from <= '.ProjectConfiguration::nowAlt().' AND adc.status = "active" AND ((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null))' )
	          ->andWhere('c.status = ?', CompanyTable::VISIBLE )
	          ->andWhere('cc.classification_id = ?', $this->getClassificationId())
	          ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
	          ->andWhere('c.id != ?', $this->getId())
	          ->orderBy('adc.id, rand()')
	          ->limit(6);
          
          $similar_places1 = $query->execute();
          
          if (count($similar_places1)>0) $result['similar_places1']=$similar_places1;
          $arrNotIn = $this->notIn($similar_places1);
          
          $similar_places2=array();
          if (count($similar_places1)<6){
          
              $query
	              ->Where('c.status = ?', CompanyTable::VISIBLE )
	              ->andWhere('cc.classification_id != ?', $this->getClassificationId())
	              ->andWhere('c.sector_id = ?',$this->getSectorId())
	              ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
	              ->andWhere('c.id != ?', $this->getId())
	              ->andWhereNotIn('c.id',$arrNotIn)
	              ->orderBy('adc.id, rand()')
	              ->limit(6-count($similar_places1));
          
              $similar_places2 = $query->execute();
              if (count($similar_places2)>0){
                  $result['similar_places2']=$similar_places2;
              }
              $arrNotIn = $this->notIn($similar_places2,$arrNotIn);
          }
          
          $similar_places3=array();
          if(count($similar_places1)+count($similar_places2)<6){
              $query = clone $company_query;
          
          	  $query
		            ->andWhere('c.image_id is not null')
		            ->andWhere('c.status = ?', CompanyTable::VISIBLE )
		            ->andWhere('cc.classification_id = ?', $this->getClassificationId())
		            ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
		            ->andWhere('c.id != ?', $this->getId())
		            ->andWhereNotIn('c.id',$arrNotIn)
		            ->orderBy('rand()')
		            ->limit(6-(count($similar_places1)+count($similar_places2)));
          
              $similar_places3 = $query->execute();
              if (count($similar_places3)){
                  $result['similar_places3']=$similar_places3;
              }
              $arrNotIn = $this->notIn($similar_places3,$arrNotIn);
          }
          
          $similar_places4=array();
          if(count($similar_places1)+count($similar_places2)+count($similar_places3)<6){
              $query = clone $company_query;
          
              $query
	              ->andWhere('c.image_id is not null')
	              ->andWhere('c.status = ?', CompanyTable::VISIBLE )
	              ->andWhere('cc.classification_id != ?', $this->getClassificationId())
	              ->andWhere('c.sector_id = ?',$this->getSectorId())
	              ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
	              ->andWhere('c.id != ?', $this->getId())
	              ->andWhereNotIn('c.id',$arrNotIn)
	              ->orderBy('rand()')
	              ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)));
          
              $similar_places4 = $query->execute();
              if (count($similar_places4))$result['similar_places4']=$similar_places4;
              $arrNotIn = $this->notIn($similar_places4,$arrNotIn);
          }
          
          $similar_places5=array();
          if(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)<6){
              $query = clone $company_query;
          
              $query
	              ->andWhere('c.image_id is null')
	              ->andWhere('c.status = ?', CompanyTable::VISIBLE )
	              ->andWhere('cc.classification_id = ?', $this->getClassificationId())
	              //->andWhere('c.sector_id = ?',$this->getSectorId())
	              ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
	              ->andWhere('c.id != ?', $this->getId())
	              ->andWhereNotIn('c.id',$arrNotIn)
	              ->orderBy('rand()')
	              ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)));
          
              $similar_places5 = $query->execute();
              if (count($similar_places5)){
                  $result['similar_places5']=$similar_places5;
              }
              $arrNotIn = $this->notIn($similar_places5,$arrNotIn);
          }
          
          $similar_places6=array();
          if(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)+count($similar_places5)<6){
              $query = clone $company_query;
          
              $query
	              ->andWhere('c.image_id is null')
	              ->andWhere('c.status = ?', CompanyTable::VISIBLE )
	              ->andWhere('cc.classification_id != ?', $this->getClassificationId())
	              ->andWhere('c.sector_id = ?',$this->getSectorId())
	              ->andWhere('ci.county_id = ?', $this->getCity()->getCounty()->getId())
	              ->andWhere('c.id != ?', $this->getId())
	              ->andWhereNotIn('c.id',$arrNotIn)
	              ->orderBy('rand()')
	              ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)+count($similar_places5)));
          
              $similar_places6 = $query->execute();
              if (count($similar_places6)){
                  $result['similar_places6']=$similar_places6;
              }
          }
      }
      
      else {
        $result=array();
        $query = clone $company_query;
        
        $query
              ->innerJoin('c.AdServiceCompany adc WITH adc.ad_service_id = 11 AND adc.active_from <= '.ProjectConfiguration::nowAlt().' AND adc.status = "active" AND ((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null))' )
              ->andWhere('c.status = ?', CompanyTable::VISIBLE )
              ->andWhere('cc.classification_id = ?', $this->getClassificationId())
              ->andWhere('c.city_id = ?', $this->getCity()->getId())
              ->andWhere('c.id != ?', $this->getId())
              ->orderBy('adc.id, rand()')
              ->limit(6);

          $similar_places1 = $query->execute();
//           var_dump($similar_places1->toArray());die;

          if (count($similar_places1)>0) $result['similar_places1']=$similar_places1;
            $arrNotIn = $this->notIn($similar_places1);

            $similar_places2=array();
            if (count($similar_places1)<6){

                $query
	                ->Where('c.status = ?', CompanyTable::VISIBLE )
	                ->andWhere('cc.classification_id != ?', $this->getClassificationId())
	                ->andWhere('c.sector_id = ?',$this->getSectorId())
	                ->andWhere('c.city_id = ?', $this->getCity()->getId())
	                ->andWhere('c.id != ?', $this->getId())
	                ->andWhereNotIn('c.id',$arrNotIn)
	                ->orderBy('adc.id, rand()')
	                ->limit(6-count($similar_places1));

                $similar_places2 = $query->execute();
                if (count($similar_places2)>0){
                    $result['similar_places2']=$similar_places2;
                }
                $arrNotIn = $this->notIn($similar_places2,$arrNotIn);
            }

            $similar_places3=array();
            if(count($similar_places1)+count($similar_places2)<6){
                $query = clone $company_query;
          
          		$query
                      ->andWhere('c.image_id is not null')
                      ->andWhere('c.status = ?', CompanyTable::VISIBLE )
                      ->andWhere('cc.classification_id = ?', $this->getClassificationId())
                      ->andWhere('c.city_id = ?', $this->getCity()->getId())
                      ->andWhere('c.id != ?', $this->getId())
                      ->andWhereNotIn('c.id',$arrNotIn)
                      ->orderBy('rand()')
                      ->limit(6-(count($similar_places1)+count($similar_places2)));

                $similar_places3 = $query->execute();
                if (count($similar_places3)){
                    $result['similar_places3']=$similar_places3;
                }
                $arrNotIn = $this->notIn($similar_places3,$arrNotIn);
            }

            $similar_places4=array();
            if(count($similar_places1)+count($similar_places2)+count($similar_places3)<6){
                $query = clone $company_query;
          
          		$query
                      ->andWhere('c.image_id is not null')
                      ->andWhere('c.status = ?', CompanyTable::VISIBLE )
                      ->andWhere('cc.classification_id != ?', $this->getClassificationId())
                      ->andWhere('c.sector_id = ?',$this->getSectorId())
                      ->andWhere('c.city_id = ?', $this->getCity()->getId())
                      ->andWhere('c.id != ?', $this->getId())
                      ->andWhereNotIn('c.id',$arrNotIn)
                      ->orderBy('rand()')
                      ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)));

                $similar_places4 = $query->execute();
                if (count($similar_places4))$result['similar_places4']=$similar_places4;
                $arrNotIn = $this->notIn($similar_places4,$arrNotIn);
            }

            $similar_places5=array();
            if(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)<6){
                $query = clone $company_query;
          
          		$query
                      ->andWhere('c.image_id is null')
                      ->andWhere('c.status = ?', CompanyTable::VISIBLE )
                      ->andWhere('cc.classification_id = ?', $this->getClassificationId())
                      //->andWhere('c.sector_id = ?',$this->getSectorId())
                      ->andWhere('c.city_id = ?', $this->getCity()->getId())
                      ->andWhere('c.id != ?', $this->getId())
                      ->andWhereNotIn('c.id',$arrNotIn)
                      ->orderBy('rand()')
                      ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)));

          		$similar_places5 = $query->execute();
                if (count($similar_places5)){
                    $result['similar_places5']=$similar_places5;
                }
                $arrNotIn = $this->notIn($similar_places5,$arrNotIn);
            }

            $similar_places6=array();
            if(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)+count($similar_places5)<6){
                $query = clone $company_query;
          
          		$query
                      ->andWhere('c.image_id is null')
                      ->andWhere('c.status = ?', CompanyTable::VISIBLE )
                      ->andWhere('cc.classification_id != ?', $this->getClassificationId())
                      ->andWhere('c.sector_id = ?',$this->getSectorId())
                      ->andWhere('c.city_id = ?', $this->getCity()->getId())
                      ->andWhere('c.id != ?', $this->getId())
                      ->andWhereNotIn('c.id',$arrNotIn)
                      ->orderBy('rand()')
                      ->limit(6-(count($similar_places1)+count($similar_places2)+count($similar_places3)+count($similar_places4)+count($similar_places5)));

                $similar_places6 = $query->execute();
                if (count($similar_places6)){
                    $result['similar_places6']=$similar_places6;
                }
            }
      }

      return $result;

    }

    public function notIn($arr,$arrNotIn = array())
    {
        foreach ($arr as $ani){
            $arrNotIn[] = $ani->getId();
        }
        return $arrNotIn;
    }

    public function getFirstMenu() {
    	$menu_collection = $this->getMenu();
    	if ($menu_collection->count()) {
    		return $menu_collection->getFirst();
    	}
    	return false;
    }
    
    
    public static function generateCompanySlug($slug)
    {
    	$similar_companies = Doctrine_Query::create()
    	->select("id,slug")
    	->from("company")
    	->where("slug REGEXP '^$slug-[0-9]' OR slug = '$slug'")
    	->setHydrationMode(Doctrine::HYDRATE_SCALAR)
    	->fetchArray();
    	 
    	$new_slug = $slug;
    	 
    	$similar_companies_slugs = array();
    	 
    	if($similar_companies){
    		foreach($similar_companies as $sc){
    			$similar_companies_slugs[] = $sc['slug'];
    		}
    	}
    	for($i=0;;$i++){
    		$sufix = $i === 0 ? "" : "-$i";
    		if(!in_array($slug.$sufix,$similar_companies_slugs)){
    			$new_slug = $new_slug.$sufix;
    			break;
    		}
    	}

        return $new_slug;
    }

    public function getCompanyTitleByCulture($culture = null)
    {
        $current_culture = sfContext::getInstance ()->getUser ()->getCulture ();
        if (is_null( $culture ) || $culture == $current_culture) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
            $title = $this->getTitle();
        }
        $default_culture = getlokalPartner::getDefaultCulture();

        if(!isset($title) || $title=='' || $title === null){

            $query = Doctrine::getTable ( 'CompanyTranslation' )
                ->createQuery ( 'ct' )
                ->where ( 'ct.id = ?', $this->getId ())
                ->andWhere ( 'ct.lang = ?', $culture  )
                ->fetchOne();
            
            $title = $query['title'];
            
            if(!isset($title) || $title=='' || $title === null){
                            
                $query_default = Doctrine::getTable ( 'CompanyTranslation' )
                    ->createQuery ( 'ct' )
                    ->where ( 'ct.id = ?', $this->getId ())
                    ->andWhere ( 'ct.lang = ?', $default_culture  )
                    ->fetchOne();

                if(method_exists('Transliterate'.$default_culture, 'to'.$culture)){
                    $title = call_user_func(array('Transliterate'.$default_culture, 'to'.$culture),$query_default['title']);
                }
                else{
                    $title = $query_default['title'];

                }
            }
             if(!isset($title) || $title=='' || $title === null){
                            
                $query_en = Doctrine::getTable ( 'CompanyTranslation' )
                    ->createQuery ( 'ct' )
                    ->where ( 'ct.id = ?', $this->getId ())
                    ->andWhere ( 'ct.lang = ?', 'en'  )
                    ->fetchOne();

                 $title = $query_en['title'];
            }

            if(!isset($title) || $title=='' || $title === null){
                            
                $query = Doctrine::getTable ( 'CompanyTranslation' )
                    ->createQuery ( 'ct' )
                    ->where ( 'ct.id = ?', $this->getId ())
                    ->fetchOne();

                 $title = $query['title'];
            }
        }

        return $title;
    }
    
    public function getCompanyDescriptionByCulture($culture = null)
    {
        $current_culture = sfContext::getInstance ()->getUser ()->getCulture ();
        if (is_null( $culture ) || $culture == $current_culture) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
            $description = $this->getDescription();
        }
        $default_culture = getlokalPartner::getDefaultCulture();

        if(!isset($description) || $description=='' || $description === null){

            $query = Doctrine::getTable ( 'CompanyTranslation' )
                ->createQuery ( 'ct' )
                ->where ( 'ct.id = ?', $this->getId ())
                ->andWhere ( 'ct.lang = ?', $culture  )
                ->fetchOne();
            
            $description = $query['description'];
            
            if(!isset($description) || $description=='' || $description === null){
                            
                $query_default = Doctrine::getTable ( 'CompanyTranslation' )
                    ->createQuery ( 'ct' )
                    ->where ( 'ct.id = ?', $this->getId ())
                    ->andWhere ( 'ct.lang = ?', $default_culture  )
                    ->fetchOne();

                if(method_exists('Transliterate'.$default_culture, 'to'.$culture)){
                    $description = call_user_func(array('Transliterate'.$default_culture, 'to'.$culture),$query_default['title']);
                }
                else{
                    $description = $query_default['description'];

                }
            }
        }
        
        return $description;
    }

        public function getCompanyContentByCulture($culture = null)
    {
        $current_culture = sfContext::getInstance ()->getUser ()->getCulture ();
        if (is_null( $culture ) || $culture == $current_culture) {
            $culture = sfContext::getInstance ()->getUser ()->getCulture ();
            $content = $this->getDescription();
        }
        $default_culture = getlokalPartner::getDefaultCulture();

        if(!isset($content) || $content=='' || $content === null){

            $query = Doctrine::getTable ( 'CompanyTranslation' )
                ->createQuery ( 'ct' )
                ->where ( 'ct.id = ?', $this->getId ())
                ->andWhere ( 'ct.lang = ?', $culture  )
                ->fetchOne();
            
            $content = $query['content'];
            
            if(!isset($content) || $content=='' || $content === null){
                            
                $query_default = Doctrine::getTable ( 'CompanyTranslation' )
                    ->createQuery ( 'ct' )
                    ->where ( 'ct.id = ?', $this->getId ())
                    ->andWhere ( 'ct.lang = ?', $default_culture  )
                    ->fetchOne();

                if(method_exists('Transliterate'.$default_culture, 'to'.$culture)){
                    $content = call_user_func(array('Transliterate'.$default_culture, 'to'.$culture),$query_default['title']);
                }
                else{
                    $content = $query_default['content'];

                }
            }
        }
        
        return $content;
    }


    public function reservationType(){

        $restaurants = array('20', '21', '22', '23', '24', '25', '26', '34', '156', '157', 
            '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173',
             '174', '175', '176', '177', '178', '179', '241', '254', '272', '273', '274', '275', '276', '278', '279', '280');

        $hotels = array('32', '180', '181', '182', '183', '184', '185', '186', '187', '188');

       if(in_array($this->getClassification()->getId(), $restaurants)){
            return 'restaurant';
        } elseif(in_array($this->getClassification()->getId(), $hotels)){
            return 'hotel';
        }

        if($this->getAdditionalClassifications() != false){
            foreach ($this->getAdditionalClassifications() as $c) {
                if (in_array($c->getId(), $restaurants)){
                    return 'restaurant';
                } elseif(in_array($c->getId(), $hotels)){
                    return 'hotel';
                }
            }
        }
        return false;
    }
	
	public function getCompaniesInfo($countryId = null, $cityId = null) {
        $query = Doctrine::getTable('Company')
                ->createQuery('c')
                ->where('c.status = 0');

        if ($countryId) {
            $result = $query->andWhere('c.country_id = ?', $countryId);
        } elseif ($cityId) {
            $result = $query->andWhere('c.city_id = ?', $cityId);
        }

        if ($result) {
            return $result->count();
        }
        return;
    }
    
    public function getUserCompanies($userId, $countryId) {
        $query = Doctrine::getTable('Company')
                ->createQuery('c')
                ->where('c.created_by = ?', $userId)
                ->andWhere('c.country_id = ?', $countryId);

        if ($query) {
            return $query->count();
        }
        return;
    }

}
