<?php

/**
 * PageAdmin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    getLokal
 * @subpackage model
 * @author     Get Lokal
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PageAdmin extends BasePageAdmin
{
    public function getUserPosition()
    {
        if(isset(Social::$positionChoicesWEmpty[$this->getPosition()])){
            return Social::$positionChoicesWEmpty[$this->getPosition()];
        }
    }
  
   public function getIsSamePlaceClaimed()
  {
     $is_page_admin = false;
	  $q = Doctrine_Query::create()
	  ->select('COUNT(DISTINCT p.id) AS pageadmins')
	  ->from('PageAdmin p')	  
	  ->where('p.page_id = ?', $this->getPageId() )
	  ->andWhere('p.status = ?', 'approved')
	  ->andWhere('p.user_id != ?', $this->getUserId());
	  
	   $count_pages = $q->fetchArray();

	   if($count_pages[0]['pageadmins'] > 0)
	  {
	  	 $is_page_admin = true;
	  }
	   return $is_page_admin;
  }
  
public function setPassword($password)
  {
    if (!$password && 0 == strlen($password))
    {
      return;
    }

    if (!$salt = $this->getSalt())
    {
      $salt = md5(rand(100000, 999999).$this->getUsername());
      $this->setSalt($salt);
    }
    $modified = $this->getModified();
    if ((!$algorithm = $this->getAlgorithm()) || (isset($modified['algorithm']) && $modified['algorithm'] == $this->getTable()->getDefaultValueOf('algorithm')))
    {
      $algorithm = sfConfig::get('app_sf_guard_plugin_algorithm_callable', 'sha1');
    }
    $algorithmAsStr = is_array($algorithm) ? $algorithm[0].'::'.$algorithm[1] : $algorithm;
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithmAsStr));
    }
    $this->setAlgorithm($algorithmAsStr);

    $this->_set('password', call_user_func_array($algorithm, array($salt.$password)));
  }
  
public function checkPassword($password)
  {
    if ($callable = sfConfig::get('app_sf_guard_plugin_check_password_callable'))
    {
      return call_user_func_array($callable, array($this->getUsername(), $password, $this));
    }
    else
    {
      return $this->checkPasswordByGuard($password);
    }
  }

  /**
   * Returns whether or not the given password is valid.
   *
   * @param string $password
   * @return boolean
   * @throws sfException
   */
  public function checkPasswordByGuard($password)
  {
    $algorithm = $this->getAlgorithm();
    if (false !== $pos = strpos($algorithm, '::'))
    {
      $algorithm = array(substr($algorithm, 0, $pos), substr($algorithm, $pos + 2));
    }
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithm));
    }

    return $this->getPassword() == call_user_func_array($algorithm, array($this->getSalt().$password));
  }
public function checkAdminPassword($password)
  {
    
   $algorithm = sfConfig::get('app_admins_pass_algorithm', 'sha1');
    if (false !== $pos = strpos($algorithm, '::'))
    {
      $algorithm = array(substr($algorithm, 0, $pos), substr($algorithm, $pos + 2));
    }
    if (!is_callable($algorithm))
    {
      throw new sfException(sprintf('The algorithm callable "%s" is not callable.', $algorithm));
    }
    $salt = $this->getSalt();
 
    return $this->getPassword() == call_user_func_array($algorithm, array($salt.$password));
   
    
  }
public function getIsOtherPlaceAdmin() {		
		$pageAdmins = Doctrine::getTable ( 'PageAdmin' )->createQuery ( 'p' )
		->innerJoin ( 'p.UserProfile' )->andWhere ( 'p.user_id = ?', $this->getUserId () )
		->andWhere ( 'p.id != ?', $this->getId () )
		->andWhere ( 'p.status = ?', 'approved' )
		->execute ();
		
		return $pageAdmins;
	}
}
