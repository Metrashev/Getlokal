<?php

/**
 * UserStatTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserStatTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object UserStatTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('UserStat');
    }

    public function updateStat($user_id, array $values) {

        foreach ($values as $key => $value) {
            $query = $this->createQuery('s')->where('s.user_id = ? and s.key = ?', array($user_id, $key));

            if (!$stat = $query->fetchOne()) {
                $stat = new UserStat();
                $stat->setUserId($user_id);
                $stat->setKey($key);
            }

            $stat->setValue($value);
            $stat->save();
        }

        $con = Doctrine::getConnectionByTableName($this->getTableName());

        /*
         * OLD ORIGINAL QUERY
          $result = $con->execute("
          SELECT sub_x.user, sub_x.badge_id, SUM(IF(sub_x.group_count >= 1, 1,0)) as requirement_count, sub_x.requirement FROM
          (SELECT x.*, x.requirements as requirement, x.user_id as user, SUM(IF(x.sum_score >= x.value, 1, 0)) group_count FROM
          (SELECT b.id AS badge_id, us.user_id, b.requirements as requirements, br.group_no AS group_no, br.keyvalue AS value, SUM(us.keyvalue) sum_score FROM user_stat AS us
          INNER JOIN badge_requirement_field brf ON brf.keyname = us.keyname
          INNER JOIN badge_requirement br ON br.id = brf.requirement_id
          INNER JOIN badge b ON b.id = br.badge_id
          LEFT JOIN user_badge ub ON ub.badge_id = b.id AND ub.user_id = us.user_id
          WHERE ub.id IS NULL AND b.is_active = 1 AND b.is_seasonal != 0
          GROUP BY b.id, us.user_id, brf.requirement_id) x
          GROUP BY x.user_id, x.group_no) sub_x
          GROUP BY sub_x.user, sub_x.badge_id
          HAVING sub_x.requirement = requirement_count;");

          while ($row = $result->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT)) {
          $badge = new UserBadge();
          $badge->setBadgeId($row['badge_id']);
          $badge->setUserId($row['user']);
          $badge->save();
          }
         */


        /*
          $query = Doctrine::getTable('Badge')->createQuery('b')
          ->select('count(b.id) as cnt, b.*, br.*, brf.*, us.*')
          ->leftJoin('b.BadgeRequirement br')
          ->leftJoin('br.BadgeRequirementField brf')
          ->leftJoin('brf.UserStat us')
          ->leftJoin('b.UserBadge ub with ub.user_id = us.user_id')
          ->where('us.user_id = ?', array($user_id))
          ->andWhere('b.is_active = 1')
          ->andWhere('us.keyvalue >= br.keyvalue')
          ->andWhere('brf.keyname = us.key')
          ->addWhere('b.id NOT IN (SELECT ubb.badge_id FROM UserBadge as ubb Where ubb.user_id = ?)', $user_id)
          ->having('cnt = (SELECT count(BadgeRequirement.badge_id) FROM BadgeRequirement Where BadgeRequirement.badge_id = b.id)');
         */


        /*
          $query = Doctrine::getTable('Badge')->createQuery('b')
          ->select('count(b.id) as cnt, b.*, br.*, brf.*, us.*')
          ->leftJoin('b.BadgeRequirement br')
          ->leftJoin('br.BadgeRequirementField brf')
          ->leftJoin('brf.UserStat us')
          ->leftJoin('b.UserBadge ub with ub.user_id = us.user_id')
          ->where('us.user_id = ?', array($user_id))
          ->andWhere('b.is_active = 1')
          ->andWhere('us.keyvalue >= br.keyvalue')
          ->andWhere('brf.keyname = us.key')
          ->addWhere('b.id NOT IN (SELECT ubb.badge_id FROM UserBadge as ubb Where ubb.user_id = ?)', $user_id)
          ->having('cnt = (SELECT count(BadgeRequirement.badge_id) FROM BadgeRequirement Where BadgeRequirement.badge_id = b.id)');
          echo $query->getSqlQuery();
          exit; */

        /*
          $query = Doctrine::getTable('UserStat')->createQuery('us')
          ->leftJoin('us.BadgeRequirementField brf')
          ->leftJoin('brf.BadgeRequirement br')
          ->leftJoin('br.Badge b')
          ->leftJoin('b.UserBadge ub with ub.user_id = us.user_id')
          ->where('us.user_id = ?', array($user_id))
          ->andWhere('b.is_active = 1')
          ->andWhere('brf.keyname = us.key')
          ->andWhere('us.keyvalue >= br.keyvalue')
          ->andWhere('ub.badge_id IS NULL');
          //->groupBy('b.id');
         */
        /*
         * SELECT u.id AS u__id, u.user_id AS u__user_id, u.keyname AS u__keyname, u.keyvalue AS u__keyvalue, b.id AS b__id, b.requirement_id AS b__requirement_id, b.keyname AS b__keyname, b2.id AS b2__id, b2.keyvalue AS b2__keyvalue, b2.badge_id AS b2__badge_id, b2.group_no AS b2__group_no, b3.id AS b3__id, b3.start_at AS b3__start_at, b3.end_at AS b3__end_at, b3.requirements AS b3__requirements, b3.points AS b3__points, b3.percent AS b3__percent, b3.is_active AS b3__is_active, b3.is_seasonal AS b3__is_seasonal, b3.is_visible AS b3__is_visible, b3.notify_by_email AS b3__notify_by_email, b3.display_message AS b3__display_message, b3.small_active_image AS b3__small_active_image, b3.active_image AS b3__active_image, b3.inactive_image AS b3__inactive_image, u2.id AS u2__id, u2.user_id AS u2__user_id, u2.badge_id AS u2__badge_id, u2.created_at AS u2__created_at, u2.updated_at AS u2__updated_at FROM user_stat u LEFT JOIN badge_requirement_field b ON u.keyname = b.keyname LEFT JOIN badge_requirement b2 ON b.requirement_id = b2.id LEFT JOIN badge b3 ON b2.badge_id = b3.id LEFT JOIN user_badge u2 ON b3.id = u2.badge_id AND (u2.user_id = u.user_id) WHERE (u.user_id = 43976 AND b3.is_active = 1 AND u.keyvalue >= b2.keyvalue AND u2.badge_id IS NULL) GROUP BY b3.id
         */
        /*
          $query = $con->execute('SELECT u.id AS u__id, u.user_id AS u__user_id, u.keyname AS u__keyname, u.keyvalue AS u__keyvalue, b.id AS b__id, b.requirement_id AS b__requirement_id, b.keyname AS b__keyname, b2.id AS b2__id, b2.keyvalue AS b2__keyvalue, b2.badge_id AS b2__badge_id, b2.group_no AS b2__group_no, b3.id AS b3__id, b3.start_at AS b3__start_at, b3.end_at AS b3__end_at, b3.requirements AS b3__requirements, b3.points AS b3__points, b3.percent AS b3__percent, b3.is_active AS b3__is_active, b3.is_seasonal AS b3__is_seasonal, b3.is_visible AS b3__is_visible, b3.notify_by_email AS b3__notify_by_email, b3.display_message AS b3__display_message, b3.small_active_image AS b3__small_active_image, b3.active_image AS b3__active_image, b3.inactive_image AS b3__inactive_image, u2.id AS u2__id, u2.user_id AS u2__user_id, u2.badge_id AS u2__badge_id, u2.created_at AS u2__created_at, u2.updated_at AS u2__updated_at, b3.id as badge_id
          FROM user_stat u
          LEFT JOIN badge_requirement_field b ON u.keyname = b.keyname
          LEFT JOIN badge_requirement b2 ON b.requirement_id = b2.id
          LEFT JOIN badge b3 ON b2.badge_id = b3.id
          LEFT JOIN user_badge u2 ON b3.id = u2.badge_id AND (u2.user_id = u.user_id)
          WHERE (
          u.user_id = ? AND
          b3.is_active = 1 AND
          b.keyname = u.keyname AND
          u.keyvalue >= b2.keyvalue AND
          u2.badge_id IS NULL AND
          b3.id NOT IN (
          SELECT br1.badge_id FROM badge_requirement as br1
          LEFT JOIN badge_requirement_field as brf1 on (br1.id = brf1.requirement_id)
          WHERE
          u.keyvalue > br1.keyvalue AND
          u.keyname = brf1.keyname
          )
          )', array($user_id));
         */



        /*
          $query = $con->execute('SELECT u.id AS u__id, u.user_id AS u__user_id, u.keyname AS u__keyname, u.keyvalue AS u__keyvalue, b.id AS b__id, b.requirement_id AS b__requirement_id, b.keyname AS b__keyname, b2.id AS b2__id, b2.keyvalue AS b2__keyvalue, b2.badge_id AS b2__badge_id, b2.group_no AS b2__group_no, b3.id AS b3__id, b3.start_at AS b3__start_at, b3.end_at AS b3__end_at, b3.requirements AS b3__requirements, b3.points AS b3__points, b3.percent AS b3__percent, b3.is_active AS b3__is_active, b3.is_seasonal AS b3__is_seasonal, b3.is_visible AS b3__is_visible, b3.notify_by_email AS b3__notify_by_email, b3.display_message AS b3__display_message, b3.small_active_image AS b3__small_active_image, b3.active_image AS b3__active_image, b3.inactive_image AS b3__inactive_image, u2.id AS u2__id, u2.user_id AS u2__user_id, u2.badge_id AS u2__badge_id, u2.created_at AS u2__created_at, u2.updated_at AS u2__updated_at, b3.id as badge_id
          FROM user_stat u
          LEFT JOIN badge_requirement_field b ON u.keyname = b.keyname
          LEFT JOIN badge_requirement b2 ON b.requirement_id = b2.id
          LEFT JOIN badge b3 ON b2.badge_id = b3.id
          LEFT JOIN user_badge u2 ON b3.id = u2.badge_id AND (u2.user_id = u.user_id)
          WHERE (
          u.user_id = ? AND
          b3.is_active = 1 AND
          b.keyname = u.keyname AND
          u.keyvalue >= b2.keyvalue AND
          u2.badge_id IS NULL AND
          b3.id NOT IN (
          SELECT badge_requirement.badge_id
          FROM badge_requirement, user_stat, badge_requirement_field, badge
          WHERE
          badge_requirement_field.requirement_id = badge_requirement.id AND
          badge_requirement.badge_id = badge.id AND
          user_stat.user_id = ?
          AND
          (
          (badge_requirement_field.keyname = user_stat.keyname and user_stat.keyvalue < badge_requirement.keyvalue)
          OR
          (badge_requirement_field.keyname != user_stat.keyname and user_stat.keyvalue < badge_requirement.keyvalue)
          )
          GROUP BY badge.id
          )
          )
          GROUP BY b3.id',
          array($user_id, $user_id));

          while ($row = $query->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT)) {
          $badge = new UserBadge();
          $badge->setBadgeId($row['badge_id']);
          $badge->setUserId($user_id);
          $badge->save();
          }
         */



        /*
          $query = $con->execute('SELECT b.id as badge_id, keyvalue, brf.keyname
          FROM badge as b
          LEFT JOIN badge_requirement as br on (b.id = br.badge_id)
          LEFT JOIN badge_requirement_field as brf on (br.id = brf.requirement_id)
          WHERE
          b.is_active = 1 AND
          b.requirements IS NOT NULL AND
          (keyvalue IS NOT NULL OR keyname IS NOT NULL)
          '
          );

          while ($row = $query->fetch(PDO::FETCH_ASSOC, PDO::FETCH_ORI_NEXT)) {
          $query = Doctrine::getTable('UserStat')->createQuery('u')
          ->andWhere('u.user_id = ?', array($user_id));
          }
         */

        $result = $con->execute("
        SELECT us.user_id, us.keyname, us.keyvalue as current_value, br.badge_id as badge_id, br.keyvalue as max_value
        FROM user_stat as us
        INNER JOIN badge_requirement_field as brf on (us.keyname = brf.keyname)
        INNER JOIN badge_requirement as br on (brf.requirement_id = br.id)
        LEFT JOIN badge as b on (br.badge_id = b.id)
        LEFT JOIN user_badge as ub on (br.badge_id = ub.badge_id AND ub.user_id = us.user_id)
        WHERE us.user_id = ? AND b.is_active = 1 AND us.keyvalue >= br.keyvalue 
            AND b.id NOT IN (SELECT ubb.badge_id FROM user_badge ubb WHERE ubb.user_id = ?)

        GROUP BY b.id
        /*AND ub.badge_id IS NOT NULL*/
        /*GROUP BY us.keyname, br.group_no*/", array($user_id, $user_id));

        $potentialBadges = $result->fetchAll(); /* badge_id */
       
        foreach ($potentialBadges as $pBadge) {
            $query = Doctrine::getTable('BadgeRequirementField')->createQuery('brf')
                    ->leftJoin('brf.BadgeRequirement br')
                    ->leftJoin('br.Badge b')
                    ->where('b.id = ?', array($pBadge['badge_id']));

            $badgeRequirements = $query->execute();

            $requirements = array();
            $joins = array();
            $cnt = 0;
            foreach ($badgeRequirements as $bRequirement) {
                $logic = '';

                if ($bRequirement->getBadgeRequirement()->getGroupNo() == 1) {
                    $logic = ' AND ';
                } else {
                    $logic = ' OR ';
                }

                if (!$cnt) {
                    $logic .= '(';
                }
                
                if (!$cnt) {
                    $requirements[] = $logic . "(us.keyname = '" . $bRequirement->getKey() . "' AND us.keyvalue >= " .
                            $bRequirement->getBadgeRequirement()->getValue() . ")";
                }
                else
                {
                    $joins[] = "LEFT JOIN user_stat as us{$cnt} ON (us.user_id = us{$cnt}.user_id)";

                    $requirements[] = $logic . "(us{$cnt}.keyname = '" . $bRequirement->getKey() . "' AND us{$cnt}.keyvalue >= " .
                            $bRequirement->getBadgeRequirement()->getValue() . ")";
                }
                
                $cnt++;
            }

            $queryRequirements = implode('', $requirements) . ')';

            $queryJoins = implode(' ', $joins);

            $result = $con->execute("
                SELECT us.id
                FROM user_stat as us
                {$queryJoins}
                WHERE us.user_id = {$user_id} {$queryRequirements}
                GROUP BY us.keyname;
            ");

            $result = $result->fetchAll();
            if (count($result)) {
                $badge = new UserBadge();
                $badge->setBadgeId($pBadge['badge_id']);
                $badge->setUserId($user_id);
                $badge->save();
            }
        }
    }
}