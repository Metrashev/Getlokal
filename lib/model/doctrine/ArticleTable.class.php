<?php

/**
 * ArticleTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ArticleTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ArticleTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Article');
    }

    public function getTranslatedSlug($slug, $culture = 'en')
    {
    	if($original = $this->createQuery('a')->innerJoin('a.Translation t')->where('t.slug = ?', $slug)->fetchOne())
    		return $this->createQuery('a')->innerJoin('a.Translation')->where('a.id = ?', $original->getId())->fetchOne()->Translation[$culture]->slug;

    	return false;
    }

    public function getQueryForAdmin(Doctrine_Query $q)
    {
    	$rootAlias = $q->getRootAlias();


    	$q->where($rootAlias.'.country_id = ?', getlokalPartner::getInstance());

    	return $q;
    }

    public static function applyTitleFilter($query, $value)
    {

    	$rootAlias = $query->getRootAlias();
    	$query->innerJoin($rootAlias.'.Translation t')
    	->addWhere('t.title like ?', '%'.$value['text'].'%');

    	return $query;
    }

    public static function applyFirstNameFilter($query, $value)
    {
    	$rootAlias = $query->getRootAlias();
    	$query->innerJoin($rootAlias.'.UserProfile u2')
    	->innerJoin('u2.sfGuardUser s2')
    	->addWhere('s2.first_name like ?', $value['text'].'%');
    	return $query;

    }

    public static function applyLastNameFilter($query, $value)
    {

    	$rootAlias = $query->getRootAlias();
    	$query->innerJoin($rootAlias.'.UserProfile l3')
    	->innerJoin('l3.sfGuardUser sg3')
    	->addWhere('sg3.last_name like ?', $value['text'].'%');

    	return $query;
    }

    public static function applyKeywordsFilter($query, $value)
    {

    	$rootAlias = $query->getRootAlias();
    	$query->innerJoin($rootAlias.'.Translation t')
    	->addWhere('t.keywords like ?', '%'.$value['text'].'%');

    	return $query;
    }

    /**
     * Return autocomplete query
     */
    public static function getAC($query, $culture, $cityId)
    {
        return self::getInstance()->createQuery('a')
            ->innerJoin('a.Translation t')
            ->addWhere('t.title LIKE ? OR t.content LIKE ?', array($query, $query))
            ->addWhere('t.lang = ?', $culture)
            ->addWhere('a.status = ?', 'approved')
            ->addWhere('a.location_id = ?', $cityId)
            ->orderBy('a.created_at DESC');
    }

}
