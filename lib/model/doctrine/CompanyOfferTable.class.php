<?php

/**
* CompanyOfferTable
*
* This class has been auto-generated by the Doctrine ORM Framework
*/
class CompanyOfferTable extends Doctrine_Table
{
    /**
    * Returns an instance of this class.
    *
    * @return object CompanyOfferTable
    */

    public static function getInstance()
    {
        return Doctrine_Core::getTable('CompanyOffer');
    }

    public static function getChoices($country_id = null, $city_id = null, $sector_id = null, $culture = null)
    {
    	$i18n = sfContext::getInstance()->getI18N();
    	sfContext::getInstance()->getConfiguration()->loadHelpers(array('Url'));
    	$today = date('Y-m-d');
    	$query2 = Doctrine_Query::create()
    	->select('a.id, c.city_id, c.sector_id as sec_id, s.id, ss.slug as slug, ss.title as stitle, count(DISTINCT a.id)')
    	->from('CompanyOffer a')
    	->innerJoin('a.Company c')
   // 	->innerJoin('c.City ci')
   //     ->innerJoin('ci.Translation citr')
    	->innerJoin('c.AdServiceCompany adc WITH adc.ad_service_id = ? ', 13)
    	->innerJoin('c.Sector s')
    	->innerJoin('s.Translation ss')
    	->andWhere('adc.status = "active"')
    	->andWhere('adc.active_from <= '.ProjectConfiguration::nowAlt().'')
    	->andWhere('((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null))')
    	->andWhere('a.is_active = ?', 1)
    	->andWhere('a.is_draft = ?', 0)
    	->andWhere('a.active_from <= ?', $today)
    	->andWhere('a.active_to >= ?',   date('Y-m-d H:i:s', strtotime('-7 days', strtotime($today))))
    	->andWhere('IFNULL(a.max_vouchers, 10000) > a.count_voucher_codes ')
    	->andWhere('ss.lang = ?', $culture)
    	->groupby('a.id');

    	if ($country_id) {
    		$query2->andWhere('a.country_id = ?', $country_id);
    	}

    	$url = url_for('offer');
    	$cities[$url]['cont'] = 'All locations';  

//    	$citys = $query2->execute();
    	$defaults = array('city' => null, 'sector' => null);

    	$query3 = $query2->copy();
    	$query3->groupBy('c.city_id')
    	->orderBy('count DESC');
    	$cty = $query3->execute();

    	foreach($cty as $c) {
    		$cities[url_for('@offerCity?city='.$c->Company->City->getSlug())]['value'] = $c->Company->City->getLocation().' ('.$c->getCount().')';
                $cities[url_for('@offerCity?city='.$c->Company->City->getSlug())]['id'] = $c->getCompany()->getCity()->getId();
    		if($city_id) {
    			if($c->Company->City->getID() == $city_id) {
    				if(!$defaults['city']) {
    					$defaults['city'] = url_for('@offerCity?city='.$c->Company->City->getSlug());
    				}
    			}
    		}
    	}

    	$query3 = $query2->copy();

    	if($city_id) {
    		$query3->andWhere('c.city_id = ?', $city_id);
    	}

    	$query3->groupBy('slug')
    	->orderBy('count DESC');

    	$cty = $query3->execute();

    	if($city_id) {
    		$sector[url_for('@offerCity?city='.$cty[0]->Company->City->getSlug())]['cont'] = 'All sectors';
    		$sector[url_for('@offerCity?city='.$cty[0]->Company->City->getSlug())]['sec'] = '';
    		$sector[url_for('@offerCity?city='.$cty[0]->Company->City->getSlug())]['count'] = '';
    //		$sector[url_for('@offerCity?city='.$cty[0]->Company->City->getSlug())]['id'] = '';
    	}
    	else {
    		$sector[$url]['cont'] = 'All sectors';
    	//	$sector[$url]['sec'] = '';
    	//	$sector[$url]['count'] = '';
    	//	$sector[$url]['id'] = '';
    	}

    	foreach ($cty as $c) {

    		if($city_id) {
    			$sector[url_for('@offerCitySector?city='.$c->Company->City->getSlug().'&slug='.$c->getSlug())]['cont'] = $c->getStitle();//.' ('.$c->getCount().')';
    			$sector[url_for('@offerCitySector?city='.$c->Company->City->getSlug().'&slug='.$c->getSlug())]['sec'] = $c->getCompany()->getSector()->getId();
    			$sector[url_for('@offerCitySector?city='.$c->Company->City->getSlug().'&slug='.$c->getSlug())]['count'] = $c->getCount();
  //  			$sector[url_for('@offerCitySector?city='.$c->Company->City->getSlug().'&slug='.$c->getSlug())]['id'] = $c->Company->getSectorId();

    			if($sector_id) {
    				if($c->getSecId() == $sector_id) {
    					if(!$defaults['sector']) {
    						$defaults['sector'] = url_for('@offerCitySector?city='.$c->Company->City->getSlug().'&slug='.$c->getSlug());

    					}
    				}
    			}
    		}
    		else {
    			$country = sfContext::getInstance()->getUser()->getCountry()->getNameEn();
    			$sector[url_for('@offerCitySector?city='.$country.'&slug='.$c->getSlug())]['cont'] = $c->getStitle();//.' ('.$c->getCount().')';
    			$sector[url_for('@offerCitySector?city='.$country.'&slug='.$c->getSlug())]['sec'] = $c->getCompany()->getSector()->getId();
    			$sector[url_for('@offerCitySector?city='.$country.'&slug='.$c->getSlug())]['count'] = $c->getCount();
//    			$sector[url_for('@offerCitySector?city='.$country.'&slug='.$c->getSlug())]['id'] = $c->Company->getSectorId();
    			if($sector_id) {
    				if($c->getSecId() == $sector_id) {
    					if(!$defaults['sector']) {
    						$defaults['sector'] = url_for('@offerCitySector?city='.$country.'&slug='.$c->getSlug());
    					}
    				}
    			}
    		}
    	}
    	$cities = self::getLastPartFrimURL($cities);
    	$sector = self::getLastPartFrimURL($sector);
    	return array('city' => $cities, 'sector' => $sector, 'defaults' => $defaults);
    }
    
    public static function getLastPartFrimURL($array){
    	$return = array();
    	foreach ($array as $key=>$value){
    		$key = substr(strrchr($key, "/"), 1);
    		$key = ($key == '' ? 'country' : $key);
    		$return[$key] = $value;
    	}
    	return $return;
    }

    public static function getOnlyActiveOffersQuery($city_id = null, $country_id = null, $sector_id = null, $order = null)
    {
        $today = date('Y-m-d');
        /*$query = Doctrine_Core::getTable('CompanyOffer')->createQuery('a')
            ->innerJoin('a.Company c')
            ->innerJoin('c.AdServiceCompany adc WITH adc.ad_service_id = ? ', 13)
            ->andWhere('adc.status = "active"')
            ->andWhere('adc.active_from <= '.ProjectConfiguration::nowAlt().'')
            ->andWhere('((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null))')
            ->andWhere('a.is_active = ?', 1)
            ->andWhere('a.is_draft = ?', 0)
            ->andWhere('a.active_from <= ?', $today)
            ->andWhere('a.active_to >= ?',   date('Y-m-d H:i:s', strtotime('-7 days', strtotime($today))))
            ->andWhere('IFNULL(a.max_vouchers, 10000) > a.count_voucher_codes ');*/
        $query = Doctrine_Query::create()
        ->select('*, IF(a.discount_pct IS NULL, (100 - (a.new_price / a.old_price)*100), a.discount_pct) as percent, IF(a.active_to < CURDATE(), 0, 1) as expired')
        ->from('CompanyOffer a')
        ->innerJoin('a.Company c')
        ->innerJoin('c.AdServiceCompany adc WITH adc.ad_service_id = ? ', 13)
        ->andWhere('adc.status = "active"')
        ->andWhere('adc.active_from <= '.ProjectConfiguration::nowAlt().'')
        ->andWhere('((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null))')
        ->andWhere('a.is_active = ?', 1)
        ->andWhere('a.is_draft = ?', 0)
        ->andWhere('a.active_from <= ?', $today)
        ->andWhere('a.active_to >= ?',   date('Y-m-d H:i:s', strtotime('-7 days', strtotime($today))))
        ->andWhere('IFNULL(a.max_vouchers, 10000) > a.count_voucher_codes ');
        
        if ($country_id) {
            $query->andWhere('a.country_id = ?', $country_id);
        }
        if ($city_id) {
            $query->andWhere('c.city_id = ?', $city_id);
            
        }
        if($sector_id) {
            $query->andWhere('c.sector_id = ?', $sector_id);
        }
        
        if ($order == 1) {
        	$query->addOrderBy('a.benefit_text ASC, percent ASC, a.id DESC');        	
        }
        else if ($order == 2) {
        	$query->addOrderBy('percent DESC, a.benefit_text, a.id DESC');
        }
        else if(!$order || $order == 3) {
        	$query->addOrderBy('a.active_from DESC, a.id DESC');
        }
        else if ($order == 4) {
        	$query->addOrderBy('expired DESC, a.active_to ASC, a.id DESC');
        }
        else if ($order == 5) {
        	$query->addOrderBy('a.count_voucher_codes DESC, a.id DESC');
        }
        
        return $query;
    }

    public static function getHasDrafts($companyId)
    {
        $count = self::getInstance()->createQuery('co')
            ->where('co.company_id = ?', $companyId)
            ->andWhere('co.is_draft = 1')
            ->count();
        return $count > 0;
    }

    public static function getObjectByCompanyId($company_id)
    {
        $query = Doctrine_Core::getTable('CompanyOffer')
            ->createQuery('co1')
            ->leftJoin('co1.CompanyProductOffer cp1')
            ->where('co1.company_id = ?', $company_id);

        $q3 = $query->createSubquery()->select('cpo.foreign_id')
            ->from('CompanyProductOffer cpo')
            ->innerJoin('cpo.CompanyOffer co')
            ->andWhere('co.company_id = ?' , $company_id);

        $query->andWhere('co1.id NOT IN (' . $q3->getDql() . ')');

        return $query->execute();
    }

    public function getQueryForAdmin(Doctrine_Query $q)
    {
        
        $rootAlias = $q->getRootAlias();
        $q->addWhere($rootAlias.'.country_id = ?', sfContext::getInstance()->getUser()->getCountry()->getId());

        return $q;
    }

    public static function applyCountVoucherCodesFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();

        if ($value == 0) {
            $query->addWhere($rootAlias.'.count_voucher_codes = ?', '0');
        }
        elseif ($value == 1) {
            $query->addWhere($rootAlias.'.count_voucher_codes >= ?', '1');
        }

        return $query;
    }

    public static function getDiscount($offer){

        if($offer->getNewPrice() && $offer->getOldPrice()){
            $priceDiff = ($offer->getNewPrice()/$offer->getOldPrice())*100;
            $ptcDiscount = 100 - $priceDiff;
            if($ptcDiscount>90){
                $discount = round($ptcDiscount, 1);

            } else{
                $discount = round($ptcDiscount);
            }
            return $discount;
        }
        
        return ;
    }

    public static function getRemainingTime($offer){
        $now = new DateTime();
        $expiration = new DateTime($offer->getActiveTo());
        $remaining = $expiration->diff($now);
               
        return $remaining;
    }

}

