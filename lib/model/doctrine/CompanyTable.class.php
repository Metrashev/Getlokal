<?php

/**
* CompanyTable
*
* This class has been auto-generated by the Doctrine ORM Framework
*/
class CompanyTable extends Doctrine_Table
{
    /**
    * Returns an instance of this class.
    *
    * @return object CompanyTable
    */

    CONST VISIBLE = 0;
    CONST INVISIBLE = 1;
    CONST INVISIBLE_NO_CLASS = 2;
    CONST NEW_PENDING = 3;
    CONST REJECTED = 4;
    CONST MAX_CLASSIFICATION_COUNT = 5;

    public static function getInstance()
    {
        return Doctrine_Core::getTable('Company');

    }

    public function getQueryForAdmin(Doctrine_Query $q)
    {             
        $rootAlias = $q->getRootAlias();

        $q->innerJoin($rootAlias.'.Translation t')
            ->leftJoin($rootAlias.'.Image')
            ->innerJoin($rootAlias.'.City ct')
            ->innerJoin($rootAlias.'.Sector s')
            ->innerJoin($rootAlias.'.Classification c')
            ->innerJoin('c.Translation')
            ->innerJoin('s.Translation')
            ->innerJoin('ct.Translation ctr')   
            ->innerJoin($rootAlias.'.CompanyPage cp')
            ->leftJoin('cp.PageAdmin pa0');
            //->leftJoin($rootAlias.'.AdCompany ad WITH ad.active_from < '.ProjectConfiguration::nowAlt().' and ad.active_to > '.ProjectConfiguration::nowAlt().'')
//            ->where($rootAlias.'.country_id = ?', sfContext::getInstance()->getUser()->getCountry()->getId());
            
        return $q;
    }

    public static function applyEmailAddressFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query
            ->innerJoin($rootAlias.'.CompanyPage cp')
            ->innerJoin('cp.PageAdmin pa')
            ->innerJoin('pa.UserProfile f1')
            ->innerJoin('f1.sfGuardUser sf1')
            ->addWhere('sf1.email_address like ? ', $value['text'].'%');

        return $query;
    }

    public static function applyFirstNameFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query
            ->innerJoin($rootAlias.'.CompanyPage cp2')
            ->innerJoin('cp2.PageAdmin pa2')
            ->innerJoin('pa2.UserProfile f2')
            ->innerJoin('f2.sfGuardUser s2')
            ->addWhere('s2.first_name like ?', $value['text'].'%');

        return $query;
    }

    public static function applyLastNameFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query
            ->innerJoin($rootAlias.'.CompanyPage cp3')
            ->innerJoin('cp3.PageAdmin pa3')
            ->innerJoin('pa3.UserProfile f3')
            ->innerJoin('f3.sfGuardUser s3')
            ->addWhere('s3.last_name like ?', $value['text'].'%');
        return $query;
    }

    public static function applyIsModifiedFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        if ($value == 1) {
            $query->addWhere($rootAlias . '.last_modified_by is not NULL');
        }

        return $query;
    }

    public static function applyBBPFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        if ($value == 1) {
            $query ->innerJoin($rootAlias.'.Translation ct2')
                    ->addWhere('ct2.description is not NULL AND ct2.description !=""');
                    //->andWhere($rootAlias.'.country_id = ?', sfContext::getInstance()->getUser()->getCountry()->getId());
        }

        return $query;
    }

    public static function applyWithOrderFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $today = date('Y-m-d');
        if ($value == 1) {
            $query->innerJoin($rootAlias.'.AdCompany adc')
                ->andWhere('adc.active_from <= ?', $today)
                ->andWhere('adc.active_to >= ?', $today);
        }

        return $query;
    }

    public static function applyWithWHFilter($query, $value) {
        $rootAlias = $query->getRootAlias();
        $today = date('Y-m-d');
        if ($value == 1) {
          $query
            ->innerJoin($rootAlias . '.CompanyDetail cd')
            ->andWhere('
                mon_from != 0 OR mon_to != 0
                OR tue_from != 0 OR tue_to != 0
                OR wed_from != 0 OR wed_to != 0
                OR thu_from != 0 OR thu_to != 0
                OR fri_from != 0 OR fri_to != 0
                OR sat_from != 0 OR sat_to != 0
                OR sun_from != 0 OR sun_to != 0'
            );
         }

        return $query;
    }

    public static function applyWithPicsFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        if ($value == 1 || $value == 4) {
            $q3 = $query->createSubquery()
                ->select('pa111.user_id')
                ->from('PageAdmin pa111')
                ->innerJoin ('pa111.CompanyPage cp111')
                ->addWhere('cp111.foreign_id = '.$rootAlias.'.id')
                ->addWhere('pa111.status="approved"');

            $q4 = $query->createSubquery()->select('pa122.user_id')
                ->from('PageAdmin pa122')
                ->innerJoin ('pa122.CompanyPage cp122')
                ->addWhere('cp122.foreign_id = '.$rootAlias.'.id')
                ->addWhere('pa122.status="approved"');

            $query
                ->innerJoin($rootAlias.'.CompanyImage ci113')
                ->innerJoin('ci113.Image i116');
            if ($value == 1) {
                $query->andWhere(
                    'i116.user_id IN (' .
                    self::pgEscapeArrayForInLocation(sfConfig::get('app_getlokal_power_user',array())) .
                    ')'
                )
                ->orWhere('i116.user_id IN (' . $q3->getDql () . ')');
            } else {
                $query->andWhere('i116.user_id IN (' . $q3->getDql() . ')');
            }
            $query->andWhere('i116.status="approved" and i116.type="company"')
                ->andWhere('EXISTS (' . $q4->getDql () . ')');
        } elseif ($value == 2) {
            $query->innerJoin($rootAlias.'.CompanyImage ci13')
            ->innerJoin('ci13.Image i16')
            ->andWhere('i16.status="approved" and i16.type="company"');
        } elseif ($value == 3) {
            $query->innerJoin($rootAlias.'.CompanyImage ci13')
            ->innerJoin('ci13.Image i16')
            ->andWhere(
                'i16.user_id IN (' .
                self::pgEscapeArrayForInLocation(sfConfig::get('app_getlokal_power_user',array())) .
                ')'
            )
            ->andWhere('i16.status="approved" and i16.type="company"');
        }

        return $query;
    }

    public static function pgEscapeArrayForInLocation($list)
    {
        $result = array();
        foreach ($list as $element) {
            $result[] = $element;
        }
        return '\'' . implode('\', \'', $result) . '\'';
    }

    public static function applyWithAnsFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $q3 = $query->createSubquery()->select('pa1.user_id')
            ->from('PageAdmin pa1')
            ->innerJoin ('pa1.CompanyPage cp1')
            ->addWhere('cp1.foreign_id = '.$rootAlias.'.id')
            ->addWhere('pa1.status="approved"');

        $q4 = $query->createSubquery()->select('pa12.user_id')
            ->from('PageAdmin pa12')
            ->innerJoin('pa12.CompanyPage cp12')
            ->addWhere('cp12.foreign_id = '.$rootAlias.'.id')
            ->addWhere('pa12.status="approved"');


        $today = date('Y-m-d');
        if ($value['text'] == 1) {
            $query->innerJoin($rootAlias.'.Review r4')
                ->addWhere('r4.user_id IN (' . $q3->getDql() . ')')
                ->andWhere('r4.is_published=1 and r4.parent_id is not NULL')
                ->andWhere('EXISTS (' . $q4->getDql() . ')');
        }

        return $query;

    }

    public static function applyClaimStatusFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query->innerJoin($rootAlias.'.CompanyPage cp')
         ->innerJoin('cp.PageAdmin pa0');
        
        if ($value != '') {
        	$q3 = $query->createSubquery()->select('cp91.id')
        	->from('CompanyPage cp91')
        	->innerJoin('cp91.PageAdmin pa91');
        	 
        	if ($value == 1) {
        		$query->andWhere('pa0.status = "approved"');
        	}
        	elseif ($value == 2) {
        		$q3->addWhere('pa91.status="approved"');
        		$query->andWhere('pa0.status = "pending" AND cp.id NOT IN (' . $q3->getDql() . ')');
        	}
        	elseif ($value == 3) {
        		$q3->addWhere('pa91.status="approved" OR pa91.status="pending"');
        		$query->andWhere('pa0.status = "rejected"')
        		->andWhere('cp.id NOT IN (' . $q3->getDql() . ')');
        	}
        	elseif ($value == 4) {
        		$q3->addWhere('pa91.status="approved"');
        		$q4 = $query->createSubquery()->select('cp92.id')
        		->from('CompanyPage cp92')
        		->innerJoin('cp92.PageAdmin pa92')
        		->addWhere('pa92.status ="approved" OR pa92.status="pending"');
        		
        		$query->andWhere('pa0.status = "approved"')
        		->orWhere('r.country_id = ? AND pa0.status = "pending" AND cp.id NOT IN (' . $q3->getDql() . ')', sfContext::getInstance()->getUser()->getCountry()->getId())
        		->orWhere('r.country_id = ? AND pa0.status = "rejected" AND cp.id NOT IN (' . $q4->getDql() . ')', sfContext::getInstance()->getUser()->getCountry()->getId());
        	}
        
        }

        return $q3;
    }

    public static function applyWithReviewsFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        if ($value == 1) {
            $query->addWhere($rootAlias.'.average_rating > 0.00');
        }

        return $query;
    }

      public static function applyRefererFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        if ($value) {
            $query->addWhere($rootAlias.'.referer = ? ', $value);
        }
        return $query;
    }

    public static function applyCountryFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();

        if($value == 'default'){
            $query->addWhere($rootAlias.'.country_id = ?', sfContext::getInstance()->getUser()->getCountry()->getId());
        }
        elseif ($value == 1) {
//             $query->addWhere($rootAlias.'.country_id > 4')
//             ->andWhere($rootAlias.'.country_id != 78');\
			$query->addWhere($rootAlias.'.country_id NOT IN ('.implode(',',getlokalPartner::getAllPartners()).')');
        }

        return $query;
    }

    public static function applyTitleFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query->innerJoin($rootAlias.'.Translation ct')
            ->addWhere('ct.title like ? ', '%'.$value['text'].'%');

        return $query;
    }

    public static function getLatLngById($id)
    {
        $location = self::getInstance()->createQuery('c')
            ->select('c.id, cl.latitude, cl.longitude')
            ->innerJoin('c.CompanyLocation cl')
            ->where('c.id = ?', $id)
            ->fetchOne();
        if ($location) {
            $location = $location->getCompanyLocation();
            if (empty($location)) {
                return null;
            }
            $location = $location[0];
            return array(
                $location->getLatitude(),
                $location->getLongitude()
            );
        }

        return null;
    }

    public static function getQuerySearchResults($ids, $culture) {
        return self::getInstance()->createQuery('c')
            ->innerJoin('c.Classification cl')
            ->innerJoin('cl.Translation clt WITH clt.lang = ?', $culture)
            ->innerJoin('c.Sector se')
            ->innerJoin('se.Translation set WITH set.lang = ?', $culture)
            ->leftJoin('c.Image i')
            ->addSelect('c.*, i.*, tr.*, cl.*, clt.*, se.*')
            ->whereIN('c.id', $ids)
            ->andWhere('c.status = ?', 0)
            ->orderBy('FIELD(c.id,'. implode(',', $ids). ')');
    }

    /**
     * Returns list of companies for autocomplete term and city
     * Rotates the results taking by is_ppp and score
     */
    public static function getAC($term, $cityId)
    {
        $culture = sfContext::getInstance()->getUser()->getCulture();
        $table = self::getInstance();
        $query = $table->createQuery('c')
            ->innerJoin('c.Location col ON (c.id= col.company_id)')
            ->innerJoin('c.Translation ct')
            ->innerJoin('c.Classification cl')
            ->innerJoin('cl.Translation clt')
            ->leftJoin('c.AdServiceCompany adc WITH adc.ad_service_id = 11 AND adc.status = "active" AND ((adc.active_to is null AND adc.crm_id is not null) OR (adc.active_to >= '.ProjectConfiguration::nowAlt().' AND  adc.crm_id is null)) ')
            ->where('ct.title LIKE ? ', $term)
            ->andWhere('clt.lang = ?', $culture)
            ->andWhere('clt.is_active = ?', 0)
            ->andWhere('c.city_id = ?', $cityId)
            ->andWhere('c.status = 0')
            ->orderBy('(adc.id IS NOT NULL) DESC')
            ->orderBy('c.score DESC');

        $cKey = $table->getCacheACKey($term, $cityId);

        $rotateIds = $table->getCacheAC($cKey);
        if ($rotateIds && is_array($rotateIds)) {
            $query->andWhereNotIn('c.id', $rotateIds);
        }

        return array($query, $cKey);
    }

    protected function getCacheACKey($term, $cityId)
    {
        $term = str_replace(array('%', ' '), '', $term);
        return "company_ac_{$term}_{$cityId}";
    }

    /**
     * Returns rotatable AC
     */
    protected function getCacheAC($key)
    {
        $cache = sfContext::getInstance()->getViewCacheManager()->getCache();

        if ($cache->has($key)) {
            $ids = unserialize($cache->get($key));
            // if more than 100 then clear
            if (count($ids) >= 100) {
                $cache->remove($key);
                return array();
            }

            return $ids;
        }

        return array();
    }

    public function addCacheAC($cKey, $collection)
    {
        $new = array();
        foreach ($collection as $c) {
            $new[] = $c->getId();
        }
        $ids = $this->getCacheAC($cKey);

        $cache = sfContext::getInstance()->getViewCacheManager()->getCache();
        $cache->set($cKey, serialize(array_merge((array) $ids, $new)));
    }
    
    static public function applyCityIdFilter($query, $value)
    {
    	$rootAlias = $query->getRootAlias();
    	$query->addWhere('city_id = ?',  intval($value));
    	 
    	return $query;
    }

}
