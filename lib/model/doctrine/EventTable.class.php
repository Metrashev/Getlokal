<?php

/**
 * EventTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class EventTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object EventTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Event');
    }

    public static function applyFirstNameFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query->innerJoin($rootAlias.'.UserProfile u2')
            ->innerJoin('u2.sfGuardUser s2')
            ->addWhere('s2.first_name like ?', $value['text'].'%');
        return $query;
    }

    public static function applyLastNameFilter($query, $value)
    {

        $rootAlias = $query->getRootAlias();
        $query->innerJoin($rootAlias.'.UserProfile l3')
            ->innerJoin('l3.sfGuardUser sg3')
            ->addWhere('sg3.last_name like ?', $value['text'].'%');

        return $query;
    }

    public static function applyCompanyFilter($query, $value)
    {
        $rootAlias = $query->getRootAlias();
        $query->leftJoin($rootAlias.'.EventPage ep4')
            ->innerJoin('ep4.CompanyPage cp4')
            ->innerJoin('cp4.Company c4')
        ->addWhere('c4.title like ? or c4.title_en like ?', array($value['text'].'%', $value['text'].'%'));

            return $query;
    }

    public function getQueryForAdmin(Doctrine_Query $q)
    {
        $rootAlias = $q->getRootAlias();

        $q->innerJoin($rootAlias . '.UserProfile p')
            ->leftJoin($rootAlias.'.Image')

            ->leftJoin($rootAlias.'.EventPage ep')
            ->leftJoin('ep.CompanyPage pp')
            ->leftJoin('pp.Company c')
            ->leftJoin('c.City')
            ->innerJoin('p.sfGuardUser sf')
            ->innerJoin($rootAlias.'.Translation')
            ->innerJoin($rootAlias.'.Category ca')
            ->innerJoin('ca.Translation')
            ->where($rootAlias.'.country_id = ?', sfContext::getInstance()->getUser()->getCountry()->getId());

        return $q;
    }

    // Events that have a end_at date will be filtered by that one
    // ones that don't have will be filtered by start_at, same for past events
    public static function applyFutureFilter($query)
    {
        $rootAlias = $query->getRootAlias();
        $date = date('Y-m-d');
        $query->addWhere("
            (
                ({$rootAlias}.end_at IS NULL AND {$rootAlias}.start_at >= ?)
                OR ({$rootAlias}.end_at >= ?)
            )
        ", array($date, $date));

        return $query;
    }

    public static function applyPastFilter($query)
    {
        $rootAlias = $query->getRootAlias();
        $date = date('Y-m-d');

        $query->addWhere("
            (
                ({$rootAlias}.end_at IS NULL AND {$rootAlias}.start_at < ?)
                OR ({$rootAlias}.end_at < ?)
            )
        ", array($date, $date));

        return $query;
    }

    /**
     * Return autocomplete query
     */
    public static function getAC($query, $culture, $cityId)
    {
        return self::getInstance()->createQuery('e')
            ->innerJoin('e.Translation t')
            ->where('t.lang = ?', $culture)
            ->andWhere('t.title LIKE ? OR t.description LIKE ?', array($query, $query))
            ->andWhere('e.end_at >= ?', date('Y-m-d'))
            ->andWhere('e.location_id = ?', $cityId)
            ->orderBy('e.recommended DESC')
            ->orderBy('e.start_at');
    }
    
    
    public static function applyIsRecommendFilter($query, $value)
    {
    	$rootAlias = $query->getRootAlias();
    	      if($value == 0){
    	      	$query->addWhere($rootAlias.'.recommended_at IS NULL or .recommended_at = "" ' );
    	      }
    	      if($value == 1){
    	      	$query->addWhere($rootAlias.'.recommended_at IS NOT NULL or .recommended_at != ""');
    	      }
    	
    	return $query;
    }
    
    static public function applyCityIdFilter($query, $value)
    {
    	$rootAlias = $query->getRootAlias();
    	$query->addWhere('location_id = ?',  intval($value));
    
    	return $query;
    }
    
    public static function getRecommended(){
    	$User = sfContext::getInstance()->getUser();
    	$culture = $User->getCulture();
    	$events = self::getEventSliderBaseQuery()
	    	->addWhere('e.location_id = ?', $User->getCity()->getId())
            ->addWhere('e.image_id IS NOT NULL AND e.image_id != "" ')
	//     	->addWhere('e.recommend = 1')
	    	->limit(10)
	    	->orderBy('e.recommend DESC, e.start_at ASC, count(u.user_id) DESC')
	    	->execute();

    	//optimizing City object 
    	foreach($events as $k=>$event){
    		$events[$k]->EventPage[0]->CompanyPage->Company->City = $event->City;
    	}
    	return $events;
    	
    }
    
    public static function getSingleSliderEvents($type = null, $id = null){
    	$User = sfContext::getInstance()->getUser();
    	$culture = $User->getCulture();
    	$events = self::getEventSliderBaseQuery()
    		->addWhere('e.location_id = ?',$User->getCity()->getId());
    	if($type == 'classification'){
    		$events->addWhere('c.classification_id = ?',$id);
    	}elseif ($type == 'sector'){
    		$events->addWhere('c.sector_id = ?',$id);
    	}	    		
    	$events = $events->limit(10)
    		->orderBy('e.recommend DESC, e.start_at ASC, count(u.user_Id) DESC')
    		->execute();
    	//optimizing City object
    	foreach($events as $k=>$event){
    		$events[$k]->EventPage[0]->CompanyPage->Company->City = $event->City;
    	}    	
    	return $events;
    }
    
    public static function getEventSliderBaseQuery($incoming = true)
    {
    	$User = sfContext::getInstance()->getUser();
    	$culture = $User->getCulture();
    	
    	$query = self::getInstance()
    	->createQuery('e')
    	->select("e.id ,e.buy_url ,e.start_at ,i.* ,t.id ,t.title , t.description, ec.id ,ect.id ,ect.title ,".
    		"ct.id ,ct.title ,t.id ,t.title ,ci.id ,cit.name ,ep.id ,cp.id ,c.id ,ct.title,c.slug")
    	->innerJoin('e.Translation t')
    	->innerJoin('e.Category ec')
    	->innerJoin('ec.Translation ect WITH ect.lang = ?',$culture)
    	->innerJoin('e.City ci')
    	->innerJoin('ci.Translation cit WITH cit.lang = ?',$culture)
    	->innerJoin('e.EventPage ep')
    	->innerJoin('ep.CompanyPage cp')
    	->innerJoin('cp.Company c with c.status = ? ', CompanyTable::VISIBLE)
    	->innerJoin('c.Translation ct WITH ct.lang = ?',$culture)
    	->leftJoin('e.EventUser u')
    	->leftJoin('e.Image i')
    	->where('t.lang = ?', $culture)
    	//->addWhere('e.image_id IS NOT NULL AND e.image_id != "" ')
    	->groupBy('e.id');
    	if($incoming){
	    	$query->addWhere('IFNULL(e.end_at, e.start_at ) >= ? ', date("Y-m-d"));
    	}
    	return $query;
    }
    
    public static function getEventListQuery()
    {
    	$User = sfContext::getInstance()->getUser();
    	$culture = $User->getCulture();
    	 
    	return self::getInstance()
    	->createQuery('e')
    	->select("e.id ,e.buy_url ,e.start_at ,i.* ,t.id ,t.title ,ec.id ,ect.id ,ect.title ,".
    			"ct.id ,ct.title ,t.id ,t.title ,ci.id ,cit.name ,ep.id ,cp.id ,c.id ,ct.title,c.slug")
    			->innerJoin('e.Translation t')
    			->innerJoin('e.Category ec')
    			->innerJoin('ec.Translation ect WITH ect.lang = ?',$culture)
    			->innerJoin('e.City ci')
    			->innerJoin('ci.Translation cit WITH cit.lang = ?',$culture)
    			->leftJoin('e.EventPage ep')
    			->leftJoin('ep.CompanyPage cp')
    			->leftJoin('cp.Company c with c.status = ? ', CompanyTable::VISIBLE)
    			->leftJoin('c.Translation ct WITH ct.lang = ?',$culture)
    			->leftJoin('e.EventUser u')
    			->leftJoin('e.Image i')
    			// ->where('e.image_id IS NOT NULL AND e.image_id != "" ')
    			->addWhere('t.lang = ?', $culture)
    			->addWhere('e.is_active = 1')
    			->groupBy('e.id');
    }
    
    public static function getListEvents($city_id, $page, $selected_tab, $date_selected, $category_id)
    {
    	//var_dump($city_id, $page, $selected_tab, $date_selected, $category_id); die;
    	$User = sfContext::getInstance()->getUser();
    	$culture = $User->getCulture();
    	 
    	$events = self::getEventListQuery();
    	$today = date("Y-m-d");
    	switch($selected_tab){
    		case "active": $events->addWhere("DATE(?) BETWEEN DATE(e.start_at) AND DATE(end_at)",$today);break;
    		case "future": {
    			$events->andWhere("DATE(e.start_at) > DATE(?)",$today);
    			$events->orderBy('e.start_at ASC');
    			break;
    		}
    		case "past"  : {
    			$events->andWhere("DATE(e.end_at) < DATE(?)",$today);
    			$events->addOrderBy("e.start_at DESC");
    			break;
    		}
    		case "date" : {
    			if(!$date_selected){
    				$date_selected = $today;
    			}
    			$events->andWhere("DATE(?) BETWEEN DATE(e.start_at) AND DATE(end_at)",$date_selected);break;
    		}
    		case "tickets" : {
    			$events->addWhere ( 'e.buy_url IS NOT NULL and e.buy_url != "" ');
    			break;
    		}
    	}
    	if(is_numeric($category_id) && $category_id > 0){
    		$events->addWhere('ec.id = ?',$category_id);
    	}
    	if(is_numeric($city_id) && $city_id > 0){
    		$events->addWhere('e.location_id = ? ', $city_id);
    	}
    	$events->limit(Event::FRONTEND_EVENTS_PER_PAGE);
    	$events->orderBy('e.recommend DESC, e.start_at ASC, count(u.user_Id) DESC');
    	//echo $events->getSqlQuery(); die;
    	/*$events = $events->execute();    	
    	foreach($events as $k=>$event){
    		$events[$k]->EventPage[0]->CompanyPage->Company->City = $event->City;
    	}
    	*/
    	$pager = new sfDoctrinePager('Event', Event::FRONTEND_EVENTS_PER_PAGE);
    	 
    	//                print_r($query->getSql());exit();
    	$pager->setQuery($events);
    	$pager->setPage($page);
    	$pager->init();
    	
    	return $pager;
    	//return $events;
    }

    public static function getTopEvent(){
        $user = sfContext::getInstance()->getUser();
        $culture = $user->getCulture();

//          $event = self::getInstance()
//          ->createQuery('e')
//          ->select("e.id, t.title, t.id, t.description, ec.id, ect.title, i.*, cp.id, ep.id, c.id")
//          ->innerJoin('e.Translation t')
//          ->innerJoin('e.Category ec')
//          ->innerJoin('ec.Translation ect WITH ect.lang = ?', $culture)
//          ->innerJoin('e.EventPage ep')
//          ->innerJoin('ep.CompanyPage cp')
//          ->innerJoin('cp.Company c with c.status = ? ', CompanyTable::VISIBLE)
//          ->leftJoin('e.Image i')
//          ->where('e.location_id = ?', $user->getCity()->getId())
//          ->addWhere('e.image_id IS NOT NULL AND e.image_id != "" ')
//          ->addWhere('IFNULL(e.end_at, e.start_at ) >= ? ', date("Y-m-d"))
//          ->limit(1)
//          ->groupBy('e.id')
//          ->orderBy('e.start_at ASC')
//          ->fetchOne();

       $event = self::getEventSliderBaseQuery(true)
       	->where('e.location_id = ?', $user->getCity()->getId())
       	// ->addWhere ('e.recommended_at IS NOT NULL')// AND e.recommended_at IS NULL')
        // ->orderBy('e.start_at ASC')
        ->addWhere('e.image_id IS NOT NULL AND e.image_id != "" ')
        ->andWhere('e.end_at >= ? ', date("Y-m-d"))
        ->orderBy('RAND()')
        ->limit(1)
        ->fetchOne();

        return $event;
        
    }

}
