source sBase
{
    type                    = mysql

    # some straightforward parameters for SQL source types
    sql_host                = dev.ned.local
    sql_user                = getlokal
    sql_pass                = 3Swygyigh
    sql_db                  = getlokal_dev
    sql_port                = 3306  # optional, default is 3306
}


source search : sBase
{
    sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
    sql_query_pre = SET NAMES 'utf8'
    sql_query = SELECT * FROM sphinx_search

    sql_joined_field = review from query; \
        SELECT \
            company_id, \
            text AS review \
        FROM review \
        WHERE is_published = 1 AND parent_id IS NULL \
        ORDER BY company_id

    sql_joined_field = classification from query; \
        SELECT  \
            cc.company_id,  \
            CONCAT(ct.title, ' ', ct.short_title) AS classification  \
        FROM classification_translation ct  \
            INNER JOIN company_classification cc ON cc.classification_id = ct.id \
        ORDER BY cc.company_id

    sql_joined_field = classification_keywords from query; \
        SELECT  \
            cck.company_id,  \
            ctk.keywords AS classification_keywords  \
        FROM classification_translation ctk  \
            INNER JOIN company_classification cck ON cck.classification_id = ctk.id \
        ORDER BY cck.company_id

    sql_joined_field = extra_classification from query; \
        SELECT \
            cc.company_id, \
            ct.keywords \
        FROM classification ct \
            INNER JOIN company_classification cc ON cc.classification_id = ct.id \
        ORDER BY cc.company_id

    sql_joined_field = sector from query; \
        SELECT \
            cc.company_id, \
            st.title AS sector \
        FROM company_classification cc \
            INNER JOIN classification_sector cs ON cs.classification_id = cc.classification_id \
            INNER JOIN sector s ON s.id =cs.sector_id \
            INNER JOIN sector_translation st ON s.id = st.id \
        ORDER BY cc.company_id

        sql_joined_field = detail_description from query; \
        SELECT \
            adc.company_id, \
            CONCAT(cd.content, ' ', cd.content_en) AS detail_description \
        FROM company_detail cd \
            INNER JOIN ad_service_company adc ON adc.company_id = cd.company_id \
        WHERE adc.ad_service_id = 11 \
            AND adc.active_from <= now() \
            AND adc.status = "active" \
            AND ((adc.active_to is null AND adc.crm_id is not null) \
                OR (adc.active_to >= now() AND  adc.crm_id is null)) \
        ORDER BY adc.company_id

    sql_joined_field = video from query; \
        SELECT \
            ci.company_id, \
            CONCAT(i.caption, ' ', i.description) AS video \
        FROM image i \
            INNER JOIN company_image ci ON ci.image_id = i.id \
            WHERE i.status = "approved" AND i.type = "video" \
        ORDER BY ci.company_id

    sql_joined_field = image from query; \
        SELECT \
            cim.company_id, \
            im.caption AS image \
        FROM image im \
            INNER JOIN company_image cim ON cim.image_id = im.id \
        WHERE im.status = "approved" AND im.type = "company" \
        ORDER BY cim.company_id

    sql_attr_float = star_rating
    sql_attr_uint = city_id
    sql_attr_uint = country_id
    sql_attr_uint = county_id
    sql_attr_float = score
    sql_attr_timestamp = date_added
    sql_attr_float = latitude
    sql_attr_float = longitude
    sql_attr_float = lat_rad
    sql_attr_float = lng_rad
    sql_attr_uint = sector_id
    sql_attr_uint = classification_id
    sql_attr_uint = is_ppp
    sql_attr_uint = offer_count

    sql_attr_uint = tr_user_id
    sql_attr_string = tr_u_name
    sql_attr_string = tr_u_username
    sql_attr_string = tr_review

    sql_query_info          = SELECT * FROM company WHERE id=$id

}

source sCountry : sBase
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  
  sql_query = SELECT c.*, c.id AS id_attr FROM country c
  
  sql_attr_bigint = id_attr
  sql_field_string = name
  sql_field_string = name_en
  sql_field_string = slug
  sql_field_string = currency
}

source sCounty : sBase
{
  sql_query = SELECT cont.id, cont_tr.name AS name,  cont_tr_en.name AS nameen, cont.municipality,  cont.region, cont.country_id, cont.slug, cont.id AS `contatt_id`, co.name AS contry_name, co.name_en AS contry_name_en, co.slug AS contry_slug \
              FROM county cont \
              JOIN country co ON cont.country_id = co.id \
              LEFT JOIN county_translation cont_tr ON cont.id = cont_tr.id AND cont_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN county_translation cont_tr_en ON cont.id = cont_tr_en.id AND cont_tr_en.lang = 'en' \

  sql_joined_field = county_name_translated from query; \
                     SELECT id, name FROM county_translation
  
        			 
  sql_attr_bigint   = contatt_id
  sql_field_string  = name
  sql_field_string  = nameen
  sql_field_string  = municipality
  sql_field_string  = region
  sql_attr_bigint   = country_id
  sql_field_string  = slug
  sql_field_string  = contry_name
  sql_field_string  = contry_name_en
  sql_field_string  = contry_slug
}

source sCity : sBase
{
  sql_query = SELECT ci.id, cit_tr.name,  cit_tr_en.name AS nameen, cont_tr.name AS county_name,  cont_tr_en.name AS county_nameen, co.name AS country_name, co.name_en AS country_nameen, ci.slug,  cont.municipality, cont.region, ci.is_default, co.id AS country_id, ci.county_id, ci.id AS att_id, CAST(ci.lat AS DECIMAL(18,10)) AS conv_lat, CAST(ci.lng AS DECIMAL(18,10)) AS conv_lng, radians(ci.lat) AS `lat_rad`, radians(ci.lng) AS `lng_rad` FROM city ci \
              JOIN county cont ON ci.county_id = cont.id \
              JOIN country co ON co.id = cont.country_id \
              LEFT JOIN city_translation cit_tr ON ci.id = cit_tr.id AND cit_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN city_translation cit_tr_en ON ci.id = cit_tr_en.id AND cit_tr_en.lang = 'en' \
              LEFT JOIN county_translation cont_tr ON ci.county_id = cont_tr.id AND cont_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN county_translation cont_tr_en ON ci.county_id = cont_tr_en.id AND cont_tr_en.lang = 'en'
  
  sql_joined_field =  translated_name from query; \
                      SELECT id, name FROM city_translation
                      
  sql_attr_bigint   = att_id
  sql_field_string  = name
  sql_field_string  = nameen
  sql_field_string  = slug
  sql_field_string  = county_name
  sql_field_string  = county_nameen
  sql_field_string  = country_name
  sql_field_string  = country_nameen
  sql_field_string  = municipality
  sql_field_string  = region
  sql_attr_float    = conv_lat
  sql_attr_float    = conv_lng
  sql_attr_float    = lat_rad
  sql_attr_float    = lng_rad
  sql_attr_uint     = is_default
  sql_attr_bigint   = county_id
  sql_attr_bigint   = country_id
}

#---------County---------------#

source sCountyen : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCountybg : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCountyro : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCountymk : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCountysr : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCountyfi : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCountyhu : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCountyru : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------City---------------#

source sCityen : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCitybg : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCityro : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCitymk : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCitysr : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCityfi : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCityhu : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCityru : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}


index iCountry
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCountry
    path                    = /var/lib/data/searchcountry
    
    enable_star = 1
    min_prefix_len = 1
}

index iCountyen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCountyen
    path                    = /var/lib/data/searchcountyen
    
    enable_star = 1
    min_prefix_len = 1
}

index iCountybg : iCountyen
{
    source                  = sCountybg
    path                    = /var/lib/data/searchcountybg
}

index iCountyro : iCountyen
{
    source                  = sCountyro
    path                    = /var/lib/data/searchcountyro
}

index iCountymk : iCountyen
{
    source                  = sCountymk
    path                    = /var/lib/data/searchcountymk
}

index iCountysr : iCountyen
{
    source                  = sCountysr
    path                    = /var/lib/data/searchcountysr
}

index iCountyfi : iCountyen
{
    source                  = sCountyfi
    path                    = /var/lib/data/searchcountyfi
}

index iCountyhu : iCountyen
{
    source                  = sCountyhu
    path                    = /var/lib/data/searchcountyhu
}

index iCountyru : iCountyen
{
    source                  = sCountyru
    path                    = /var/lib/data/searchcountyru
}

index iCityen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCityen
    path                    = /var/lib/data/searchcityen
    
    enable_star = 1
    min_prefix_len = 1
}

index iCitybg : iCityen
{
    source                  = sCitybg
    path                    = /var/lib/data/searchcitybg
}

index iCityro : iCityen
{
    source                  = sCityro
    path                    = /var/lib/data/searchcityro
}

index iCitymk : iCityen
{
    source                  = sCitymk
    path                    = /var/lib/data/searchcitymk
}

index iCitysr : iCityen
{
    source                  = sCitysr
    path                    = /var/lib/data/searchcitysr
}

index iCityfi : iCityen
{
    source                  = sCityfi
    path                    = /var/lib/data/searchcityfi
}

index iCityhu : iCityen
{
    source                  = sCityhu
    path                    = /var/lib/data/searchcityhu
}

index iCityru : iCityen
{
    source                  = sCityru
    path                    = /var/lib/data/searchcityru
}

index search
{
    type                    = plain
    source                  = search
    path                    = /var/lib/data/search
    docinfo                 = extern
    mlock                   = 0
    # http://sphinxsearch.com/docs/2.1.1/conf-morphology.html
    morphology              = none
    min_word_len            = 1
    charset_type            = utf-8

    html_strip              = 0
}
index searchen : search
{
    path                    = /var/lib/data/searchen
    morphology              = libstemmer_english
}
index searchro : search
{
    path                    = /var/lib/data/searchro
    morphology              = libstemmer_english, libstemmer_ro
}

index searchbg : search
{
    path                    = /var/lib/data/searchbg
    morphology              = libstemmer_english, libstemmer_ru
}

index searchmk : search
{
    path                    = /var/lib/data/searchmk
    morphology              = libstemmer_english, libstemmer_ru
}

index searchsr : search
{
    path                    = /var/lib/data/searchsr
    morphology              = libstemmer_english, libstemmer_ru
}

index searchfi: search
{
    path                    = /var/lib/data/searchfi
    morphology              = libstemmer_fi, libstemmer_english, libstemmer_ru
}

index searchhu: search
{
    path                    = /var/lib/data/searchhu
    morphology              = libstemmer_hu, libstemmer_english, libstemmer_ru
}

index searchru: search
{
    path                    = /var/lib/data/searchru
    morphology              = libstemmer_ru, libstemmer_english
}

#############################################################################
## indexer settings
#############################################################################

indexer
{
    # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
    # optional, default is 32M, max is 2047M, recommended is 256M to 1024M
    mem_limit               = 32M

    # maximum IO calls per second (for I/O throttling)
    # optional, default is 0 (unlimited)
    #
    # max_iops              = 40


    # maximum IO call size, bytes (for I/O throttling)
    # optional, default is 0 (unlimited)
    #
    # max_iosize            = 1048576


    # maximum xmlpipe2 field length, bytes
    # optional, default is 2M
    #
    # max_xmlpipe2_field    = 4M


    # write buffer size, bytes
    # several (currently up to 4) buffers will be allocated
    # write buffers are allocated in addition to mem_limit
    # optional, default is 1M
    #
    # write_buffer          = 1M


    # maximum file field adaptive buffer size
    # optional, default is 8M, minimum is 1M
    #
    # max_file_field_buffer = 32M
}

searchd
{
    # [hostname:]port[:protocol], or /unix/socket/path to listen on
    # known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
    #
    # multi-value, multiple listen points are allowed
    # optional, defaults are 9312:sphinx and 9306:mysql41, AS below
    #
    # listen                        = 127.0.0.1
    # listen                        = 192.168.0.1:9312
    # listen                        = 9312
    # listen                        = /var/run/searchd.sock
    listen                  = 9312
    listen                  = 9306:mysql41

    # log file, searchd run info is logged here
    # optional, default is 'searchd.log'
    log                     = /var/log/sphinxsearch/searchd.log

    # query log file, all search queries are logged here
    # optional, default is empty (do not log queries)
    query_log               = /var/log/sphinxsearch/query.log

    # client read timeout, seconds
    # optional, default is 5
    read_timeout            = 5

    # request timeout, seconds
    # optional, default is 5 minutes
    client_timeout          = 300

    # maximum amount of children to fork (concurrent searches to run)
    # optional, default is 0 (unlimited)
    max_children            = 30

    # PID file, searchd process ID file name
    # mandatory
    pid_file                = /var/run/sphinxsearch/searchd.pid

    # max amount of matches the daemon ever keeps in RAM, per-index
    max_matches             = 1000

    # seamless rotate, prevents rotate stalls if precaching huge datasets
    # optional, default is 1
    seamless_rotate         = 1

    # whether to forcibly preopen all indexes on startup
    # optional, default is 1 (preopen everything)
    preopen_indexes         = 1

    # whether to unlink .old index copies on succesful rotation.
    # optional, default is 1 (do unlink)
    unlink_old              = 1

    # attribute updates periodic flush timeout, seconds
    # updates will be automatically dumped to disk this frequently
    # optional, default is 0 (disable periodic flush)
    #
    # attr_flush_period     = 900


    # instance-wide ondisk_dict defaults (per-index value take precedence)
    # optional, default is 0 (precache all dictionaries in RAM)
    #
    # ondisk_dict_default   = 1


    # MVA updates pool size
    # shared between all instances of searchd, disables attr flushes!
    # optional, default size is 1M
    mva_updates_pool        = 1M

    # max allowed network packet size
    # limits both query packets from clients, and responses from agents
    # optional, default size is 8M
    max_packet_size         = 8M

    # crash log path
    # searchd will (try to) log crashed query to 'crash_log_path.PID' file
    # optional, default is empty (do not create crash logs)
    #
    # crash_log_path                = /var/log/sphinxsearch/crash


    # max allowed per-query filter count
    # optional, default is 256
    max_filters             = 256

    # max allowed per-filter values count
    # optional, default is 4096
    max_filter_values       = 4096


    # socket listen queue length
    # optional, default is 5
    #
    # listen_backlog                = 5
    # optional, default is 256K
    #
    # read_buffer           = 256K


    # unhinted read size (currently used when reading hits)
    # optional, default is 32K
    #
    # read_unhinted         = 32K


    # max allowed per-batch query count (aka multi-query count)
    # optional, default is 32
    max_batch_queries       = 32


    # max common subtree document cache size, per-query
    # optional, default is 0 (disable subtree optimization)
    #
    # subtree_docs_cache    = 4M


    # max common subtree hit cache size, per-query
    # optional, default is 0 (disable subtree optimization)
    #
    # subtree_hits_cache    = 8M


    # multi-processing mode (MPM)
    # known values are none, fork, prefork, and threads
    # optional, default is fork
    #
    workers                 = threads # for RT to work


    # max threads to create for searching local parts of a distributed index
    # optional, default is 0, which means disable multi-threaded searching
    # should work with all MPMs (ie. does NOT require workers=threads)
    #
    # dist_threads          = 4


    # binlog files path; use empty string to disable binlog
    # optional, default is build-time configured data directory
    #
    # binlog_path           = # disable logging
    # binlog_path           = /var/lib/data # binlog.001 etc will be created there


    # binlog flush/sync mode
    # 0 means flush and sync every second
    # 1 means flush and sync every transaction
    # 2 means flush every transaction, sync every second
    # optional, default is 2
    #
    # binlog_flush          = 2
    #
    # binlog_max_log_size   = 256M


    # per-thread stack size, only affects workers=threads mode
    # optional, default is 64K
    #
    # thread_stack                  = 128K


    # per-keyword expansion limit (for dict=keywords prefix searches)
    # optional, default is 0 (no limit)
    #
    # expansion_limit               = 1000


    # RT RAM chunks flush period
    # optional, default is 0 (no periodic flush)
    #
    # rt_flush_period               = 900


    # query log file format
    # optional, known values are plain and sphinxql, default is plain
    #
    # query_log_format              = sphinxql
    query_log_format              = plain


    # version string returned to MySQL network protocol clients
    # optional, default is empty (use Sphinx version)
    #
    # mysql_version_string  = 5.0.37


    # trusted plugin directory
    # optional, default is empty (disable UDFs)
    #
    # plugin_dir                    = /usr/local/sphinx/lib


    # default server-wide collation
    # optional, default is libc_ci
    #
    collation_server                = utf8_general_ci


    # server-wide locale for libc based collations
    # optional, default is C
    #
    # collation_libc_locale = ru_RU.UTF-8


    # threaded server watchdog (only used in workers=threads mode)
    # optional, values are 0 and 1, default is 1 (watchdog on)
    #
    # watchdog                              = 1

    # SphinxQL compatibility mode (legacy columns and their names)
    # optional, default is 0 (SQL compliant syntax and result sets)
    #
    # compat_sphinxql_magics        = 1
}

# --eof--
