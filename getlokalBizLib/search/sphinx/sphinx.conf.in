############################### MAIN SOURCES DEFINITION #######################################
source sBase
{
    type                    = mysql

    # some straightforward parameters for SQL source types
    sql_host                = pma.devlokal.com
    sql_user                = stoycho
    sql_pass                = corakishGam5
    sql_db                  = stoycho
    sql_port                = 3306  # optional, default is 3306
}

source sCompany : sBase
{
    sql_query_range = SELECT MIN(id),MAX(id) FROM company
    sql_range_step = 200000
    
    sql_query = CALL `sphinx_companies_active`($start, $end, @lang) 
 
    sql_joined_field = description from query; \
        SELECT \
            cast( concat('1', ct.id)  AS UNSIGNED INTEGER ) AS `id`, \
            ct.description AS description \
        FROM company_translation ct \
        WHERE ct.lang COLLATE utf8_unicode_ci IN ( 'en', @lang COLLATE utf8_unicode_ci) \
        ORDER BY `id`
        
    sql_joined_field = classification from query; \
        SELECT  \
            cast( concat('1', cc.company_id)  AS UNSIGNED INTEGER ) AS `id`,  \
            CONCAT(ct.title, ' ', ct.short_title) AS classification  \
        FROM classification_translation ct  \
        JOIN company_classification cc ON ct.id = cc.classification_id \
          AND ct.lang COLLATE utf8_unicode_ci IN ( 'en', @lang COLLATE utf8_unicode_ci) \
        ORDER BY `id`

    sql_joined_field = classification_keywords from query; \
        SELECT  \
            cast( concat('1', cck.company_id)  AS UNSIGNED INTEGER ) AS `id`,  \
            ctk.keywords AS classification_keywords  \
        FROM classification_translation ctk  \
    		JOIN company_classification cck ON ctk.id = cck.classification_id \
    			AND ctk.lang COLLATE utf8_unicode_ci IN ( 'en', @lang COLLATE utf8_unicode_ci) \
        ORDER BY `id`
         
    sql_joined_field = detail_description from query; \
        SELECT \
            cast( concat('1', ct.id)  AS UNSIGNED INTEGER ) AS `id`, \
            ct.content AS detail_description \
        FROM company_translation ct \
        JOIN ad_service_company adc ON ct.id = adc.company_id \
        WHERE adc.ad_service_id = 11 \
            AND adc.active_from <= now() \
            AND adc.status = "active" \
            AND ((adc.active_to is null AND adc.crm_id is not null) \
                OR (adc.active_to >= now() AND  adc.crm_id is null)) \
            AND ct.lang COLLATE utf8_unicode_ci IN ( 'en', @lang COLLATE utf8_unicode_ci) \
        ORDER BY `id`

    sql_attr_bigint = doc_id
    sql_attr_bigint = att_id
    sql_field_string  = searchTitle
    sql_attr_uint   = country_id
    sql_attr_bigint   = county_id
    sql_attr_bigint   = city_id
    sql_attr_float  = longitude
    sql_attr_float  = latitude
    sql_attr_float  = lat_rad
    sql_attr_float  = lng_rad
    sql_attr_float  = score
    sql_attr_float  = star_rating
    sql_attr_uint   = sector_id
    sql_attr_uint   = classification_id
    sql_field_string  = inComp_review
    sql_field_string  = reviewText
    sql_attr_uint     = reviewsCount
    sql_field_string  = imageText
    sql_attr_uint     = imageCount
    sql_field_string  = videoText
    sql_attr_uint     = videoCount
    sql_attr_uint     = is_ppp
    sql_field_string  = localizedTitle
    sql_field_string  = address
    sql_attr_uint     = offer_count
}

source sCompanyReview : sBase
{
    sql_query_range   = SELECT MIN(id),MAX(id) FROM review
    sql_range_step = 200000
    
    sql_query = CALL `sphinx_company_reviews`($start, $end, @lang) 
  
    sql_attr_bigint = doc_id
    sql_attr_bigint = att_id
    sql_field_string  = searchTitle
    sql_attr_uint   = country_id
    sql_attr_bigint   = county_id
    sql_attr_bigint   = city_id
    sql_attr_float  = longitude
    sql_attr_float  = latitude
    sql_attr_float  = lat_rad
    sql_attr_float  = lng_rad
    sql_attr_float  = score
    sql_attr_float  = star_rating
    sql_attr_uint   = sector_id
    sql_attr_uint   = classification_id
    sql_field_string  = inComp_review
    sql_field_string  = reviewText
    sql_attr_uint     = reviewsCount
    sql_field_string  = imageText
    sql_attr_uint     = imageCount
    sql_field_string  = videoText
    sql_attr_uint     = videoCount
    sql_field_string  = description
    sql_field_string  = detail_description
    sql_attr_uint     = is_ppp
    sql_field_string  = localizedTitle
    sql_field_string  = address
    sql_attr_uint     = offer_count
}

source sCompanyImage : sBase
{
    sql_query_range   = SELECT MIN(id),MAX(id) FROM image
    sql_range_step = 200000
    
    sql_query = CALL `sphinx_company_images`($start, $end, @lang) 
    
    
    sql_attr_bigint = doc_id
    sql_attr_bigint = att_id
    sql_field_string  = searchTitle
    sql_attr_uint   = country_id
    sql_attr_bigint   = county_id
    sql_attr_bigint   = city_id
    sql_attr_float  = longitude
    sql_attr_float  = latitude
    sql_attr_float  = lat_rad
    sql_attr_float  = lng_rad
    sql_attr_float  = score
    sql_attr_float  = star_rating
    sql_attr_uint   = sector_id
    sql_attr_uint   = classification_id
    sql_field_string  = inComp_review
    sql_field_string  = reviewText
    sql_attr_uint     = reviewsCount
    sql_field_string  = imageText
    sql_attr_uint     = imageCount
    sql_field_string  = videoText
    sql_attr_uint     = videoCount
    sql_field_string  = description
    sql_field_string  = detail_description
    sql_attr_uint     = is_ppp
    sql_field_string  = localizedTitle
    sql_field_string  = address
    sql_attr_uint     = offer_count
}

source sComapnyVideo : sBase
{
    sql_query_range   = SELECT MIN(id),MAX(id) FROM image
    sql_range_step = 200000
    
    sql_query = CALL `sphinx_company_video`($start, $end, @lang) 
    
    sql_attr_bigint = doc_id
    sql_attr_bigint = att_id
    sql_field_string  = searchTitle
    sql_attr_uint   = country_id
    sql_attr_bigint   = county_id
    sql_attr_bigint   = city_id
    sql_attr_float  = longitude
    sql_attr_float  = latitude
    sql_attr_float  = lat_rad
    sql_attr_float  = lng_rad
    sql_attr_float  = score
    sql_attr_float  = star_rating
    sql_attr_uint   = sector_id
    sql_attr_uint   = classification_id
    sql_field_string  = inComp_review
    sql_field_string  = reviewText
    sql_attr_uint     = reviewsCount
    sql_field_string  = imageText
    sql_attr_uint     = imageCount
    sql_field_string  = videoText
    sql_attr_uint     = videoCount
    sql_field_string  = description
    sql_field_string  = detail_description
    sql_attr_uint     = is_ppp
    sql_field_string  = localizedTitle
    sql_field_string  = address
    sql_attr_uint     = offer_count
}

source sCountry : sBase
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  
  sql_query = SELECT c.*, c.id AS id_attr FROM country c
  
  sql_attr_bigint = id_attr
  sql_field_string = name
  sql_field_string = name_en
  sql_field_string = slug
  sql_field_string = currency
}

source sCounty : sBase
{
  sql_query = SELECT cont.id, cont_tr.name AS name,  cont_tr_en.name AS nameen, cont.municipality,  cont.region, cont.country_id, cont.slug, cont.id AS `contatt_id`, co.name AS contry_name, co.name_en AS contry_name_en, co.slug AS contry_slug \
              FROM county cont \
              JOIN country co ON cont.country_id = co.id \
              LEFT JOIN county_translation cont_tr ON cont.id = cont_tr.id AND cont_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN county_translation cont_tr_en ON cont.id = cont_tr_en.id AND cont_tr_en.lang = 'en' \

  sql_joined_field = county_name_translated from query; \
                     SELECT id, name FROM county_translation
  
        			 
  sql_attr_bigint   = contatt_id
  sql_field_string  = name
  sql_field_string  = nameen
  sql_field_string  = municipality
  sql_field_string  = region
  sql_attr_bigint   = country_id
  sql_field_string  = slug
  sql_field_string  = contry_name
  sql_field_string  = contry_name_en
  sql_field_string  = contry_slug
}

source sCity : sBase
{
  sql_query = SELECT ci.id, cit_tr.name,  cit_tr_en.name AS nameen, cont_tr.name AS county_name,  cont_tr_en.name AS county_nameen, co.name AS country_name, co.name_en AS country_nameen, ci.slug,  cont.municipality, cont.region, ci.is_default, co.id AS country_id, ci.county_id, ci.id AS att_id, CAST(ci.lat AS DECIMAL(18,10)) AS conv_lat, CAST(ci.lng AS DECIMAL(18,10)) AS conv_lng, radians(ci.lat) AS `lat_rad`, radians(ci.lng) AS `lng_rad` FROM city ci \
              JOIN county cont ON ci.county_id = cont.id \
              JOIN country co ON co.id = cont.country_id \
              LEFT JOIN city_translation cit_tr ON ci.id = cit_tr.id AND cit_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN city_translation cit_tr_en ON ci.id = cit_tr_en.id AND cit_tr_en.lang = 'en' \
              LEFT JOIN county_translation cont_tr ON ci.county_id = cont_tr.id AND cont_tr.lang = @lang COLLATE utf8_unicode_ci \
              LEFT JOIN county_translation cont_tr_en ON ci.county_id = cont_tr_en.id AND cont_tr_en.lang = 'en'
  
  sql_joined_field =  translated_name from query; \
                      SELECT id, name FROM city_translation
                      
  sql_attr_bigint   = att_id
  sql_field_string  = name
  sql_field_string  = nameen
  sql_field_string  = slug
  sql_field_string  = county_name
  sql_field_string  = county_nameen
  sql_field_string  = country_name
  sql_field_string  = country_nameen
  sql_field_string  = municipality
  sql_field_string  = region
  sql_attr_float    = conv_lat
  sql_attr_float    = conv_lng
  sql_attr_float    = lat_rad
  sql_attr_float    = lng_rad
  sql_attr_uint     = is_default
  sql_attr_bigint   = county_id
  sql_attr_bigint   = country_id
}
########################## LANGUAGE DEPENDENT SOURCES DEFINITION ##################################

#---------Company---------------#

source sCompanyen : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCompanybg : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCompanyro : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCompanymk : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCompanysr : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCompanyfi : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCompanyhu : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCompanyru : sCompany
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------CompanyReview---------------#

source sCompanyReviewen : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCompanyReviewbg : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCompanyReviewro : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCompanyReviewmk : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCompanyReviewsr : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCompanyReviewfi : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCompanyReviewhu : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCompanyReviewru : sCompanyReview
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------CompanyImage---------------#

source sCompanyImageen : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCompanyImagebg : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCompanyImagero : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCompanyImagemk : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCompanyImagesr : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCompanyImagefi : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCompanyImagehu : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCompanyImageru : sCompanyImage
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------CompanyVideo---------------#

source sComapnyVideoen : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sComapnyVideobg : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sComapnyVideoro : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sComapnyVideomk : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sComapnyVideosr : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sComapnyVideofi : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sComapnyVideohu : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sComapnyVideoru : sComapnyVideo
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------County---------------#

source sCountyen : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCountybg : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCountyro : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCountymk : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCountysr : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCountyfi : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCountyhu : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCountyru : sCounty
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

#---------City---------------#

source sCityen : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='en'
}

source sCitybg : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='bg'
}

source sCityro : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ro'
}

source sCitymk : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='mk'
}

source sCitysr : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='sr'
}

source sCityfi : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='fi'
}

source sCityhu : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='hu'
}

source sCityru : sCity
{
  sql_query_pre = SET CHARACTER_SET_RESULTS = 'utf8'
  sql_query_pre = SET NAMES 'utf8'
  sql_query_pre = SET @lang:='ru'
}

############################### INDEXES DEFINITION #######################################

index iCountry
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCountry
    path                    = D:/Sphinx2.1.6/data/country
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iCountyen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCountyen
    path                    = D:/Sphinx2.1.6/data/countyen
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iCityen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCityen
    path                    = D:\Sphinx2.1.6\data\cityen
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iCompanyReviewen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCompanyReviewen
    path                    = D:/Sphinx2.1.6/data/CompanyReviewen
    morphology              = libstemmer_english
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iCompanyImageen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCompanyImageen
    path                    = D:/Sphinx2.1.6/data/CompanyImageen
    morphology              = libstemmer_english
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iComapnyVideoen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sComapnyVideoen
    path                    = D:/Sphinx2.1.6/data/ComapnyVideoen
    morphology              = libstemmer_english
    
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

index iCompanyen
{
    type                    = plain
    docinfo                 = extern
    mlock                   = 0
    min_word_len            = 1
    charset_type            = utf-8
    html_strip              = 0
    
    source                  = sCompanyen
    path                    = D:/Sphinx2.1.6/data/companyen
    morphology              = libstemmer_english
   
    enable_star = 1
    min_prefix_len = 1
    
    charset_table = 0..9, A..Z->a..z, _, -, ', U+AD, a..z, \
                    U+C0..U+D6->U+E0..U+F6, U+D8..U+DE->U+F8..U+FE, U+E0..U+F6, U+F8..U+FE, U+DF, U+FF, \
                    U+410..U+42F->U+430..U+44F, U+430..U+44F, U+401->U+451, U+451
}

########################## LANGUAGE DEPENDENT INDEXES DEFINITION ##################################

#---------County---------------#
index iCountybg : iCountyen
{
    source                  = sCountybg
    path                    = D:/Sphinx2.1.6/data/countybg
}

index iCountyro : iCountyen
{
    source                  = sCountyro
    path                    = D:/Sphinx2.1.6/data/countyro
}

index iCountymk : iCountyen
{
    source                  = sCountymk
    path                    = D:/Sphinx2.1.6/data/countymk
}

index iCountysr : iCountyen
{
    source                  = sCountysr
    path                    = D:/Sphinx2.1.6/data/countysr
}

index iCountyfi : iCountyen
{
    source                  = sCountyfi
    path                    = D:/Sphinx2.1.6/data/countyfi
}

index iCountyhu : iCountyen
{
    source                  = sCountyhu
    path                    = D:/Sphinx2.1.6/data/countyhu
}

index iCountyru : iCountyen
{
    source                  = sCountyru
    path                    = D:/Sphinx2.1.6/data/countyru
}

#---------City---------------#

index iCitybg : iCityen
{
    source                  = sCitybg
    path                    = D:/Sphinx2.1.6/data/citybg
}

index iCityro : iCityen
{
    source                  = sCityro
    path                    = D:/Sphinx2.1.6/data/cityro
}

index iCitymk : iCityen
{
    source                  = sCitymk
    path                    = D:/Sphinx2.1.6/data/citymk
}

index iCitysr : iCityen
{
    source                  = sCitysr
    path                    = D:/Sphinx2.1.6/data/citysr
}

index iCityfi : iCityen
{
    source                  = sCityfi
    path                    = D:/Sphinx2.1.6/data/cityfi
}

index iCityhu : iCityen
{
    source                  = sCityhu
    path                    = D:/Sphinx2.1.6/data/cityhu
}

index iCityru : iCityen
{
    source                  = sCityru
    path                    = D:/Sphinx2.1.6/data/cityru
}


#---------Company Review---------------#

index iCompanyReviewbg : iCompanyReviewen
{
    source                  = sCompanyReviewbg
    path                    = D:/Sphinx2.1.6/data/CompanyReviewbg
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyReviewro : iCompanyReviewen
{
    source                  = sCompanyReviewro
    path                    = D:/Sphinx2.1.6/data/CompanyReviewro
    morphology              = libstemmer_ro, libstemmer_english
}

index iCompanyReviewmk : iCompanyReviewen
{
    source                  = sCompanyReviewmk
    path                    = D:/Sphinx2.1.6/data/CompanyReviewmk
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyReviewsr : iCompanyReviewen
{
    source                  = sCompanyReviewsr
    path                    = D:/Sphinx2.1.6/data/CompanyReviewsr
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyReviewfi: iCompanyReviewen
{
    source                  = sCompanyReviewfi
    path                    = D:/Sphinx2.1.6/data/CompanyReviewfi
    morphology              = libstemmer_fi, libstemmer_english, libstemmer_ru
}

index iCompanyReviewhu: iCompanyReviewen
{
    source                  = sCompanyReviewhu
    path                    = D:\Sphinx2.1.6\data\CompanyReviewhu
    morphology              = libstemmer_hu, libstemmer_english, libstemmer_ru
}

index iCompanyReviewru: iCompanyReviewen
{
    source                  = sCompanyReviewru
    path                    = D:\Sphinx2.1.6\data\CompanyReviewru
    morphology              = libstemmer_ru, libstemmer_english
}

#---------Company Image---------------#

index iCompanyImagebg : iCompanyImageen
{
    source                  = sCompanyImagebg
    path                    = D:/Sphinx2.1.6/data/CompanyImagebg
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyImagero : iCompanyImageen
{
    source                  = sCompanyImagero
    path                    = D:/Sphinx2.1.6/data/CompanyImagero
    morphology              = libstemmer_ro, libstemmer_english
}

index iCompanyImagemk : iCompanyImageen
{
    source                  = sCompanyImagemk
    path                    = D:/Sphinx2.1.6/data/CompanyImagemk
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyImagesr : iCompanyImageen
{
    source                  = sCompanyImagesr
    path                    = D:/Sphinx2.1.6/data/CompanyImagesr
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyImagefi: iCompanyImageen
{
    source                  = sCompanyImagefi
    path                    = D:/Sphinx2.1.6/data/CompanyImagefi
    morphology              = libstemmer_fi, libstemmer_english, libstemmer_ru
}

index iCompanyImagehu: iCompanyImageen
{
    source                  = sCompanyImagehu
    path                    = D:\Sphinx2.1.6\data\CompanyImagehu
    morphology              = libstemmer_hu, libstemmer_english, libstemmer_ru
}

index iCompanyImageru: iCompanyImageen
{
    source                  = sCompanyImageru
    path                    = D:\Sphinx2.1.6\data\CompanyImageru
    morphology              = libstemmer_ru, libstemmer_english
}



#---------Company Video---------------#

index iComapnyVideobg : iComapnyVideoen
{
    source                  = sComapnyVideobg
    path                    = D:/Sphinx2.1.6/data/ComapnyVideobg
    #morphology              = libstemmer_ru, libstemmer_english
}

index iComapnyVideoro : iComapnyVideoen
{
    source                  = sComapnyVideoro
    path                    = D:/Sphinx2.1.6/data/ComapnyVideoro
    morphology              = libstemmer_ro, libstemmer_english
}

index iComapnyVideomk : iComapnyVideoen
{
    source                  = sComapnyVideomk
    path                    = D:/Sphinx2.1.6/data/ComapnyVideomk
    morphology              = libstemmer_ru, libstemmer_english
}

index iComapnyVideosr : iComapnyVideoen
{
    source                  = sComapnyVideosr
    path                    = D:/Sphinx2.1.6/data/ComapnyVideosr
    morphology              = libstemmer_ru, libstemmer_english
}

index iComapnyVideofi: iComapnyVideoen
{
    source                  = sComapnyVideofi
    path                    = D:/Sphinx2.1.6/data/ComapnyVideofi
    morphology              = libstemmer_fi, libstemmer_english, libstemmer_ru
}

index iComapnyVideohu: iComapnyVideoen
{
    source                  = sComapnyVideohu
    path                    = D:\Sphinx2.1.6\data\ComapnyVideohu
    morphology              = libstemmer_hu, libstemmer_english, libstemmer_ru
}

index iComapnyVideoru: iComapnyVideoen
{
    source                  = sComapnyVideoru
    path                    = D:\Sphinx2.1.6\data\ComapnyVideoru
    morphology              = libstemmer_ru, libstemmer_english
}

#---------Company---------------#

index iCompanybg : iCompanyen
{
    source                  = sCompanybg
    path                    = D:/Sphinx2.1.6/data/companybg
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyro : iCompanyen
{
    source                  = sCompanyro
    path                    = D:/Sphinx2.1.6/data/companyro
    morphology              = libstemmer_ro, libstemmer_english
}

index iCompanymk : iCompanyen
{
    source                  = sCompanymk
    path                    = D:/Sphinx2.1.6/data/companymk
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanysr : iCompanyen
{
    source                  = sCompanysr
    path                    = D:/Sphinx2.1.6/data/companysr
    morphology              = libstemmer_ru, libstemmer_english
}

index iCompanyfi: iCompanyen
{
    source                  = sCompanyfi
    path                    = D:/Sphinx2.1.6/data/companyfi
    morphology              = libstemmer_fi, libstemmer_english, libstemmer_ru
}

index iCompanyhu: iCompanyen
{
    source                  = sCompanyhu
    path                    = D:\Sphinx2.1.6\data\companyhu
    morphology              = libstemmer_hu, libstemmer_english, libstemmer_ru
}

index iCompanyru: iCompanyen
{
    source                  = sCompanyru
    path                    = D:\Sphinx2.1.6\data\companyru
    morphology              = libstemmer_ru, libstemmer_english
}



#############################################################################
## indexer settings
#############################################################################

indexer
{
    # memory limit, in bytes, kiloytes (16384K) or megabytes (256M)
    # optional, default is 32M, max is 2047M, recommended is 256M to 1024M
    mem_limit               = 250M

    # maximum IO calls per second (for I/O throttling)
    # optional, default is 0 (unlimited)
    #
    # max_iops              = 40


    # maximum IO call size, bytes (for I/O throttling)
    # optional, default is 0 (unlimited)
    #
    # max_iosize            = 1048576


    # maximum xmlpipe2 field length, bytes
    # optional, default is 2M
    #
    # max_xmlpipe2_field    = 4M


    # write buffer size, bytes
    # several (currently up to 4) buffers will be allocated
    # write buffers are allocated in addition to mem_limit
    # optional, default is 1M
    #
    # write_buffer          = 1M


    # maximum file field adaptive buffer size
    # optional, default is 8M, minimum is 1M
    #
    # max_file_field_buffer = 32M
}

searchd
{
    # [hostname:]port[:protocol], or /unix/socket/path to listen on
    # known protocols are 'sphinx' (SphinxAPI) and 'mysql41' (SphinxQL)
    #
    # multi-value, multiple listen points are allowed
    # optional, defaults are 9312:sphinx and 9306:mysql41, AS below
    #
    # listen                        = 127.0.0.1
    # listen                        = 192.168.0.1:9312
    # listen                        = 9312
    # listen                        = /var/run/searchd.sock
    listen                  = 9312
    listen                  = 9306:mysql41

    # log file, searchd run info is logged here
    # optional, default is 'searchd.log'
    log                     = D:/Sphinx2.1.6/log/searchd.log

    # query log file, all search queries are logged here
    # optional, default is empty (do not log queries)
    query_log               = D:/Sphinx2.1.6/log/query.log

    # client read timeout, seconds
    # optional, default is 5
    read_timeout            = 5

    # request timeout, seconds
    # optional, default is 5 minutes
    client_timeout          = 300

    # maximum amount of children to fork (concurrent searches to run)
    # optional, default is 0 (unlimited)
    max_children            = 30

    # PID file, searchd process ID file name
    # mandatory
    pid_file                = D:/Sphinx2.1.6/log/searchd.pid

    # max amount of matches the daemon ever keeps in RAM, per-index
    max_matches             = 1000

    # seamless rotate, prevents rotate stalls if precaching huge datasets
    # optional, default is 1
    seamless_rotate         = 1

    # whether to forcibly preopen all indexes on startup
    # optional, default is 1 (preopen everything)
    preopen_indexes         = 1

    # whether to unlink .old index copies on succesful rotation.
    # optional, default is 1 (do unlink)
    unlink_old              = 1

    # attribute updates periodic flush timeout, seconds
    # updates will be automatically dumped to disk this frequently
    # optional, default is 0 (disable periodic flush)
    #
    # attr_flush_period     = 900


    # instance-wide ondisk_dict defaults (per-index value take precedence)
    # optional, default is 0 (precache all dictionaries in RAM)
    #
    # ondisk_dict_default   = 1


    # MVA updates pool size
    # shared between all instances of searchd, disables attr flushes!
    # optional, default size is 1M
    mva_updates_pool        = 1M

    # max allowed network packet size
    # limits both query packets from clients, and responses from agents
    # optional, default size is 8M
    max_packet_size         = 8M

    # crash log path
    # searchd will (try to) log crashed query to 'crash_log_path.PID' file
    # optional, default is empty (do not create crash logs)
    #
    crash_log_path                = 'null'

    # max allowed per-query filter count
    # optional, default is 256
    max_filters             = 256

    # max allowed per-filter values count
    # optional, default is 4096
    max_filter_values       = 4096


    # socket listen queue length
    # optional, default is 5
    #
    # listen_backlog                = 5
    # optional, default is 256K
    #
    # read_buffer           = 256K


    # unhinted read size (currently used when reading hits)
    # optional, default is 32K
    #
    # read_unhinted         = 32K


    # max allowed per-batch query count (aka multi-query count)
    # optional, default is 32
    max_batch_queries       = 32


    # max common subtree document cache size, per-query
    # optional, default is 0 (disable subtree optimization)
    #
    # subtree_docs_cache    = 4M


    # max common subtree hit cache size, per-query
    # optional, default is 0 (disable subtree optimization)
    #
    # subtree_hits_cache    = 8M


    # multi-processing mode (MPM)
    # known values are none, fork, prefork, and threads
    # optional, default is fork
    #
    workers                 = threads # for RT to work


    # max threads to create for searching local parts of a distributed index
    # optional, default is 0, which means disable multi-threaded searching
    # should work with all MPMs (ie. does NOT require workers=threads)
    #
    # dist_threads          = 4


    # binlog files path; use empty string to disable binlog
    # optional, default is build-time configured data directory
    #
    # binlog_path           = # disable logging
    # binlog_path           = /var/lib/sphinxsearch/data # binlog.001 etc will be created there


    # binlog flush/sync mode
    # 0 means flush and sync every second
    # 1 means flush and sync every transaction
    # 2 means flush every transaction, sync every second
    # optional, default is 2
    #
    # binlog_flush          = 2
    #
    # binlog_max_log_size   = 256M


    # per-thread stack size, only affects workers=threads mode
    # optional, default is 64K
    #
    # thread_stack                  = 128K


    # per-keyword expansion limit (for dict=keywords prefix searches)
    # optional, default is 0 (no limit)
    #
    # expansion_limit               = 1000


    # RT RAM chunks flush period
    # optional, default is 0 (no periodic flush)
    #
    # rt_flush_period               = 900


    # query log file format
    # optional, known values are plain and sphinxql, default is plain
    #
    # query_log_format              = sphinxql
    query_log_format              = plain


    # version string returned to MySQL network protocol clients
    # optional, default is empty (use Sphinx version)
    #
    # mysql_version_string  = 5.0.37


    # trusted plugin directory
    # optional, default is empty (disable UDFs)
    #
    # plugin_dir                    = /usr/local/sphinx/lib


    # default server-wide collation
    # optional, default is libc_ci
    #
    collation_server                = utf8_general_ci


    # server-wide locale for libc based collations
    # optional, default is C
    #
    # collation_libc_locale = ru_RU.UTF-8


    # threaded server watchdog (only used in workers=threads mode)
    # optional, values are 0 and 1, default is 1 (watchdog on)
    #
    # watchdog                              = 1

    # SphinxQL compatibility mode (legacy columns and their names)
    # optional, default is 0 (SQL compliant syntax and result sets)
    #
    #compat_sphinxql_magics        = 1
}

# --eof--
